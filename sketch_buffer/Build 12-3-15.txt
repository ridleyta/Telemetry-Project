
C:\Users\Tom\AppData\Local\V.Micro\Arduino\Builds\sketch_buffer\mega_atmega2560\sketch_buffer.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
	rBuf_bput(((c / 10 ) % 10)	+ 0x30);
	rBuf_bput( (c % 10 )		+ 0x30);
        rBuf_bput(0xD);                          // <CR>
        rBuf_bput(0xA);                          // <LF>
};
void ringBuf::rBuf_bput(uint8_t c){
       0:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__dtors_end>
 *  \return -1 if no character is available or an available character.
 */
int MinimumSerial::read() {
  if (UCSR0A & (1 << RXC0)) return UDR0;
  return -1;
}
       4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  } else {
    putChar(b ? '1' : '0');
  }
}
//------------------------------------------------------------------------------
void ostream::putChar(char c) {
       8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
void Sd2Card::spiYield() {
#if ENABLE_SPI_YIELD && !USE_SOFTWARE_SPI && defined(SPI_HAS_TRANSACTION)
  chipSelectHigh();
  chipSelectLow();
#endif  // ENABLE_SPI_YIELD && !USE_SOFTWARE_SPI && defined(SPI_HAS_TRANSACTION)
}
       c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
}
//------------------------------------------------------------------------------
void SdBaseFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
  pos->cluster = m_curCluster;
}
      10:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
 */
bool SdFat::rename(const char *oldPath, const char *newPath) {
  SdBaseFile file;
  if (!file.open(oldPath, O_READ)) return false;
  return file.rename(&m_vwd, newPath);
}
      14:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
//------------------------------------------------------------------------------
/**Print message and error details and halt after SdFat::init() fails.
 *
 * \param[in] msg Message to print.
 */
void SdFat::initErrorPrint(char const *msg) {
      18:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
/** %Print a string in flash memory.
 *
 * \param[in] pr Print object for output.
 * \param[in] str Pointer to string stored in flash memory.
 */
void SdFatUtil::print_P(Print* pr, PGM_P str) {
      1c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
 * Use getWriteError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
  write_P(str);
  write_P(PSTR("\r\n"));
}
      20:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
//------------------------------------------------------------------------------
/** Volume free space in clusters.
 *
 * \return Count of free clusters for success or -1 if an error occurs.
 */
int32_t SdVolume::freeClusterCount() {
      24:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
	}
}

/* Delay for the given number of microseconds.  Assumes a 8 or 16 MHz clock. */
void delayMicroseconds(unsigned int us)
{
      28:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      2c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
  sbi(*_ucsrb, TXEN0);
  sbi(*_ucsrb, RXCIE0);
  cbi(*_ucsrb, UDRIE0);
}

void HardwareSerial::end()
      30:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
}

void operator delete[](void * ptr)
{
  free(ptr);
}
      34:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      38:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      3c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      40:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      44:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_17>
      48:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      4c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      50:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      54:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      58:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      5c:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__vector_23>
      60:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      64:	0c 94 10 21 	jmp	0x4220	; 0x4220 <__vector_25>
      68:	0c 94 97 21 	jmp	0x432e	; 0x432e <__vector_26>
      6c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      70:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      74:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      78:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      7c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      80:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__vector_32>
      84:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      88:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      8c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      90:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      94:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      98:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      9c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      a0:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      a4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      a8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      ac:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      b0:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      b4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      b8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      bc:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      c0:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      c4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      c8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      cc:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      d0:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      d4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      d8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      dc:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      e0:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>

000000e4 <_ZZ4loopE3__c_9>:
      e4:	20 73 65 63 6f 6e 64 73 0a 00                        seconds..

000000ee <_ZZ4loopE3__c_8>:
      ee:	45 6c 61 70 73 65 64 20 74 69 6d 65 3a 20 00        Elapsed time: .

000000fd <_ZZ4loopE3__c_7>:
      fd:	44 6f 6e 65 0a 00                                   Done..

00000103 <_ZZ4loopE3__c_6>:
     103:	77 72 69 74 65 53 74 6f 70 20 66 61 69 6c 65 64     writeStop failed
	...

00000114 <_ZZ4loopE3__c_5>:
     114:	77 72 69 74 65 44 61 74 61 20 66 61 69 6c 65 64     writeData failed
	...

00000125 <_ZZ4loopE3__c_4>:
     125:	77 72 69 74 65 53 74 61 72 74 20 66 61 69 6c 65     writeStart faile
     135:	64 00                                               d.

00000137 <_ZZ4loopE3__c_3>:
     137:	63 61 72 64 2e 65 72 61 73 65 20 66 61 69 6c 65     card.erase faile
     147:	64 00                                               d.

00000149 <_ZZ4loopE3__c_2>:
     149:	63 6f 6e 74 69 67 75 6f 75 73 52 61 6e 67 65 20     contiguousRange 
     159:	66 61 69 6c 65 64 00                                failed.

00000160 <_ZZ4loopE3__c_1>:
     160:	63 72 65 61 74 65 43 6f 6e 74 69 67 75 6f 75 73     createContiguous
     170:	20 66 61 69 6c 65 64 00                              failed.

00000178 <_ZZ4loopE3__c_0>:
     178:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

00000183 <_ZZ4loopE3__c>:
     183:	54 79 70 65 20 61 6e 79 20 63 68 61 72 61 63 74     Type any charact
     193:	65 72 20 74 6f 20 73 74 61 72 74 0a 00              er to start..

000001a0 <_ZZN7ostream9putDoubleEdE3__c>:
     1a0:	42 49 47 20 46 4c 54 00                             BIG FLT.

000001a8 <_ZZN7ostream7putBoolEbE3__c_0>:
     1a8:	66 61 6c 73 65 00                                   false.

000001ae <_ZZN7ostream7putBoolEbE3__c>:
     1ae:	74 72 75 65 00                                      true.

000001b3 <_ZZN10SdBaseFile10make83NameEPKcPhPS1_E3__c>:
     1b3:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

000001c3 <_ZZN5SdFat14initErrorPrintEvE3__c_3>:
     1c3:	4e 6f 20 65 72 72 6f 72 20 66 6f 75 6e 64 2e 00     No error found..

000001d3 <_ZZN5SdFat14initErrorPrintEvE3__c_2>:
     1d3:	43 61 6e 27 74 20 6f 70 65 6e 20 72 6f 6f 74 20     Can't open root 
     1e3:	64 69 72 65 63 74 6f 72 79 2e 00                    directory..

000001ee <_ZZN5SdFat14initErrorPrintEvE3__c_1>:
     1ee:	49 6e 76 61 6c 69 64 20 66 6f 72 6d 61 74 2c 20     Invalid format, 
     1fe:	72 65 66 6f 72 6d 61 74 20 53 44 2e 00              reformat SD..

0000020b <_ZZN5SdFat14initErrorPrintEvE3__c_0>:
     20b:	4e 6f 20 63 61 72 64 2c 20 77 72 6f 6e 67 20 63     No card, wrong c
     21b:	68 69 70 20 73 65 6c 65 63 74 20 70 69 6e 2c 20     hip select pin, 
     22b:	6f 72 20 53 50 49 20 70 72 6f 62 6c 65 6d 3f 00     or SPI problem?.

0000023b <_ZZN5SdFat14initErrorPrintEvE3__c>:
     23b:	43 61 6e 27 74 20 61 63 63 65 73 73 20 53 44 20     Can't access SD 
     24b:	63 61 72 64 2e 20 44 6f 20 6e 6f 74 20 72 65 66     card. Do not ref
     25b:	6f 72 6d 61 74 2e 00                                ormat..

00000262 <_ZZN5SdFat12errorPrint_PEPKcE3__c>:
     262:	65 72 72 6f 72 3a 20 00                             error: .

0000026a <_ZZN5SdFat10errorPrintEPKcE3__c>:
     26a:	65 72 72 6f 72 3a 20 00                             error: .

00000272 <_ZZN5SdFat10errorPrintEvE3__c_0>:
     272:	2c 30 58 00                                         ,0X.

00000276 <_ZZN5SdFat10errorPrintEvE3__c>:
     276:	53 44 20 65 72 72 6f 72 43 6f 64 65 3a 20 30 58     SD errorCode: 0X
	...

00000287 <port_to_mode_PGM>:
     287:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     297:	01 01 00 00 04 01 07 01 0a 01                       ..........

000002a1 <port_to_output_PGM>:
     2a1:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     2b1:	02 01 00 00 05 01 08 01 0b 01                       ..........

000002bb <port_to_input_PGM>:
     2bb:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     2cb:	00 01 00 00 03 01 06 01 09 01                       ..........

000002d5 <digital_pin_to_port_PGM>:
     2d5:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     2e5:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     2f5:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     305:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     315:	0b 0b 0b 0b 0b 0b                                   ......

0000031b <digital_pin_to_bit_mask_PGM>:
     31b:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     32b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     33b:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     34b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     35b:	04 08 10 20 40 80                                   ... @.

00000361 <digital_pin_to_timer_PGM>:
     361:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     38d:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000003a8 <__ctors_start>:
     3a8:	8d 03       	fmulsu	r16, r21
     3aa:	65 05       	cpc	r22, r5
     3ac:	4a 21       	and	r20, r10

000003ae <__ctors_end>:
     3ae:	86 03       	fmuls	r16, r22

000003b0 <__dtors_end>:
     3b0:	11 24       	eor	r1, r1
     3b2:	1f be       	out	0x3f, r1	; 63
     3b4:	cf ef       	ldi	r28, 0xFF	; 255
     3b6:	d1 e2       	ldi	r29, 0x21	; 33
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	00 e0       	ldi	r16, 0x00	; 0
     3be:	0c bf       	out	0x3c, r16	; 60

000003c0 <__do_copy_data>:
     3c0:	12 e0       	ldi	r17, 0x02	; 2
     3c2:	a0 e0       	ldi	r26, 0x00	; 0
     3c4:	b2 e0       	ldi	r27, 0x02	; 2
     3c6:	e6 e4       	ldi	r30, 0x46	; 70
     3c8:	fa e4       	ldi	r31, 0x4A	; 74
     3ca:	00 e0       	ldi	r16, 0x00	; 0
     3cc:	0b bf       	out	0x3b, r16	; 59
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <__do_copy_data+0x14>
     3d0:	07 90       	elpm	r0, Z+
     3d2:	0d 92       	st	X+, r0
     3d4:	a2 34       	cpi	r26, 0x42	; 66
     3d6:	b1 07       	cpc	r27, r17
     3d8:	d9 f7       	brne	.-10     	; 0x3d0 <__do_copy_data+0x10>
     3da:	1b be       	out	0x3b, r1	; 59

000003dc <__do_clear_bss>:
     3dc:	19 e0       	ldi	r17, 0x09	; 9
     3de:	a2 e4       	ldi	r26, 0x42	; 66
     3e0:	b2 e0       	ldi	r27, 0x02	; 2
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <.do_clear_bss_start>

000003e4 <.do_clear_bss_loop>:
     3e4:	1d 92       	st	X+, r1

000003e6 <.do_clear_bss_start>:
     3e6:	a3 37       	cpi	r26, 0x73	; 115
     3e8:	b1 07       	cpc	r27, r17
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <.do_clear_bss_loop>

000003ec <__do_global_ctors>:
     3ec:	13 e0       	ldi	r17, 0x03	; 3
     3ee:	ce ea       	ldi	r28, 0xAE	; 174
     3f0:	d3 e0       	ldi	r29, 0x03	; 3
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <.do_global_ctors_start>

000003f4 <.do_global_ctors_loop>:
     3f4:	22 97       	sbiw	r28, 0x02	; 2
     3f6:	fe 01       	movw	r30, r28
     3f8:	0e 94 12 25 	call	0x4a24	; 0x4a24 <__tablejump__>

000003fc <.do_global_ctors_start>:
     3fc:	c8 3a       	cpi	r28, 0xA8	; 168
     3fe:	d1 07       	cpc	r29, r17
     400:	c9 f7       	brne	.-14     	; 0x3f4 <.do_global_ctors_loop>
     402:	0e 94 c1 21 	call	0x4382	; 0x4382 <main>
     406:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__do_global_dtors>

0000040a <__bad_interrupt>:
     40a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000040e <memcmp>:
     40e:	fb 01       	movw	r30, r22
     410:	dc 01       	movw	r26, r24
     412:	04 c0       	rjmp	.+8      	; 0x41c <memcmp+0xe>
     414:	8d 91       	ld	r24, X+
     416:	01 90       	ld	r0, Z+
     418:	80 19       	sub	r24, r0
     41a:	21 f4       	brne	.+8      	; 0x424 <memcmp+0x16>
     41c:	41 50       	subi	r20, 0x01	; 1
     41e:	50 40       	sbci	r21, 0x00	; 0
     420:	c8 f7       	brcc	.-14     	; 0x414 <memcmp+0x6>
     422:	88 1b       	sub	r24, r24
     424:	99 0b       	sbc	r25, r25
     426:	08 95       	ret

00000428 <memcpy>:
     428:	fb 01       	movw	r30, r22
     42a:	dc 01       	movw	r26, r24
     42c:	02 c0       	rjmp	.+4      	; 0x432 <memcpy+0xa>
     42e:	01 90       	ld	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	41 50       	subi	r20, 0x01	; 1
     434:	50 40       	sbci	r21, 0x00	; 0
     436:	d8 f7       	brcc	.-10     	; 0x42e <memcpy+0x6>
     438:	08 95       	ret

0000043a <memset>:
     43a:	dc 01       	movw	r26, r24
     43c:	01 c0       	rjmp	.+2      	; 0x440 <memset+0x6>
     43e:	6d 93       	st	X+, r22
     440:	41 50       	subi	r20, 0x01	; 1
     442:	50 40       	sbci	r21, 0x00	; 0
     444:	e0 f7       	brcc	.-8      	; 0x43e <memset+0x4>
     446:	08 95       	ret

00000448 <_ZN7ringBuf8rBuf_putEhh>:
	}
	else
		c = NULL;
	return c;
};
void ringBuf::rBuf_put(uint8_t c, uint8_t h){
     448:	cf 92       	push	r12
     44a:	df 92       	push	r13
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	1f 93       	push	r17
     452:	dc 01       	movw	r26, r24
     454:	16 2f       	mov	r17, r22
        rBuf_bput(0xD);                          // <CR>
        rBuf_bput(0xA);                          // <LF>
};
void ringBuf::rBuf_bput(uint8_t c){
/* A function to put a byte into the buffer */
	buf[head & COUNT_MASK] = c;
     456:	c1 2c       	mov	r12, r1
     458:	94 e0       	ldi	r25, 0x04	; 4
     45a:	d9 2e       	mov	r13, r25
     45c:	ca 0e       	add	r12, r26
     45e:	db 1e       	adc	r13, r27
     460:	f6 01       	movw	r30, r12
     462:	20 81       	ld	r18, Z
     464:	31 81       	ldd	r19, Z+1	; 0x01
     466:	f9 01       	movw	r30, r18
     468:	f7 70       	andi	r31, 0x07	; 7
     46a:	ea 0f       	add	r30, r26
     46c:	fb 1f       	adc	r31, r27
     46e:	40 5d       	subi	r20, 0xD0	; 208
     470:	40 83       	st	Z, r20
	head++;
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
	count++;
     476:	84 e0       	ldi	r24, 0x04	; 4
     478:	e8 2e       	mov	r14, r24
     47a:	f8 2e       	mov	r15, r24
     47c:	ea 0e       	add	r14, r26
     47e:	fb 1e       	adc	r15, r27
     480:	f7 01       	movw	r30, r14
     482:	40 81       	ld	r20, Z
     484:	51 81       	ldd	r21, Z+1	; 0x01
        rBuf_bput(0xD);                          // <CR>
        rBuf_bput(0xA);                          // <LF>
};
void ringBuf::rBuf_bput(uint8_t c){
/* A function to put a byte into the buffer */
	buf[head & COUNT_MASK] = c;
     486:	f9 01       	movw	r30, r18
     488:	f7 70       	andi	r31, 0x07	; 7
     48a:	ea 0f       	add	r30, r26
     48c:	fb 1f       	adc	r31, r27
     48e:	80 e2       	ldi	r24, 0x20	; 32
     490:	80 83       	st	Z, r24
	head++;
     492:	2f 5f       	subi	r18, 0xFF	; 255
     494:	3f 4f       	sbci	r19, 0xFF	; 255
        rBuf_bput(0xD);                          // <CR>
        rBuf_bput(0xA);                          // <LF>
};
void ringBuf::rBuf_bput(uint8_t c){
/* A function to put a byte into the buffer */
	buf[head & COUNT_MASK] = c;
     496:	f9 01       	movw	r30, r18
     498:	f7 70       	andi	r31, 0x07	; 7
     49a:	ea 0f       	add	r30, r26
     49c:	fb 1f       	adc	r31, r27
     49e:	86 2f       	mov	r24, r22
     4a0:	64 e6       	ldi	r22, 0x64	; 100
     4a2:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__udivmodqi4>
     4a6:	80 5d       	subi	r24, 0xD0	; 208
     4a8:	80 83       	st	Z, r24
	head++;
     4aa:	2f 5f       	subi	r18, 0xFF	; 255
     4ac:	3f 4f       	sbci	r19, 0xFF	; 255
        rBuf_bput(0xD);                          // <CR>
        rBuf_bput(0xA);                          // <LF>
};
void ringBuf::rBuf_bput(uint8_t c){
/* A function to put a byte into the buffer */
	buf[head & COUNT_MASK] = c;
     4ae:	f9 01       	movw	r30, r18
     4b0:	f7 70       	andi	r31, 0x07	; 7
     4b2:	ea 0f       	add	r30, r26
     4b4:	fb 1f       	adc	r31, r27
     4b6:	81 2f       	mov	r24, r17
     4b8:	6a e0       	ldi	r22, 0x0A	; 10
     4ba:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__udivmodqi4>
     4be:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__udivmodqi4>
     4c2:	90 5d       	subi	r25, 0xD0	; 208
     4c4:	90 83       	st	Z, r25
	head++;
     4c6:	2f 5f       	subi	r18, 0xFF	; 255
     4c8:	3f 4f       	sbci	r19, 0xFF	; 255
        rBuf_bput(0xD);                          // <CR>
        rBuf_bput(0xA);                          // <LF>
};
void ringBuf::rBuf_bput(uint8_t c){
/* A function to put a byte into the buffer */
	buf[head & COUNT_MASK] = c;
     4ca:	f9 01       	movw	r30, r18
     4cc:	f7 70       	andi	r31, 0x07	; 7
     4ce:	ea 0f       	add	r30, r26
     4d0:	fb 1f       	adc	r31, r27
     4d2:	81 2f       	mov	r24, r17
     4d4:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__udivmodqi4>
     4d8:	90 5d       	subi	r25, 0xD0	; 208
     4da:	90 83       	st	Z, r25
	head++;
     4dc:	2f 5f       	subi	r18, 0xFF	; 255
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
        rBuf_bput(0xD);                          // <CR>
        rBuf_bput(0xA);                          // <LF>
};
void ringBuf::rBuf_bput(uint8_t c){
/* A function to put a byte into the buffer */
	buf[head & COUNT_MASK] = c;
     4e0:	f9 01       	movw	r30, r18
     4e2:	f7 70       	andi	r31, 0x07	; 7
     4e4:	ea 0f       	add	r30, r26
     4e6:	fb 1f       	adc	r31, r27
     4e8:	8d e0       	ldi	r24, 0x0D	; 13
     4ea:	80 83       	st	Z, r24
	head++;
     4ec:	2f 5f       	subi	r18, 0xFF	; 255
     4ee:	3f 4f       	sbci	r19, 0xFF	; 255
        rBuf_bput(0xD);                          // <CR>
        rBuf_bput(0xA);                          // <LF>
};
void ringBuf::rBuf_bput(uint8_t c){
/* A function to put a byte into the buffer */
	buf[head & COUNT_MASK] = c;
     4f0:	f9 01       	movw	r30, r18
     4f2:	f7 70       	andi	r31, 0x07	; 7
     4f4:	ea 0f       	add	r30, r26
     4f6:	fb 1f       	adc	r31, r27
     4f8:	8a e0       	ldi	r24, 0x0A	; 10
     4fa:	80 83       	st	Z, r24
	head++;
     4fc:	2f 5f       	subi	r18, 0xFF	; 255
     4fe:	3f 4f       	sbci	r19, 0xFF	; 255
     500:	f6 01       	movw	r30, r12
     502:	31 83       	std	Z+1, r19	; 0x01
     504:	20 83       	st	Z, r18
	count++;
     506:	49 5f       	subi	r20, 0xF9	; 249
     508:	5f 4f       	sbci	r21, 0xFF	; 255
     50a:	f7 01       	movw	r30, r14
     50c:	51 83       	std	Z+1, r21	; 0x01
     50e:	40 83       	st	Z, r20
	rBuf_bput( (c / 100)		+ 0x30);
	rBuf_bput(((c / 10 ) % 10)	+ 0x30);
	rBuf_bput( (c % 10 )		+ 0x30);
        rBuf_bput(0xD);                          // <CR>
        rBuf_bput(0xA);                          // <LF>
};
     510:	1f 91       	pop	r17
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	df 90       	pop	r13
     518:	cf 90       	pop	r12
     51a:	08 95       	ret

0000051c <_ZN7ringBuf9rBuf_fullEv>:
};
uint_fast8_t ringBuf::rBuf_empty(){
/* A function to return true if the buffer is empty */
	return (0 == (count & COUNT_MASK));
};
uint_fast8_t ringBuf::rBuf_full(){
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	fc 01       	movw	r30, r24
     520:	ec 5f       	subi	r30, 0xFC	; 252
     522:	fb 4f       	sbci	r31, 0xFB	; 251
     524:	80 81       	ld	r24, Z
     526:	91 81       	ldd	r25, Z+1	; 0x01
     528:	93 70       	andi	r25, 0x03	; 3
     52a:	80 50       	subi	r24, 0x00	; 0
     52c:	92 40       	sbci	r25, 0x02	; 2
     52e:	08 f0       	brcs	.+2      	; 0x532 <_ZN7ringBuf9rBuf_fullEv+0x16>
     530:	21 e0       	ldi	r18, 0x01	; 1
/* A function to return true if the buffer is full */
	return ((count & FULL_MASK) >= RBUF_SIZE);
};
     532:	82 2f       	mov	r24, r18
     534:	08 95       	ret

00000536 <_ZN7ringBuf10rBuf_flushEh>:
void ringBuf::rBuf_flush(const uint_fast8_t clearBuffer = 0){
     536:	dc 01       	movw	r26, r24
/* A function to flush the queue (head,tail,count=0) and set buffered bytes to 0 */
	head = 0;
     538:	a0 50       	subi	r26, 0x00	; 0
     53a:	bc 4f       	sbci	r27, 0xFC	; 252
     53c:	1d 92       	st	X+, r1
     53e:	1d 92       	st	X+, r1
	tail = 0;
     540:	1d 92       	st	X+, r1
     542:	1d 92       	st	X+, r1
	count = 0;
     544:	11 96       	adiw	r26, 0x01	; 1
     546:	1c 92       	st	X, r1
     548:	1e 92       	st	-X, r1
     54a:	a4 50       	subi	r26, 0x04	; 4
     54c:	b4 40       	sbci	r27, 0x04	; 4
	if (clearBuffer)
     54e:	66 23       	and	r22, r22
     550:	39 f0       	breq	.+14     	; 0x560 <_ZN7ringBuf10rBuf_flushEh+0x2a>
		memset(buf, 0, RBUF_SIZE);
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	9c 01       	movw	r18, r24
     558:	1d 92       	st	X+, r1
     55a:	21 50       	subi	r18, 0x01	; 1
     55c:	30 40       	sbci	r19, 0x00	; 0
     55e:	e1 f7       	brne	.-8      	; 0x558 <_ZN7ringBuf10rBuf_flushEh+0x22>
     560:	08 95       	ret

00000562 <_ZN7ringBufC1Ev>:
	02/03/2015
*/
#include "RingBuf.h"

ringBuf::ringBuf(){
	rBuf_flush(1);
     562:	61 e0       	ldi	r22, 0x01	; 1
     564:	0e 94 9b 02 	call	0x536	; 0x536 <_ZN7ringBuf10rBuf_flushEh>
};
     568:	08 95       	ret

0000056a <_ZN7ringBuf8rBuf_getEPh>:

ringBuf::~ringBuf(){
	delete buf;
};

uint_fast8_t* ringBuf::rBuf_get(uint8_t* l){
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	dc 01       	movw	r26, r24
/* A function to get 512 bytes from the buffer */
	uint_fast8_t* c;
	if ((count & COUNT_MASK) >= 512U){
     570:	ac 5f       	subi	r26, 0xFC	; 252
     572:	bb 4f       	sbci	r27, 0xFB	; 251
     574:	8d 91       	ld	r24, X+
     576:	9c 91       	ld	r25, X
     578:	11 97       	sbiw	r26, 0x01	; 1
     57a:	a4 50       	subi	r26, 0x04	; 4
     57c:	b4 40       	sbci	r27, 0x04	; 4
     57e:	97 70       	andi	r25, 0x07	; 7
     580:	80 50       	subi	r24, 0x00	; 0
     582:	92 40       	sbci	r25, 0x02	; 2
     584:	18 f1       	brcs	.+70     	; 0x5cc <_ZN7ringBuf8rBuf_getEPh+0x62>
		memcpy(l, &buf[tail & COUNT_MASK],512);
     586:	ae 5f       	subi	r26, 0xFE	; 254
     588:	bb 4f       	sbci	r27, 0xFB	; 251
     58a:	ed 91       	ld	r30, X+
     58c:	fc 91       	ld	r31, X
     58e:	11 97       	sbiw	r26, 0x01	; 1
     590:	a2 50       	subi	r26, 0x02	; 2
     592:	b4 40       	sbci	r27, 0x04	; 4
     594:	f7 70       	andi	r31, 0x07	; 7
     596:	eb 01       	movw	r28, r22
     598:	ea 0f       	add	r30, r26
     59a:	fb 1f       	adc	r31, r27
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	01 90       	ld	r0, Z+
     5a2:	09 92       	st	Y+, r0
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <_ZN7ringBuf8rBuf_getEPh+0x36>
		tail+=512U;
     5a8:	fd 01       	movw	r30, r26
     5aa:	ee 5f       	subi	r30, 0xFE	; 254
     5ac:	fb 4f       	sbci	r31, 0xFB	; 251
     5ae:	80 81       	ld	r24, Z
     5b0:	91 81       	ldd	r25, Z+1	; 0x01
     5b2:	80 50       	subi	r24, 0x00	; 0
     5b4:	9e 4f       	sbci	r25, 0xFE	; 254
     5b6:	91 83       	std	Z+1, r25	; 0x01
     5b8:	80 83       	st	Z, r24
		count-=512U;
     5ba:	fd 01       	movw	r30, r26
     5bc:	ec 5f       	subi	r30, 0xFC	; 252
     5be:	fb 4f       	sbci	r31, 0xFB	; 251
     5c0:	80 81       	ld	r24, Z
     5c2:	91 81       	ldd	r25, Z+1	; 0x01
     5c4:	80 50       	subi	r24, 0x00	; 0
     5c6:	92 40       	sbci	r25, 0x02	; 2
     5c8:	91 83       	std	Z+1, r25	; 0x01
     5ca:	80 83       	st	Z, r24
	}
	else
		c = NULL;
	return c;
};
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <_ZN7ringBufD1Ev>:
ringBuf::ringBuf(){
	rBuf_flush(1);
};

ringBuf::~ringBuf(){
	delete buf;
     5d6:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <_ZdlPv>
};
     5da:	08 95       	ret

000005dc <_Z4endlR7ostream>:
}
/** insert endline
 * \param[in] os The Stream
 * \return The stream
 */
inline ostream& endl(ostream& os) {
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	8c 01       	movw	r16, r24
   *
   * \param[in] ch The character
   * \return A reference to the ostream object.
   */
  ostream& put(char ch) {
    putch(ch);
     5e2:	dc 01       	movw	r26, r24
     5e4:	ed 91       	ld	r30, X+
     5e6:	fc 91       	ld	r31, X
     5e8:	01 90       	ld	r0, Z+
     5ea:	f0 81       	ld	r31, Z
     5ec:	e0 2d       	mov	r30, r0
     5ee:	6a e0       	ldi	r22, 0x0A	; 10
     5f0:	19 95       	eicall
  os.put('\n');
#if ENDL_CALLS_FLUSH
  os.flush();
#endif  // ENDL_CALLS_FLUSH
  return os;
}
     5f2:	c8 01       	movw	r24, r16
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <_ZN16ArduinoOutStream5putchEc>:
  /// @cond SHOW_PROTECTED
  /**
   * Internal do not use
   * \param[in] c
   */
  void putch(char c) {
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	ec 01       	movw	r28, r24
     602:	16 2f       	mov	r17, r22
    if (c == '\n') m_pr->write('\r');
     604:	6a 30       	cpi	r22, 0x0A	; 10
     606:	51 f4       	brne	.+20     	; 0x61c <_ZN16ArduinoOutStream5putchEc+0x22>
     608:	ea 81       	ldd	r30, Y+2	; 0x02
     60a:	fb 81       	ldd	r31, Y+3	; 0x03
     60c:	a0 81       	ld	r26, Z
     60e:	b1 81       	ldd	r27, Z+1	; 0x01
     610:	2d 91       	ld	r18, X+
     612:	3c 91       	ld	r19, X
     614:	cf 01       	movw	r24, r30
     616:	6d e0       	ldi	r22, 0x0D	; 13
     618:	f9 01       	movw	r30, r18
     61a:	19 95       	eicall
    m_pr->write(c);
     61c:	ea 81       	ldd	r30, Y+2	; 0x02
     61e:	fb 81       	ldd	r31, Y+3	; 0x03
     620:	a0 81       	ld	r26, Z
     622:	b1 81       	ldd	r27, Z+1	; 0x01
     624:	2d 91       	ld	r18, X+
     626:	3c 91       	ld	r19, X
     628:	cf 01       	movw	r24, r30
     62a:	61 2f       	mov	r22, r17
     62c:	f9 01       	movw	r30, r18
     62e:	19 95       	eicall
  }
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	08 95       	ret

00000638 <_ZN16ArduinoOutStream7seekoffElN8ios_base7seekdirE>:
  void putstr(const char* str) {m_pr->write(str);}
  bool seekoff(off_type off, seekdir way) {return false;}
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	08 95       	ret

0000063c <_ZN16ArduinoOutStream7seekposEm>:
  bool seekpos(pos_type pos) {return false;}
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	08 95       	ret

00000640 <_ZN16ArduinoOutStream4syncEv>:
  bool sync() {return true;}
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	08 95       	ret

00000644 <_ZN16ArduinoOutStream7tellposEv>:
  pos_type tellpos() {return 0;}
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	08 95       	ret

0000064e <__vector_17>:
/***********************************************************************************************************************/
//Functions

/***********************************************************************************************************************/
//Interrupts
ISR(TIMER1_COMPA_vect){        
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
     658:	8f 93       	push	r24
  // fast interrupt service routine
  count1++;
     65a:	80 91 ac 02 	lds	r24, 0x02AC
     65e:	8f 5f       	subi	r24, 0xFF	; 255
     660:	80 93 ac 02 	sts	0x02AC, r24
} 
     664:	8f 91       	pop	r24
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f 90       	pop	r0
     66c:	1f 90       	pop	r1
     66e:	18 95       	reti

00000670 <_Z41__static_initialization_and_destruction_0ii>:
  cout << pstr("Elapsed time: ") << setprecision(3)<< 1.e-6*t;
  cout << pstr(" seconds\n");
  // close file for next pass of loop
  file.close();
  Serial.println();
}
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	91 05       	cpc	r25, r1
     674:	09 f0       	breq	.+2      	; 0x678 <_Z41__static_initialization_and_destruction_0ii+0x8>
     676:	40 c0       	rjmp	.+128    	; 0x6f8 <_Z41__static_initialization_and_destruction_0ii+0x88>
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	09 f0       	breq	.+2      	; 0x680 <_Z41__static_initialization_and_destruction_0ii+0x10>
     67e:	45 c0       	rjmp	.+138    	; 0x70a <_Z41__static_initialization_and_destruction_0ii+0x9a>
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
     680:	89 e1       	ldi	r24, 0x19	; 25
     682:	80 93 43 02 	sts	0x0243, r24
     686:	10 92 46 02 	sts	0x0246, r1
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume() : m_fatType(0) {}
     68a:	10 92 5a 02 	sts	0x025A, r1
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), m_type(FAT_FILE_TYPE_CLOSED) {}
     68e:	10 92 61 02 	sts	0x0261, r1
     692:	10 92 63 02 	sts	0x0263, r1
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     696:	10 92 7f 02 	sts	0x027F, r1
     69a:	10 92 81 02 	sts	0x0281, r1
     69e:	10 92 7e 02 	sts	0x027E, r1
     6a2:	10 92 7d 02 	sts	0x027D, r1
class SdFile : public SdBaseFile, public Stream {
#else  // SD_FILE_USES_STREAM
class SdFile : public SdBaseFile, public Print {
#endif  // SD_FILE_USES_STREAM
 public:
  SdFile() {}
     6a6:	8e e2       	ldi	r24, 0x2E	; 46
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	90 93 7c 02 	sts	0x027C, r25
     6ae:	80 93 7b 02 	sts	0x027B, r24
  static const openmode out    = 0X40;
  /** truncate an existing stream when opening */
  static const openmode trunc  = 0X80;
  //----------------------------------------------------------------------------
  ios_base() : m_fill(' '), m_fmtflags(dec | right | skipws)
    , m_precision(2), m_width(0) {}
     6b2:	80 e2       	ldi	r24, 0x20	; 32
     6b4:	80 93 a5 02 	sts	0x02A5, r24
     6b8:	8a e0       	ldi	r24, 0x0A	; 10
     6ba:	90 e1       	ldi	r25, 0x10	; 16
     6bc:	90 93 a7 02 	sts	0x02A7, r25
     6c0:	80 93 a6 02 	sts	0x02A6, r24
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	80 93 a8 02 	sts	0x02A8, r24
     6ca:	10 92 aa 02 	sts	0x02AA, r1
     6ce:	10 92 a9 02 	sts	0x02A9, r1
 * \brief Error and state information for all streams
 */
class ios : public ios_base {
 public:
  /** Create ios with no error flags set */
  ios() : m_iostate(0) {}
     6d2:	10 92 ab 02 	sts	0x02AB, r1
 public:
  /** constructor
   *
   * \param[in] pr Print object for this ArduinoOutStream.
   */
  explicit ArduinoOutStream(Print& pr) : m_pr(&pr) {}
     6d6:	86 e1       	ldi	r24, 0x16	; 22
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	90 93 a2 02 	sts	0x02A2, r25
     6de:	80 93 a1 02 	sts	0x02A1, r24
     6e2:	82 ed       	ldi	r24, 0xD2	; 210
     6e4:	98 e0       	ldi	r25, 0x08	; 8
     6e6:	90 93 a4 02 	sts	0x02A4, r25
     6ea:	80 93 a3 02 	sts	0x02A3, r24
//------------------------------------------------------------------------------

//count interrupts for debug
volatile uint8_t count1, count2;
//interrupt buffer
ringBuf uBuf;
     6ee:	8e ea       	ldi	r24, 0xAE	; 174
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	0e 94 b1 02 	call	0x562	; 0x562 <_ZN7ringBufC1Ev>
     6f6:	08 95       	ret
     6f8:	89 2b       	or	r24, r25
     6fa:	39 f4       	brne	.+14     	; 0x70a <_Z41__static_initialization_and_destruction_0ii+0x9a>
     6fc:	6f 5f       	subi	r22, 0xFF	; 255
     6fe:	7f 4f       	sbci	r23, 0xFF	; 255
     700:	21 f4       	brne	.+8      	; 0x70a <_Z41__static_initialization_and_destruction_0ii+0x9a>
     702:	8e ea       	ldi	r24, 0xAE	; 174
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <_ZN7ringBufD1Ev>
     70a:	08 95       	ret

0000070c <_GLOBAL__D_sd>:
  cout << pstr("Elapsed time: ") << setprecision(3)<< 1.e-6*t;
  cout << pstr(" seconds\n");
  // close file for next pass of loop
  file.close();
  Serial.println();
}
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	6f ef       	ldi	r22, 0xFF	; 255
     712:	7f ef       	ldi	r23, 0xFF	; 255
     714:	0e 94 38 03 	call	0x670	; 0x670 <_Z41__static_initialization_and_destruction_0ii>
     718:	08 95       	ret

0000071a <_GLOBAL__I_sd>:
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	6f ef       	ldi	r22, 0xFF	; 255
     720:	7f ef       	ldi	r23, 0xFF	; 255
     722:	0e 94 38 03 	call	0x670	; 0x670 <_Z41__static_initialization_and_destruction_0ii>
     726:	08 95       	ret

00000728 <_ZN16ArduinoOutStream6putstrEPKc>:
   */
  void putch(char c) {
    if (c == '\n') m_pr->write('\r');
    m_pr->write(c);
  }
  void putstr(const char* str) {m_pr->write(str);}
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	fc 01       	movw	r30, r24
     72e:	c2 81       	ldd	r28, Z+2	; 0x02
     730:	d3 81       	ldd	r29, Z+3	; 0x03
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     732:	61 15       	cp	r22, r1
     734:	71 05       	cpc	r23, r1
     736:	79 f0       	breq	.+30     	; 0x756 <_ZN16ArduinoOutStream6putstrEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
     738:	db 01       	movw	r26, r22
     73a:	0d 90       	ld	r0, X+
     73c:	00 20       	and	r0, r0
     73e:	e9 f7       	brne	.-6      	; 0x73a <_ZN16ArduinoOutStream6putstrEPKc+0x12>
     740:	11 97       	sbiw	r26, 0x01	; 1
     742:	a6 1b       	sub	r26, r22
     744:	b7 0b       	sbc	r27, r23
     746:	e8 81       	ld	r30, Y
     748:	f9 81       	ldd	r31, Y+1	; 0x01
     74a:	02 80       	ldd	r0, Z+2	; 0x02
     74c:	f3 81       	ldd	r31, Z+3	; 0x03
     74e:	e0 2d       	mov	r30, r0
     750:	ce 01       	movw	r24, r28
     752:	ad 01       	movw	r20, r26
     754:	19 95       	eicall
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <loop>:
  count2++;
  uBuf.rBuf_put(count2,1);
} 

/***********************************************************************************************************************/
void loop(void) {
     75c:	af 92       	push	r10
     75e:	bf 92       	push	r11
     760:	cf 92       	push	r12
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
  // Background loop writes to the SD card:
  
  while (Serial.read() >= 0) {}
     76c:	82 ed       	ldi	r24, 0xD2	; 210
     76e:	98 e0       	ldi	r25, 0x08	; 8
     770:	0e 94 56 20 	call	0x40ac	; 0x40ac <_ZN14HardwareSerial4readEv>
     774:	97 ff       	sbrs	r25, 7
     776:	fa cf       	rjmp	.-12     	; 0x76c <loop+0x10>
  // pstr stores strings in flash to save RAM
  cout << pstr("Type any character to start\n");
     778:	81 ea       	ldi	r24, 0xA1	; 161
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	63 e8       	ldi	r22, 0x83	; 131
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN7ostream6putPgmEPKc>
     784:	06 c0       	rjmp	.+12     	; 0x792 <loop+0x36>
  while (Serial.read() <= 0) {delay(1);}
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <delay>
     792:	82 ed       	ldi	r24, 0xD2	; 210
     794:	98 e0       	ldi	r25, 0x08	; 8
     796:	0e 94 56 20 	call	0x40ac	; 0x40ac <_ZN14HardwareSerial4readEv>
     79a:	18 16       	cp	r1, r24
     79c:	19 06       	cpc	r1, r25
     79e:	9c f7       	brge	.-26     	; 0x786 <loop+0x2a>
  
  cout << pstr("Free RAM: ") << FreeRam() << endl;
     7a0:	81 ea       	ldi	r24, 0xA1	; 161
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	68 e7       	ldi	r22, 0x78	; 120
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN7ostream6putPgmEPKc>
     7ac:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <_ZN9SdFatUtil7FreeRamEv>
  /** Output signed int
   * \param[in] arg value to output
   * \return the stream
   */
  ostream &operator<< (int arg) {
    putNum((int32_t)arg);
     7b0:	ac 01       	movw	r20, r24
     7b2:	66 27       	eor	r22, r22
     7b4:	57 fd       	sbrc	r21, 7
     7b6:	60 95       	com	r22
     7b8:	76 2f       	mov	r23, r22
     7ba:	81 ea       	ldi	r24, 0xA1	; 161
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_ZN7ostream6putNumEl>
  /** call manipulator
   * \param[in] pf function to call
   * \return the stream
   */
  ostream& operator<< (ostream& (*pf)(ostream& str)) {
    return pf(*this);
     7c2:	81 ea       	ldi	r24, 0xA1	; 161
     7c4:	92 e0       	ldi	r25, 0x02	; 2
     7c6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z4endlR7ostream>
  
  // initialize the SD card at SPI_FULL_SPEED for best performance.
  // try SPI_HALF_SPEED if bus errors occur.
  if (!sd.begin(chipSelect, SPI_FULL_SPEED)) sd.initErrorHalt();
     7ca:	82 e4       	ldi	r24, 0x42	; 66
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	65 e3       	ldi	r22, 0x35	; 53
     7d0:	42 e0       	ldi	r20, 0x02	; 2
     7d2:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_ZN5SdFat5beginEhh>
     7d6:	88 23       	and	r24, r24
     7d8:	21 f4       	brne	.+8      	; 0x7e2 <loop+0x86>
     7da:	82 e4       	ldi	r24, 0x42	; 66
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_ZN5SdFat13initErrorHaltEv>

  // delete possible existing file
  sd.remove("RAW.TXT");
     7e2:	82 e4       	ldi	r24, 0x42	; 66
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	72 e0       	ldi	r23, 0x02	; 2
     7ea:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <_ZN5SdFat6removeEPKc>

  // create a contiguous file
  if (!file.createContiguous(sd.vwd(), "RAW.TXT", 512UL*BLOCK_COUNT)) {
     7ee:	8f e7       	ldi	r24, 0x7F	; 127
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	61 e6       	ldi	r22, 0x61	; 97
     7f4:	72 e0       	ldi	r23, 0x02	; 2
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	52 e0       	ldi	r21, 0x02	; 2
     7fa:	00 e0       	ldi	r16, 0x00	; 0
     7fc:	18 ec       	ldi	r17, 0xC8	; 200
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <_ZN10SdBaseFile16createContiguousEPS_PKcm>
     806:	88 23       	and	r24, r24
     808:	31 f4       	brne	.+12     	; 0x816 <loop+0xba>
    error("createContiguous failed");
     80a:	82 e4       	ldi	r24, 0x42	; 66
     80c:	92 e0       	ldi	r25, 0x02	; 2
     80e:	60 e6       	ldi	r22, 0x60	; 96
     810:	71 e0       	ldi	r23, 0x01	; 1
     812:	0e 94 99 17 	call	0x2f32	; 0x2f32 <_ZN5SdFat11errorHalt_PEPKc>
  }
  // get the location of the file's blocks
  if (!file.contiguousRange(&bgnBlock, &endBlock)) {
     816:	8f e7       	ldi	r24, 0x7F	; 127
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	69 e9       	ldi	r22, 0x99	; 153
     81c:	72 e0       	ldi	r23, 0x02	; 2
     81e:	4d e9       	ldi	r20, 0x9D	; 157
     820:	52 e0       	ldi	r21, 0x02	; 2
     822:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN10SdBaseFile15contiguousRangeEPmS0_>
     826:	88 23       	and	r24, r24
     828:	31 f4       	brne	.+12     	; 0x836 <loop+0xda>
    error("contiguousRange failed");
     82a:	82 e4       	ldi	r24, 0x42	; 66
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	69 e4       	ldi	r22, 0x49	; 73
     830:	71 e0       	ldi	r23, 0x01	; 1
     832:	0e 94 99 17 	call	0x2f32	; 0x2f32 <_ZN5SdFat11errorHalt_PEPKc>
  //*********************NOTE**************************************
  // NO SdFile calls are allowed while cache is used for raw writes
  //***************************************************************

  // tell card to setup for multiple block write with pre-erase
  if (!sd.card()->erase(bgnBlock, endBlock)) error("card.erase failed");
     836:	40 91 99 02 	lds	r20, 0x0299
     83a:	50 91 9a 02 	lds	r21, 0x029A
     83e:	60 91 9b 02 	lds	r22, 0x029B
     842:	70 91 9c 02 	lds	r23, 0x029C
     846:	00 91 9d 02 	lds	r16, 0x029D
     84a:	10 91 9e 02 	lds	r17, 0x029E
     84e:	20 91 9f 02 	lds	r18, 0x029F
     852:	30 91 a0 02 	lds	r19, 0x02A0
     856:	82 e4       	ldi	r24, 0x42	; 66
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN7Sd2Card5eraseEmm>
     85e:	88 23       	and	r24, r24
     860:	31 f4       	brne	.+12     	; 0x86e <loop+0x112>
     862:	82 e4       	ldi	r24, 0x42	; 66
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	67 e3       	ldi	r22, 0x37	; 55
     868:	71 e0       	ldi	r23, 0x01	; 1
     86a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <_ZN5SdFat11errorHalt_PEPKc>
  if (!sd.card()->writeStart(bgnBlock, BLOCK_COUNT)) {
     86e:	40 91 99 02 	lds	r20, 0x0299
     872:	50 91 9a 02 	lds	r21, 0x029A
     876:	60 91 9b 02 	lds	r22, 0x029B
     87a:	70 91 9c 02 	lds	r23, 0x029C
     87e:	82 e4       	ldi	r24, 0x42	; 66
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	04 e6       	ldi	r16, 0x64	; 100
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_ZN7Sd2Card10writeStartEmm>
     88e:	88 23       	and	r24, r24
     890:	31 f4       	brne	.+12     	; 0x89e <loop+0x142>
    error("writeStart failed");
     892:	82 e4       	ldi	r24, 0x42	; 66
     894:	92 e0       	ldi	r25, 0x02	; 2
     896:	65 e2       	ldi	r22, 0x25	; 37
     898:	71 e0       	ldi	r23, 0x01	; 1
     89a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <_ZN5SdFat11errorHalt_PEPKc>
  }
  
  //init time
  uint32_t t = micros();
     89e:	0e 94 9b 1c 	call	0x3936	; 0x3936 <micros>
     8a2:	5b 01       	movw	r10, r22
     8a4:	6c 01       	movw	r12, r24
  /** Clear the cache and returns a pointer to the cache.  Used by the WaveRP
   * recorder to do raw write to the SD card.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  cache_t* cacheClear() {
    if (!cacheSync()) return 0;
     8a6:	0e 94 29 18 	call	0x3052	; 0x3052 <_ZN8SdVolume9cacheSyncEv>
     8aa:	88 23       	and	r24, r24
     8ac:	19 f4       	brne	.+6      	; 0x8b4 <loop+0x158>
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	0e c0       	rjmp	.+28     	; 0x8d0 <loop+0x174>
    m_cacheBlockNumber = 0XFFFFFFFF;
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	9f ef       	ldi	r25, 0xFF	; 255
     8b8:	af ef       	ldi	r26, 0xFF	; 255
     8ba:	bf ef       	ldi	r27, 0xFF	; 255
     8bc:	80 93 c2 08 	sts	0x08C2, r24
     8c0:	90 93 c3 08 	sts	0x08C3, r25
     8c4:	a0 93 c4 08 	sts	0x08C4, r26
     8c8:	b0 93 c5 08 	sts	0x08C5, r27
     8cc:	22 ec       	ldi	r18, 0xC2	; 194
     8ce:	36 e0       	ldi	r19, 0x06	; 6
  
  // clear the cache and use it as a 512 byte buffer
  uint8_t* sdCache1 = (uint8_t*)sd.vol()->cacheClear();
     8d0:	79 01       	movw	r14, r18
  memset(sdCache1, ' ', 512);
     8d2:	c9 01       	movw	r24, r18
     8d4:	60 e2       	ldi	r22, 0x20	; 32
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	52 e0       	ldi	r21, 0x02	; 2
     8dc:	0e 94 1d 02 	call	0x43a	; 0x43a <memset>
     8e0:	00 e0       	ldi	r16, 0x00	; 0
     8e2:	10 e0       	ldi	r17, 0x00	; 0
  for (uint32_t b = 0; b < BLOCK_COUNT; b++){
    if (uBuf.rBuf_full())
     8e4:	8e ea       	ldi	r24, 0xAE	; 174
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN7ringBuf9rBuf_fullEv>
     8ec:	88 23       	and	r24, r24
     8ee:	91 f0       	breq	.+36     	; 0x914 <loop+0x1b8>
    {
    uBuf.rBuf_get(sdCache1);   
     8f0:	8e ea       	ldi	r24, 0xAE	; 174
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	b7 01       	movw	r22, r14
     8f6:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN7ringBuf8rBuf_getEPh>
    if (!sd.card()->writeData(sdCache1)) error("writeData failed");
     8fa:	82 e4       	ldi	r24, 0x42	; 66
     8fc:	92 e0       	ldi	r25, 0x02	; 2
     8fe:	b7 01       	movw	r22, r14
     900:	0e 94 6d 09 	call	0x12da	; 0x12da <_ZN7Sd2Card9writeDataEPKh>
     904:	88 23       	and	r24, r24
     906:	31 f4       	brne	.+12     	; 0x914 <loop+0x1b8>
     908:	82 e4       	ldi	r24, 0x42	; 66
     90a:	92 e0       	ldi	r25, 0x02	; 2
     90c:	64 e1       	ldi	r22, 0x14	; 20
     90e:	71 e0       	ldi	r23, 0x01	; 1
     910:	0e 94 99 17 	call	0x2f32	; 0x2f32 <_ZN5SdFat11errorHalt_PEPKc>
     914:	0f 5f       	subi	r16, 0xFF	; 255
     916:	1f 4f       	sbci	r17, 0xFF	; 255
  uint32_t t = micros();
  
  // clear the cache and use it as a 512 byte buffer
  uint8_t* sdCache1 = (uint8_t*)sd.vol()->cacheClear();
  memset(sdCache1, ' ', 512);
  for (uint32_t b = 0; b < BLOCK_COUNT; b++){
     918:	04 36       	cpi	r16, 0x64	; 100
     91a:	11 05       	cpc	r17, r1
     91c:	19 f7       	brne	.-58     	; 0x8e4 <loop+0x188>
    uBuf.rBuf_get(sdCache1);   
    if (!sd.card()->writeData(sdCache1)) error("writeData failed");
    }
  }
  // total write time
  t = micros() - t;
     91e:	0e 94 9b 1c 	call	0x3936	; 0x3936 <micros>
     922:	7b 01       	movw	r14, r22
     924:	8c 01       	movw	r16, r24

  // end multiple block write mode
  if (!sd.card()->writeStop()) error("writeStop failed");
     926:	82 e4       	ldi	r24, 0x42	; 66
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN7Sd2Card9writeStopEv>
     92e:	88 23       	and	r24, r24
     930:	31 f4       	brne	.+12     	; 0x93e <loop+0x1e2>
     932:	82 e4       	ldi	r24, 0x42	; 66
     934:	92 e0       	ldi	r25, 0x02	; 2
     936:	63 e0       	ldi	r22, 0x03	; 3
     938:	71 e0       	ldi	r23, 0x01	; 1
     93a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <_ZN5SdFat11errorHalt_PEPKc>

  cout << pstr("Done\n");
     93e:	81 ea       	ldi	r24, 0xA1	; 161
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	6d ef       	ldi	r22, 0xFD	; 253
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN7ostream6putPgmEPKc>
  cout << pstr("Elapsed time: ") << setprecision(3)<< 1.e-6*t;
     94a:	81 ea       	ldi	r24, 0xA1	; 161
     94c:	92 e0       	ldi	r25, 0x02	; 2
     94e:	6e ee       	ldi	r22, 0xEE	; 238
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN7ostream6putPgmEPKc>
   * \param[in] n new precision
   * \return old precision
   */
  int precision(unsigned int n) {
    int r = m_precision;
    m_precision = n;
     956:	e0 91 a1 02 	lds	r30, 0x02A1
     95a:	f0 91 a2 02 	lds	r31, 0x02A2
     95e:	36 97       	sbiw	r30, 0x06	; 6
     960:	01 90       	ld	r0, Z+
     962:	f0 81       	ld	r31, Z
     964:	e0 2d       	mov	r30, r0
     966:	ef 55       	subi	r30, 0x5F	; 95
     968:	fd 4f       	sbci	r31, 0xFD	; 253
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	83 83       	std	Z+3, r24	; 0x03
  /** Output double
   * \param[in] arg value to output
   * \return the stream
   */
  ostream &operator<< (double arg) {
    putDouble(arg);
     96e:	ea 18       	sub	r14, r10
     970:	fb 08       	sbc	r15, r11
     972:	0c 09       	sbc	r16, r12
     974:	1d 09       	sbc	r17, r13
     976:	c8 01       	movw	r24, r16
     978:	b7 01       	movw	r22, r14
     97a:	0e 94 aa 23 	call	0x4754	; 0x4754 <__floatunsisf>
     97e:	2d eb       	ldi	r18, 0xBD	; 189
     980:	37 e3       	ldi	r19, 0x37	; 55
     982:	46 e8       	ldi	r20, 0x86	; 134
     984:	55 e3       	ldi	r21, 0x35	; 53
     986:	0e 94 60 24 	call	0x48c0	; 0x48c0 <__mulsf3>
     98a:	ab 01       	movw	r20, r22
     98c:	bc 01       	movw	r22, r24
     98e:	81 ea       	ldi	r24, 0xA1	; 161
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN7ostream9putDoubleEd>
  cout << pstr(" seconds\n");
     996:	81 ea       	ldi	r24, 0xA1	; 161
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	64 ee       	ldi	r22, 0xE4	; 228
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN7ostream6putPgmEPKc>
  // close file for next pass of loop
  file.close();
     9a2:	8f e7       	ldi	r24, 0x7F	; 127
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 34 10 	call	0x2068	; 0x2068 <_ZN10SdBaseFile5closeEv>
  Serial.println();
     9aa:	82 ed       	ldi	r24, 0xD2	; 210
     9ac:	98 e0       	ldi	r25, 0x08	; 8
     9ae:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5Print7printlnEv>
}
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	08 95       	ret

000009c4 <__vector_32>:
ISR(TIMER1_COMPA_vect){        
  // fast interrupt service routine
  count1++;
} 

ISR(TIMER3_COMPA_vect){        
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	0b b6       	in	r0, 0x3b	; 59
     9ce:	0f 92       	push	r0
     9d0:	11 24       	eor	r1, r1
     9d2:	2f 93       	push	r18
     9d4:	3f 93       	push	r19
     9d6:	4f 93       	push	r20
     9d8:	5f 93       	push	r21
     9da:	6f 93       	push	r22
     9dc:	7f 93       	push	r23
     9de:	8f 93       	push	r24
     9e0:	9f 93       	push	r25
     9e2:	af 93       	push	r26
     9e4:	bf 93       	push	r27
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
  // slow interrupt service routine 
  count2++;
     9ea:	80 91 ad 02 	lds	r24, 0x02AD
     9ee:	8f 5f       	subi	r24, 0xFF	; 255
     9f0:	80 93 ad 02 	sts	0x02AD, r24
  uBuf.rBuf_put(count2,1);
     9f4:	60 91 ad 02 	lds	r22, 0x02AD
     9f8:	8e ea       	ldi	r24, 0xAE	; 174
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	41 e0       	ldi	r20, 0x01	; 1
     9fe:	0e 94 24 02 	call	0x448	; 0x448 <_ZN7ringBuf8rBuf_putEhh>
} 
     a02:	ff 91       	pop	r31
     a04:	ef 91       	pop	r30
     a06:	bf 91       	pop	r27
     a08:	af 91       	pop	r26
     a0a:	9f 91       	pop	r25
     a0c:	8f 91       	pop	r24
     a0e:	7f 91       	pop	r23
     a10:	6f 91       	pop	r22
     a12:	5f 91       	pop	r21
     a14:	4f 91       	pop	r20
     a16:	3f 91       	pop	r19
     a18:	2f 91       	pop	r18
     a1a:	0f 90       	pop	r0
     a1c:	0b be       	out	0x3b, r0	; 59
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0
     a24:	1f 90       	pop	r1
     a26:	18 95       	reti

00000a28 <setup>:

/***********************************************************************************************************************/
void setup(void) {
  // Setup the timers:i
  // initialize timer1 
  cli();           // disable all interrupts
     a28:	f8 94       	cli
  
//set timer1 interrupt at 1kHz
  TCCR1A = 0;// set entire TCCR1A register to 0
     a2a:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = 0;// same for TCCR1B
     a2e:	e1 e8       	ldi	r30, 0x81	; 129
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	10 82       	st	Z, r1
  TCNT1  = 0;//initialize counter value to 0
     a34:	10 92 85 00 	sts	0x0085, r1
     a38:	10 92 84 00 	sts	0x0084, r1
  // set compare match register for 1000Hz increments
  OCR1A = 1999;// = (16*10^6) /(1000*8) - 1 (must be <65536)
     a3c:	8f ec       	ldi	r24, 0xCF	; 207
     a3e:	97 e0       	ldi	r25, 0x07	; 7
     a40:	90 93 89 00 	sts	0x0089, r25
     a44:	80 93 88 00 	sts	0x0088, r24
  // turn on CTC mode
  TCCR1B |= (1 << WGM12);
     a48:	80 81       	ld	r24, Z
     a4a:	88 60       	ori	r24, 0x08	; 8
     a4c:	80 83       	st	Z, r24
  // Set CS11 bits for 8 prescaler
  TCCR1B |= (1 << CS11);  
     a4e:	80 81       	ld	r24, Z
     a50:	82 60       	ori	r24, 0x02	; 2
     a52:	80 83       	st	Z, r24
  // enable timer compare interrupt
  TIMSK1 |= (1 << OCIE1A);
     a54:	ef e6       	ldi	r30, 0x6F	; 111
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	82 60       	ori	r24, 0x02	; 2
     a5c:	80 83       	st	Z, r24
  
 //set timer3 interrupt at 250Hz
  TCCR3A = 0;// set entire TCCR2A register to 0
     a5e:	10 92 90 00 	sts	0x0090, r1
  TCCR3B = 0;// same for TCCR2B
     a62:	e1 e9       	ldi	r30, 0x91	; 145
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	10 82       	st	Z, r1
  TCNT3  = 0;//initialize counter value to 0
     a68:	10 92 95 00 	sts	0x0095, r1
     a6c:	10 92 94 00 	sts	0x0094, r1
  // set compare match register for 8khz increments
  OCR3A = 249;// = (16*10^6) / (250*256) - 1 (must be <256)
     a70:	89 ef       	ldi	r24, 0xF9	; 249
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	90 93 99 00 	sts	0x0099, r25
     a78:	80 93 98 00 	sts	0x0098, r24
  // turn on CTC mode
  TCCR3B |= (1 << WGM32);
     a7c:	80 81       	ld	r24, Z
     a7e:	88 60       	ori	r24, 0x08	; 8
     a80:	80 83       	st	Z, r24
  // Set CS10 and CS12 bits for 1024 prescaler
  TCCR3B |= (1 << CS32) | (1 << CS30);   
     a82:	80 81       	ld	r24, Z
     a84:	85 60       	ori	r24, 0x05	; 5
     a86:	80 83       	st	Z, r24
  // enable timer compare interrupt
  TIMSK3 |= (1 << OCIE3A); 
     a88:	e1 e7       	ldi	r30, 0x71	; 113
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	80 81       	ld	r24, Z
     a8e:	82 60       	ori	r24, 0x02	; 2
     a90:	80 83       	st	Z, r24
  
  count1=0;
     a92:	10 92 ac 02 	sts	0x02AC, r1
  count2=0;
     a96:	10 92 ad 02 	sts	0x02AD, r1
  
  //enable interrupts
  sei();  
     a9a:	78 94       	sei
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     a9c:	82 ed       	ldi	r24, 0xD2	; 210
     a9e:	98 e0       	ldi	r25, 0x08	; 8
     aa0:	40 e8       	ldi	r20, 0x80	; 128
     aa2:	55 e2       	ldi	r21, 0x25	; 37
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	26 e0       	ldi	r18, 0x06	; 6
     aaa:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <_ZN14HardwareSerial5beginEmh>
  
  Serial.begin(9600);
}
     aae:	08 95       	ret

00000ab0 <_ZN13MinimumSerial5writeEh>:
 *
 * \param[in] b byte to write.
 * \return 1
 */
size_t MinimumSerial::write(uint8_t b) {
  while (((1 << UDRIE0) & UCSR0B) || !(UCSR0A & (1 << UDRE0))) {}
     ab0:	80 91 c1 00 	lds	r24, 0x00C1
     ab4:	85 fd       	sbrc	r24, 5
     ab6:	fc cf       	rjmp	.-8      	; 0xab0 <_ZN13MinimumSerial5writeEh>
     ab8:	80 91 c0 00 	lds	r24, 0x00C0
     abc:	85 ff       	sbrs	r24, 5
     abe:	f8 cf       	rjmp	.-16     	; 0xab0 <_ZN13MinimumSerial5writeEh>
  UDR0 = b;
     ac0:	60 93 c6 00 	sts	0x00C6, r22
  return 1;
}
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	08 95       	ret

00000aca <_GLOBAL__I__ZN13MinimumSerial5beginEm>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     aca:	10 92 b7 06 	sts	0x06B7, r1
     ace:	10 92 b6 06 	sts	0x06B6, r1
#define MinimumSerial_h
/**
 * \class MinimumSerial
 * \brief mini serial class for the %SdFat library.
 */
class MinimumSerial : public Print {
     ad2:	86 e2       	ldi	r24, 0x26	; 38
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	90 93 b5 06 	sts	0x06B5, r25
     ada:	80 93 b4 06 	sts	0x06B4, r24
MinimumSerial MiniSerial;
     ade:	08 95       	ret

00000ae0 <_ZN7ostream7do_fillEj>:
#include <ostream.h>
#ifndef PSTR
#define PSTR(x) x
#endif
//------------------------------------------------------------------------------
void ostream::do_fill(unsigned len) {
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ec 01       	movw	r28, r24
     aea:	8b 01       	movw	r16, r22
     aec:	08 c0       	rjmp	.+16     	; 0xafe <_ZN7ostream7do_fillEj+0x1e>
  for (; len < width(); len++) putch(fill());
     aee:	01 90       	ld	r0, Z+
     af0:	f0 81       	ld	r31, Z
     af2:	e0 2d       	mov	r30, r0
     af4:	ce 01       	movw	r24, r28
     af6:	6c 91       	ld	r22, X
     af8:	19 95       	eicall
     afa:	0f 5f       	subi	r16, 0xFF	; 255
     afc:	1f 4f       	sbci	r17, 0xFF	; 255
     afe:	e8 81       	ld	r30, Y
     b00:	f9 81       	ldd	r31, Y+1	; 0x01
     b02:	36 97       	sbiw	r30, 0x06	; 6
     b04:	a0 81       	ld	r26, Z
     b06:	b1 81       	ldd	r27, Z+1	; 0x01
     b08:	36 96       	adiw	r30, 0x06	; 6
     b0a:	ac 0f       	add	r26, r28
     b0c:	bd 1f       	adc	r27, r29
     b0e:	14 96       	adiw	r26, 0x04	; 4
     b10:	8d 91       	ld	r24, X+
     b12:	9c 91       	ld	r25, X
     b14:	15 97       	sbiw	r26, 0x05	; 5
     b16:	08 17       	cp	r16, r24
     b18:	19 07       	cpc	r17, r25
     b1a:	48 f3       	brcs	.-46     	; 0xaee <_ZN7ostream7do_fillEj+0xe>
   * \param[in] n new width
   * \return old width
   */
  unsigned width(unsigned n) {
    unsigned r = m_width;
    m_width = n;
     b1c:	15 96       	adiw	r26, 0x05	; 5
     b1e:	1c 92       	st	X, r1
     b20:	1e 92       	st	-X, r1
     b22:	14 97       	sbiw	r26, 0x04	; 4
  width(0);
}
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	08 95       	ret

00000b2e <_ZN7ostream13fill_not_leftEj>:
//------------------------------------------------------------------------------
void ostream::fill_not_left(unsigned len) {
     b2e:	dc 01       	movw	r26, r24
  if ((flags() & adjustfield) != left) {
     b30:	ed 91       	ld	r30, X+
     b32:	fc 91       	ld	r31, X
     b34:	11 97       	sbiw	r26, 0x01	; 1
     b36:	36 97       	sbiw	r30, 0x06	; 6
     b38:	01 90       	ld	r0, Z+
     b3a:	f0 81       	ld	r31, Z
     b3c:	e0 2d       	mov	r30, r0
     b3e:	e8 0f       	add	r30, r24
     b40:	f9 1f       	adc	r31, r25
     b42:	81 81       	ldd	r24, Z+1	; 0x01
     b44:	92 81       	ldd	r25, Z+2	; 0x02
     b46:	87 70       	andi	r24, 0x07	; 7
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	19 f0       	breq	.+6      	; 0xb54 <_ZN7ostream13fill_not_leftEj+0x26>
    do_fill(len);
     b4e:	cd 01       	movw	r24, r26
     b50:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN7ostream7do_fillEj>
     b54:	08 95       	ret

00000b56 <_ZN7ostream6fmtNumEmPch>:
  }
}
//------------------------------------------------------------------------------
char* ostream::fmtNum(uint32_t n, char *ptr, uint8_t base) {
     b56:	7f 92       	push	r7
     b58:	8f 92       	push	r8
     b5a:	9f 92       	push	r9
     b5c:	af 92       	push	r10
     b5e:	bf 92       	push	r11
     b60:	cf 92       	push	r12
     b62:	df 92       	push	r13
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	dc 01       	movw	r26, r24
     b72:	94 2e       	mov	r9, r20
     b74:	85 2e       	mov	r8, r21
     b76:	56 2f       	mov	r21, r22
     b78:	47 2f       	mov	r20, r23
     b7a:	e9 01       	movw	r28, r18
  char a = flags() & uppercase ? 'A' - 10 : 'a' - 10;
     b7c:	ed 91       	ld	r30, X+
     b7e:	fc 91       	ld	r31, X
     b80:	11 97       	sbiw	r26, 0x01	; 1
     b82:	36 97       	sbiw	r30, 0x06	; 6
     b84:	01 90       	ld	r0, Z+
     b86:	f0 81       	ld	r31, Z
     b88:	e0 2d       	mov	r30, r0
     b8a:	e8 0f       	add	r30, r24
     b8c:	f9 1f       	adc	r31, r25
     b8e:	81 81       	ldd	r24, Z+1	; 0x01
     b90:	92 81       	ldd	r25, Z+2	; 0x02
     b92:	96 fd       	sbrc	r25, 6
     b94:	03 c0       	rjmp	.+6      	; 0xb9c <_ZN7ostream6fmtNumEmPch+0x46>
     b96:	97 e5       	ldi	r25, 0x57	; 87
     b98:	79 2e       	mov	r7, r25
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <_ZN7ostream6fmtNumEmPch+0x4a>
     b9c:	87 e3       	ldi	r24, 0x37	; 55
     b9e:	78 2e       	mov	r7, r24
  do {
    uint32_t m = n;
    n /= base;
     ba0:	a0 2e       	mov	r10, r16
     ba2:	bb 24       	eor	r11, r11
     ba4:	cc 24       	eor	r12, r12
     ba6:	dd 24       	eor	r13, r13
     ba8:	69 2d       	mov	r22, r9
     baa:	78 2d       	mov	r23, r8
     bac:	85 2f       	mov	r24, r21
     bae:	94 2f       	mov	r25, r20
     bb0:	a6 01       	movw	r20, r12
     bb2:	95 01       	movw	r18, r10
     bb4:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodsi4>
     bb8:	79 01       	movw	r14, r18
     bba:	8a 01       	movw	r16, r20
    char c = m - base * n;
     bbc:	c8 01       	movw	r24, r16
     bbe:	b7 01       	movw	r22, r14
     bc0:	a6 01       	movw	r20, r12
     bc2:	95 01       	movw	r18, r10
     bc4:	0e 94 c3 24 	call	0x4986	; 0x4986 <__mulsi3>
     bc8:	49 2d       	mov	r20, r9
     bca:	46 1b       	sub	r20, r22
    *--ptr = c < 10 ? c + '0' : c + a;
     bcc:	21 97       	sbiw	r28, 0x01	; 1
     bce:	4a 30       	cpi	r20, 0x0A	; 10
     bd0:	14 f4       	brge	.+4      	; 0xbd6 <_ZN7ostream6fmtNumEmPch+0x80>
     bd2:	40 5d       	subi	r20, 0xD0	; 208
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <_ZN7ostream6fmtNumEmPch+0x82>
     bd6:	47 0d       	add	r20, r7
     bd8:	48 83       	st	Y, r20
  }
}
//------------------------------------------------------------------------------
char* ostream::fmtNum(uint32_t n, char *ptr, uint8_t base) {
  char a = flags() & uppercase ? 'A' - 10 : 'a' - 10;
  do {
     bda:	e1 14       	cp	r14, r1
     bdc:	f1 04       	cpc	r15, r1
     bde:	01 05       	cpc	r16, r1
     be0:	11 05       	cpc	r17, r1
     be2:	29 f0       	breq	.+10     	; 0xbee <_ZN7ostream6fmtNumEmPch+0x98>
     be4:	9e 2c       	mov	r9, r14
     be6:	8f 2c       	mov	r8, r15
     be8:	50 2f       	mov	r21, r16
     bea:	41 2f       	mov	r20, r17
     bec:	dd cf       	rjmp	.-70     	; 0xba8 <_ZN7ostream6fmtNumEmPch+0x52>
    n /= base;
    char c = m - base * n;
    *--ptr = c < 10 ? c + '0' : c + a;
  } while (n);
  return ptr;
}
     bee:	ce 01       	movw	r24, r28
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	bf 90       	pop	r11
     c02:	af 90       	pop	r10
     c04:	9f 90       	pop	r9
     c06:	8f 90       	pop	r8
     c08:	7f 90       	pop	r7
     c0a:	08 95       	ret

00000c0c <_ZN7ostream6putNumEmb>:
  bool neg = n < 0 && flagsToBase() == 10;
  if (neg) n = -n;
  putNum(n, neg);
}
//------------------------------------------------------------------------------
void ostream::putNum(uint32_t n, bool neg) {
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	2d 97       	sbiw	r28, 0x0d	; 13
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	7c 01       	movw	r14, r24
     c30:	b2 2e       	mov	r11, r18
  }

 protected:
  /** \return current number base */
  uint8_t flagsToBase() {
    uint8_t f = flags() & basefield;
     c32:	dc 01       	movw	r26, r24
     c34:	ed 91       	ld	r30, X+
     c36:	fc 91       	ld	r31, X
     c38:	36 97       	sbiw	r30, 0x06	; 6
     c3a:	01 90       	ld	r0, Z+
     c3c:	f0 81       	ld	r31, Z
     c3e:	e0 2d       	mov	r30, r0
     c40:	e8 0f       	add	r30, r24
     c42:	f9 1f       	adc	r31, r25
     c44:	81 81       	ldd	r24, Z+1	; 0x01
     c46:	88 73       	andi	r24, 0x38	; 56
    return f == oct ? 8 : f != hex ? 10 : 16;
     c48:	80 32       	cpi	r24, 0x20	; 32
     c4a:	11 f4       	brne	.+4      	; 0xc50 <_ZN7ostream6putNumEmb+0x44>
     c4c:	18 e0       	ldi	r17, 0x08	; 8
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <_ZN7ostream6putNumEmb+0x4e>
     c50:	80 31       	cpi	r24, 0x10	; 16
     c52:	11 f4       	brne	.+4      	; 0xc58 <_ZN7ostream6putNumEmb+0x4c>
     c54:	10 e1       	ldi	r17, 0x10	; 16
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <_ZN7ostream6putNumEmb+0x4e>
     c58:	1a e0       	ldi	r17, 0x0A	; 10
  char buf[13];
  char* end = buf + sizeof(buf) - 1;
  char* num;
  char* str;
  uint8_t base = flagsToBase();
  *end = '\0';
     c5a:	1d 86       	std	Y+13, r1	; 0x0d
  str = num = fmtNum(n, end, base);
     c5c:	c7 01       	movw	r24, r14
     c5e:	9e 01       	movw	r18, r28
     c60:	23 5f       	subi	r18, 0xF3	; 243
     c62:	3f 4f       	sbci	r19, 0xFF	; 255
     c64:	01 2f       	mov	r16, r17
     c66:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7ostream6fmtNumEmPch>
     c6a:	6c 01       	movw	r12, r24
  if (base == 10) {
     c6c:	1a 30       	cpi	r17, 0x0A	; 10
     c6e:	a9 f4       	brne	.+42     	; 0xc9a <_ZN7ostream6putNumEmb+0x8e>
    if (neg) {
     c70:	bb 20       	and	r11, r11
     c72:	19 f0       	breq	.+6      	; 0xc7a <_ZN7ostream6putNumEmb+0x6e>
      *--str = '-';
     c74:	8c 01       	movw	r16, r24
     c76:	8d e2       	ldi	r24, 0x2D	; 45
     c78:	2b c0       	rjmp	.+86     	; 0xcd0 <_ZN7ostream6putNumEmb+0xc4>
    } else if (flags() & showpos) {
     c7a:	d7 01       	movw	r26, r14
     c7c:	ed 91       	ld	r30, X+
     c7e:	fc 91       	ld	r31, X
     c80:	36 97       	sbiw	r30, 0x06	; 6
     c82:	01 90       	ld	r0, Z+
     c84:	f0 81       	ld	r31, Z
     c86:	e0 2d       	mov	r30, r0
     c88:	ee 0d       	add	r30, r14
     c8a:	ff 1d       	adc	r31, r15
     c8c:	81 81       	ldd	r24, Z+1	; 0x01
     c8e:	92 81       	ldd	r25, Z+2	; 0x02
     c90:	93 ff       	sbrs	r25, 3
     c92:	22 c0       	rjmp	.+68     	; 0xcd8 <_ZN7ostream6putNumEmb+0xcc>
      *--str = '+';
     c94:	86 01       	movw	r16, r12
     c96:	8b e2       	ldi	r24, 0x2B	; 43
     c98:	1b c0       	rjmp	.+54     	; 0xcd0 <_ZN7ostream6putNumEmb+0xc4>
    char r = m_fill;
    m_fill = c;
    return r;
  }
  /** \return format flags */
  fmtflags flags() const {return m_fmtflags;}
     c9a:	d7 01       	movw	r26, r14
     c9c:	ed 91       	ld	r30, X+
     c9e:	fc 91       	ld	r31, X
     ca0:	36 97       	sbiw	r30, 0x06	; 6
     ca2:	01 90       	ld	r0, Z+
     ca4:	f0 81       	ld	r31, Z
     ca6:	e0 2d       	mov	r30, r0
     ca8:	ee 0d       	add	r30, r14
     caa:	ff 1d       	adc	r31, r15
     cac:	81 81       	ldd	r24, Z+1	; 0x01
     cae:	92 81       	ldd	r25, Z+2	; 0x02
    }
  } else if (flags() & showbase) {
     cb0:	91 ff       	sbrs	r25, 1
     cb2:	12 c0       	rjmp	.+36     	; 0xcd8 <_ZN7ostream6putNumEmb+0xcc>
    if (flags() & hex) {
     cb4:	84 fd       	sbrc	r24, 4
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <_ZN7ostream6putNumEmb+0xb0>
     cb8:	f6 01       	movw	r30, r12
     cba:	08 c0       	rjmp	.+16     	; 0xccc <_ZN7ostream6putNumEmb+0xc0>
      *--str = flags() & uppercase ? 'X' : 'x';
     cbc:	f6 01       	movw	r30, r12
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	96 fd       	sbrc	r25, 6
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <_ZN7ostream6putNumEmb+0xbc>
     cc4:	88 e7       	ldi	r24, 0x78	; 120
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <_ZN7ostream6putNumEmb+0xbe>
     cc8:	88 e5       	ldi	r24, 0x58	; 88
     cca:	80 83       	st	Z, r24
    }
    *--str = '0';
     ccc:	8f 01       	movw	r16, r30
     cce:	80 e3       	ldi	r24, 0x30	; 48
     cd0:	f8 01       	movw	r30, r16
     cd2:	82 93       	st	-Z, r24
     cd4:	8f 01       	movw	r16, r30
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <_ZN7ostream6putNumEmb+0xce>
     cd8:	86 01       	movw	r16, r12
  }
  uint8_t len = end - str;
     cda:	ce 01       	movw	r24, r28
     cdc:	0d 96       	adiw	r24, 0x0d	; 13
     cde:	b8 2e       	mov	r11, r24
     ce0:	b0 1a       	sub	r11, r16
  fmtflags adj = flags() & adjustfield;
     ce2:	d7 01       	movw	r26, r14
     ce4:	ed 91       	ld	r30, X+
     ce6:	fc 91       	ld	r31, X
     ce8:	36 97       	sbiw	r30, 0x06	; 6
     cea:	01 90       	ld	r0, Z+
     cec:	f0 81       	ld	r31, Z
     cee:	e0 2d       	mov	r30, r0
     cf0:	ee 0d       	add	r30, r14
     cf2:	ff 1d       	adc	r31, r15
     cf4:	81 81       	ldd	r24, Z+1	; 0x01
     cf6:	92 81       	ldd	r25, Z+2	; 0x02
     cf8:	87 70       	andi	r24, 0x07	; 7
     cfa:	90 70       	andi	r25, 0x00	; 0
  if (adj == internal) {
     cfc:	84 30       	cpi	r24, 0x04	; 4
     cfe:	91 05       	cpc	r25, r1
     d00:	81 f4       	brne	.+32     	; 0xd22 <_ZN7ostream6putNumEmb+0x116>
     d02:	0b c0       	rjmp	.+22     	; 0xd1a <_ZN7ostream6putNumEmb+0x10e>
    while (str < num) putch(*str++);
     d04:	f8 01       	movw	r30, r16
     d06:	61 91       	ld	r22, Z+
     d08:	8f 01       	movw	r16, r30
     d0a:	d7 01       	movw	r26, r14
     d0c:	ed 91       	ld	r30, X+
     d0e:	fc 91       	ld	r31, X
     d10:	01 90       	ld	r0, Z+
     d12:	f0 81       	ld	r31, Z
     d14:	e0 2d       	mov	r30, r0
     d16:	c7 01       	movw	r24, r14
     d18:	19 95       	eicall
     d1a:	0c 15       	cp	r16, r12
     d1c:	1d 05       	cpc	r17, r13
     d1e:	90 f3       	brcs	.-28     	; 0xd04 <_ZN7ostream6putNumEmb+0xf8>
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <_ZN7ostream6putNumEmb+0x11a>
  }
  if (adj != left) {
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	29 f0       	breq	.+10     	; 0xd30 <_ZN7ostream6putNumEmb+0x124>
    do_fill(len);
     d26:	c7 01       	movw	r24, r14
     d28:	6b 2d       	mov	r22, r11
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN7ostream7do_fillEj>
  }
  putstr(str);
     d30:	d7 01       	movw	r26, r14
     d32:	ed 91       	ld	r30, X+
     d34:	fc 91       	ld	r31, X
     d36:	02 80       	ldd	r0, Z+2	; 0x02
     d38:	f3 81       	ldd	r31, Z+3	; 0x03
     d3a:	e0 2d       	mov	r30, r0
     d3c:	c7 01       	movw	r24, r14
     d3e:	b8 01       	movw	r22, r16
     d40:	19 95       	eicall
  do_fill(len);
     d42:	c7 01       	movw	r24, r14
     d44:	6b 2d       	mov	r22, r11
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN7ostream7do_fillEj>
}
     d4c:	2d 96       	adiw	r28, 0x0d	; 13
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	ff 90       	pop	r15
     d62:	ef 90       	pop	r14
     d64:	df 90       	pop	r13
     d66:	cf 90       	pop	r12
     d68:	bf 90       	pop	r11
     d6a:	08 95       	ret

00000d6c <_ZN7ostream6putNumEl>:
  }
  // do fill if not done above
  do_fill(len);
}
//------------------------------------------------------------------------------
void ostream::putNum(int32_t n) {
     d6c:	dc 01       	movw	r26, r24
  bool neg = n < 0 && flagsToBase() == 10;
     d6e:	77 ff       	sbrs	r23, 7
     d70:	18 c0       	rjmp	.+48     	; 0xda2 <_ZN7ostream6putNumEl+0x36>
  }

 protected:
  /** \return current number base */
  uint8_t flagsToBase() {
    uint8_t f = flags() & basefield;
     d72:	ed 91       	ld	r30, X+
     d74:	fc 91       	ld	r31, X
     d76:	11 97       	sbiw	r26, 0x01	; 1
     d78:	36 97       	sbiw	r30, 0x06	; 6
     d7a:	01 90       	ld	r0, Z+
     d7c:	f0 81       	ld	r31, Z
     d7e:	e0 2d       	mov	r30, r0
     d80:	e8 0f       	add	r30, r24
     d82:	f9 1f       	adc	r31, r25
     d84:	81 81       	ldd	r24, Z+1	; 0x01
     d86:	88 73       	andi	r24, 0x38	; 56
    return f == oct ? 8 : f != hex ? 10 : 16;
     d88:	80 32       	cpi	r24, 0x20	; 32
     d8a:	59 f0       	breq	.+22     	; 0xda2 <_ZN7ostream6putNumEl+0x36>
     d8c:	80 31       	cpi	r24, 0x10	; 16
     d8e:	49 f0       	breq	.+18     	; 0xda2 <_ZN7ostream6putNumEl+0x36>
  if (neg) n = -n;
     d90:	70 95       	com	r23
     d92:	60 95       	com	r22
     d94:	50 95       	com	r21
     d96:	41 95       	neg	r20
     d98:	5f 4f       	sbci	r21, 0xFF	; 255
     d9a:	6f 4f       	sbci	r22, 0xFF	; 255
     d9c:	7f 4f       	sbci	r23, 0xFF	; 255
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <_ZN7ostream6putNumEl+0x38>
     da2:	20 e0       	ldi	r18, 0x00	; 0
  putNum(n, neg);
     da4:	cd 01       	movw	r24, r26
     da6:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN7ostream6putNumEmb>
}
     daa:	08 95       	ret

00000dac <_ZN7ostream6putPgmEPKc>:
  }
  putstr(str);
  do_fill(len);
}
//------------------------------------------------------------------------------
void ostream::putPgm(const char* str) {
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	8c 01       	movw	r16, r24
     dba:	eb 01       	movw	r28, r22
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <_ZN7ostream6putPgmEPKc+0x1a>
  int n;
  for (n = 0; pgm_read_byte(&str[n]); n++) {}
     dc2:	2f 5f       	subi	r18, 0xFF	; 255
     dc4:	3f 4f       	sbci	r19, 0xFF	; 255
     dc6:	fe 01       	movw	r30, r28
     dc8:	e2 0f       	add	r30, r18
     dca:	f3 1f       	adc	r31, r19
     dcc:	e4 91       	lpm	r30, Z+
     dce:	ee 23       	and	r30, r30
     dd0:	c1 f7       	brne	.-16     	; 0xdc2 <_ZN7ostream6putPgmEPKc+0x16>
  fill_not_left(n);
     dd2:	f2 2e       	mov	r15, r18
     dd4:	e3 2e       	mov	r14, r19
     dd6:	c8 01       	movw	r24, r16
     dd8:	b9 01       	movw	r22, r18
     dda:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN7ostream13fill_not_leftEj>
     dde:	09 c0       	rjmp	.+18     	; 0xdf2 <_ZN7ostream6putPgmEPKc+0x46>
  for (uint8_t c; (c = pgm_read_byte(str)); str++) {
    putch(c);
     de0:	d8 01       	movw	r26, r16
     de2:	ed 91       	ld	r30, X+
     de4:	fc 91       	ld	r31, X
     de6:	01 90       	ld	r0, Z+
     de8:	f0 81       	ld	r31, Z
     dea:	e0 2d       	mov	r30, r0
     dec:	c8 01       	movw	r24, r16
     dee:	19 95       	eicall
//------------------------------------------------------------------------------
void ostream::putPgm(const char* str) {
  int n;
  for (n = 0; pgm_read_byte(&str[n]); n++) {}
  fill_not_left(n);
  for (uint8_t c; (c = pgm_read_byte(str)); str++) {
     df0:	21 96       	adiw	r28, 0x01	; 1
     df2:	fe 01       	movw	r30, r28
     df4:	64 91       	lpm	r22, Z+
     df6:	66 23       	and	r22, r22
     df8:	99 f7       	brne	.-26     	; 0xde0 <_ZN7ostream6putPgmEPKc+0x34>
    putch(c);
  }
  do_fill(n);
     dfa:	c8 01       	movw	r24, r16
     dfc:	6f 2d       	mov	r22, r15
     dfe:	7e 2d       	mov	r23, r14
     e00:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN7ostream7do_fillEj>
}
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	08 95       	ret

00000e12 <_ZN7ostream9putDoubleEd>:
  fill_not_left(1);
  putch(c);
  do_fill(1);
}
//------------------------------------------------------------------------------
void ostream::putDouble(double n) {
     e12:	2f 92       	push	r2
     e14:	3f 92       	push	r3
     e16:	4f 92       	push	r4
     e18:	5f 92       	push	r5
     e1a:	6f 92       	push	r6
     e1c:	7f 92       	push	r7
     e1e:	8f 92       	push	r8
     e20:	9f 92       	push	r9
     e22:	af 92       	push	r10
     e24:	bf 92       	push	r11
     e26:	cf 92       	push	r12
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	61 97       	sbiw	r28, 0x11	; 17
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
     e46:	4c 01       	movw	r8, r24
     e48:	6a 01       	movw	r12, r20
     e4a:	7b 01       	movw	r14, r22
    fmtflags tmp = m_fmtflags;
    m_fmtflags = fl;
    return tmp;
  }
  /** \return precision */
  int precision() const {return m_precision;}
     e4c:	dc 01       	movw	r26, r24
     e4e:	0d 91       	ld	r16, X+
     e50:	1c 91       	ld	r17, X
     e52:	06 50       	subi	r16, 0x06	; 6
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	d8 01       	movw	r26, r16
     e58:	ed 91       	ld	r30, X+
     e5a:	fc 91       	ld	r31, X
     e5c:	e8 0f       	add	r30, r24
     e5e:	f9 1f       	adc	r31, r25
     e60:	23 80       	ldd	r2, Z+3	; 0x03
  char sign;
  char buf[13];  // room for sign, 10 digits, '.', and zero byte
  char *end = buf + sizeof(buf) - 1;
  char *str = end;
  // terminate string
  *end = '\0';
     e62:	1d 86       	std	Y+13, r1	; 0x0d

  // get sign and make nonnegative
  if (n < 0.0) {
     e64:	cb 01       	movw	r24, r22
     e66:	ba 01       	movw	r22, r20
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	0e 94 75 23 	call	0x46ea	; 0x46ea <__cmpsf2>
     e74:	88 23       	and	r24, r24
     e76:	3c f4       	brge	.+14     	; 0xe86 <_ZN7ostream9putDoubleEd+0x74>
    sign = '-';
    n = -n;
     e78:	f7 fa       	bst	r15, 7
     e7a:	f0 94       	com	r15
     e7c:	f7 f8       	bld	r15, 7
     e7e:	f0 94       	com	r15
     e80:	3d e2       	ldi	r19, 0x2D	; 45
     e82:	a3 2e       	mov	r10, r19
     e84:	0d c0       	rjmp	.+26     	; 0xea0 <_ZN7ostream9putDoubleEd+0x8e>
  } else {
    sign = flags() & showpos ? '+' : '\0';
     e86:	d8 01       	movw	r26, r16
     e88:	ed 91       	ld	r30, X+
     e8a:	fc 91       	ld	r31, X
     e8c:	e8 0d       	add	r30, r8
     e8e:	f9 1d       	adc	r31, r9
     e90:	81 81       	ldd	r24, Z+1	; 0x01
     e92:	92 81       	ldd	r25, Z+2	; 0x02
     e94:	93 fd       	sbrc	r25, 3
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <_ZN7ostream9putDoubleEd+0x8a>
     e98:	aa 24       	eor	r10, r10
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <_ZN7ostream9putDoubleEd+0x8e>
     e9c:	2b e2       	ldi	r18, 0x2B	; 43
     e9e:	a2 2e       	mov	r10, r18
  }
  // check for larger than uint32_t
  if (n > 4.0E9) {
     ea0:	c7 01       	movw	r24, r14
     ea2:	b6 01       	movw	r22, r12
     ea4:	28 e2       	ldi	r18, 0x28	; 40
     ea6:	3b e6       	ldi	r19, 0x6B	; 107
     ea8:	4e e6       	ldi	r20, 0x6E	; 110
     eaa:	5f e4       	ldi	r21, 0x4F	; 79
     eac:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <__gesf2>
     eb0:	18 16       	cp	r1, r24
     eb2:	34 f0       	brlt	.+12     	; 0xec0 <_ZN7ostream9putDoubleEd+0xae>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	5f e3       	ldi	r21, 0x3F	; 63
     ebc:	10 e0       	ldi	r17, 0x00	; 0
     ebe:	11 c0       	rjmp	.+34     	; 0xee2 <_ZN7ostream9putDoubleEd+0xd0>
    putPgm(PSTR("BIG FLT"));
     ec0:	c4 01       	movw	r24, r8
     ec2:	60 ea       	ldi	r22, 0xA0	; 160
     ec4:	71 e0       	ldi	r23, 0x01	; 1
     ec6:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN7ostream6putPgmEPKc>
     eca:	af c0       	rjmp	.+350    	; 0x102a <_ZN7ostream9putDoubleEd+0x218>
    return;
  }
  // round up and separate in and fraction parts
  for (uint8_t i = 0; i < nd; ++i) round *= 0.1;
     ecc:	ca 01       	movw	r24, r20
     ece:	b9 01       	movw	r22, r18
     ed0:	2d ec       	ldi	r18, 0xCD	; 205
     ed2:	3c ec       	ldi	r19, 0xCC	; 204
     ed4:	4c ec       	ldi	r20, 0xCC	; 204
     ed6:	5d e3       	ldi	r21, 0x3D	; 61
     ed8:	0e 94 60 24 	call	0x48c0	; 0x48c0 <__mulsf3>
     edc:	9b 01       	movw	r18, r22
     ede:	ac 01       	movw	r20, r24
     ee0:	1f 5f       	subi	r17, 0xFF	; 255
     ee2:	12 15       	cp	r17, r2
     ee4:	98 f3       	brcs	.-26     	; 0xecc <_ZN7ostream9putDoubleEd+0xba>
  n += round;
     ee6:	c7 01       	movw	r24, r14
     ee8:	b6 01       	movw	r22, r12
     eea:	0e 94 11 23 	call	0x4622	; 0x4622 <__addsf3>
     eee:	6e 87       	std	Y+14, r22	; 0x0e
     ef0:	7f 87       	std	Y+15, r23	; 0x0f
     ef2:	88 8b       	std	Y+16, r24	; 0x10
     ef4:	99 8b       	std	Y+17, r25	; 0x11
  uint32_t intPart = n;
     ef6:	0e 94 7e 23 	call	0x46fc	; 0x46fc <__fixunssfsi>
     efa:	2b 01       	movw	r4, r22
     efc:	3c 01       	movw	r6, r24
  double fractionPart = n - intPart;

  // format intPart and decimal point
  if (nd || (flags() & showpoint)) *--str = '.';
     efe:	22 20       	and	r2, r2
     f00:	89 f4       	brne	.+34     	; 0xf24 <_ZN7ostream9putDoubleEd+0x112>
     f02:	d4 01       	movw	r26, r8
     f04:	ed 91       	ld	r30, X+
     f06:	fc 91       	ld	r31, X
     f08:	36 97       	sbiw	r30, 0x06	; 6
     f0a:	01 90       	ld	r0, Z+
     f0c:	f0 81       	ld	r31, Z
     f0e:	e0 2d       	mov	r30, r0
     f10:	e8 0d       	add	r30, r8
     f12:	f9 1d       	adc	r31, r9
     f14:	81 81       	ldd	r24, Z+1	; 0x01
     f16:	92 81       	ldd	r25, Z+2	; 0x02
     f18:	92 fd       	sbrc	r25, 2
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <_ZN7ostream9putDoubleEd+0x112>
     f1c:	9e 01       	movw	r18, r28
     f1e:	23 5f       	subi	r18, 0xF3	; 243
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <_ZN7ostream9putDoubleEd+0x11c>
     f24:	8e e2       	ldi	r24, 0x2E	; 46
     f26:	8c 87       	std	Y+12, r24	; 0x0c
     f28:	9e 01       	movw	r18, r28
     f2a:	24 5f       	subi	r18, 0xF4	; 244
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
  str = fmtNum(intPart, str, 10);
     f2e:	c4 01       	movw	r24, r8
     f30:	b3 01       	movw	r22, r6
     f32:	a2 01       	movw	r20, r4
     f34:	0a e0       	ldi	r16, 0x0A	; 10
     f36:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7ostream6fmtNumEmPch>
     f3a:	6c 01       	movw	r12, r24
     f3c:	1a 2d       	mov	r17, r10
     f3e:	a1 10       	cpse	r10, r1
     f40:	11 e0       	ldi	r17, 0x01	; 1

  // calculate length for fill
  uint8_t len = sign ? 1 : 0;
  len += nd + end - str;
     f42:	ce 01       	movw	r24, r28
     f44:	0d 96       	adiw	r24, 0x0d	; 13
     f46:	82 0d       	add	r24, r2
     f48:	91 1d       	adc	r25, r1
     f4a:	31 2e       	mov	r3, r17
     f4c:	38 0e       	add	r3, r24
     f4e:	3c 18       	sub	r3, r12

  // extract adjust field
  fmtflags adj = flags() & adjustfield;
     f50:	f4 01       	movw	r30, r8
     f52:	a0 81       	ld	r26, Z
     f54:	b1 81       	ldd	r27, Z+1	; 0x01
  if (adj == internal) {
     f56:	16 97       	sbiw	r26, 0x06	; 6
     f58:	ed 91       	ld	r30, X+
     f5a:	fc 91       	ld	r31, X
     f5c:	11 97       	sbiw	r26, 0x01	; 1
     f5e:	16 96       	adiw	r26, 0x06	; 6
     f60:	e8 0d       	add	r30, r8
     f62:	f9 1d       	adc	r31, r9
     f64:	81 81       	ldd	r24, Z+1	; 0x01
     f66:	92 81       	ldd	r25, Z+2	; 0x02
     f68:	87 70       	andi	r24, 0x07	; 7
     f6a:	90 70       	andi	r25, 0x00	; 0
     f6c:	04 97       	sbiw	r24, 0x04	; 4
     f6e:	69 f4       	brne	.+26     	; 0xf8a <_ZN7ostream9putDoubleEd+0x178>
    if (sign) putch(sign);
     f70:	11 23       	and	r17, r17
     f72:	29 f0       	breq	.+10     	; 0xf7e <_ZN7ostream9putDoubleEd+0x16c>
     f74:	ed 91       	ld	r30, X+
     f76:	fc 91       	ld	r31, X
     f78:	c4 01       	movw	r24, r8
     f7a:	6a 2d       	mov	r22, r10
     f7c:	19 95       	eicall
    do_fill(len);
     f7e:	c4 01       	movw	r24, r8
     f80:	63 2d       	mov	r22, r3
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN7ostream7do_fillEj>
     f88:	0a c0       	rjmp	.+20     	; 0xf9e <_ZN7ostream9putDoubleEd+0x18c>
  } else {
    // do fill for internal or right
    fill_not_left(len);
     f8a:	c4 01       	movw	r24, r8
     f8c:	63 2d       	mov	r22, r3
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN7ostream13fill_not_leftEj>
    if (sign) *--str = sign;
     f94:	11 23       	and	r17, r17
     f96:	19 f0       	breq	.+6      	; 0xf9e <_ZN7ostream9putDoubleEd+0x18c>
     f98:	d6 01       	movw	r26, r12
     f9a:	ae 92       	st	-X, r10
     f9c:	6d 01       	movw	r12, r26
  }
  // round up and separate in and fraction parts
  for (uint8_t i = 0; i < nd; ++i) round *= 0.1;
  n += round;
  uint32_t intPart = n;
  double fractionPart = n - intPart;
     f9e:	c3 01       	movw	r24, r6
     fa0:	b2 01       	movw	r22, r4
     fa2:	0e 94 aa 23 	call	0x4754	; 0x4754 <__floatunsisf>
     fa6:	9b 01       	movw	r18, r22
     fa8:	ac 01       	movw	r20, r24
     faa:	6e 85       	ldd	r22, Y+14	; 0x0e
     fac:	7f 85       	ldd	r23, Y+15	; 0x0f
     fae:	88 89       	ldd	r24, Y+16	; 0x10
     fb0:	99 89       	ldd	r25, Y+17	; 0x11
     fb2:	0e 94 10 23 	call	0x4620	; 0x4620 <__subsf3>
     fb6:	7b 01       	movw	r14, r22
     fb8:	8c 01       	movw	r16, r24
  } else {
    // do fill for internal or right
    fill_not_left(len);
    if (sign) *--str = sign;
  }
  putstr(str);
     fba:	d4 01       	movw	r26, r8
     fbc:	ed 91       	ld	r30, X+
     fbe:	fc 91       	ld	r31, X
     fc0:	02 80       	ldd	r0, Z+2	; 0x02
     fc2:	f3 81       	ldd	r31, Z+3	; 0x03
     fc4:	e0 2d       	mov	r30, r0
     fc6:	c4 01       	movw	r24, r8
     fc8:	b6 01       	movw	r22, r12
     fca:	19 95       	eicall
     fcc:	27 c0       	rjmp	.+78     	; 0x101c <_ZN7ostream9putDoubleEd+0x20a>
  // output fraction
  while (nd-- > 0) {
    fractionPart *= 10.0;
     fce:	c8 01       	movw	r24, r16
     fd0:	b7 01       	movw	r22, r14
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e2       	ldi	r20, 0x20	; 32
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	0e 94 60 24 	call	0x48c0	; 0x48c0 <__mulsf3>
     fde:	5b 01       	movw	r10, r22
     fe0:	6c 01       	movw	r12, r24
    int digit = static_cast<int>(fractionPart);
     fe2:	0e 94 79 23 	call	0x46f2	; 0x46f2 <__fixsfsi>
     fe6:	7b 01       	movw	r14, r22
     fe8:	8c 01       	movw	r16, r24
    putch(digit + '0');
     fea:	d4 01       	movw	r26, r8
     fec:	ed 91       	ld	r30, X+
     fee:	fc 91       	ld	r31, X
     ff0:	60 5d       	subi	r22, 0xD0	; 208
     ff2:	01 90       	ld	r0, Z+
     ff4:	f0 81       	ld	r31, Z
     ff6:	e0 2d       	mov	r30, r0
     ff8:	c4 01       	movw	r24, r8
     ffa:	19 95       	eicall
    fractionPart -= digit;
     ffc:	b7 01       	movw	r22, r14
     ffe:	88 27       	eor	r24, r24
    1000:	77 fd       	sbrc	r23, 7
    1002:	80 95       	com	r24
    1004:	98 2f       	mov	r25, r24
    1006:	0e 94 ac 23 	call	0x4758	; 0x4758 <__floatsisf>
    100a:	9b 01       	movw	r18, r22
    100c:	ac 01       	movw	r20, r24
    100e:	c6 01       	movw	r24, r12
    1010:	b5 01       	movw	r22, r10
    1012:	0e 94 10 23 	call	0x4620	; 0x4620 <__subsf3>
    1016:	7b 01       	movw	r14, r22
    1018:	8c 01       	movw	r16, r24
    101a:	2a 94       	dec	r2
    fill_not_left(len);
    if (sign) *--str = sign;
  }
  putstr(str);
  // output fraction
  while (nd-- > 0) {
    101c:	22 20       	and	r2, r2
    101e:	b9 f6       	brne	.-82     	; 0xfce <_ZN7ostream9putDoubleEd+0x1bc>
    int digit = static_cast<int>(fractionPart);
    putch(digit + '0');
    fractionPart -= digit;
  }
  // do fill if not done above
  do_fill(len);
    1020:	c4 01       	movw	r24, r8
    1022:	63 2d       	mov	r22, r3
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN7ostream7do_fillEj>
}
    102a:	61 96       	adiw	r28, 0x11	; 17
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	cf 90       	pop	r12
    1046:	bf 90       	pop	r11
    1048:	af 90       	pop	r10
    104a:	9f 90       	pop	r9
    104c:	8f 90       	pop	r8
    104e:	7f 90       	pop	r7
    1050:	6f 90       	pop	r6
    1052:	5f 90       	pop	r5
    1054:	4f 90       	pop	r4
    1056:	3f 90       	pop	r3
    1058:	2f 90       	pop	r2
    105a:	08 95       	ret

0000105c <_ZN7Sd2Card11waitNotBusyEj>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	8b 01       	movw	r16, r22
  uint16_t t0 = millis();
    1068:	0e 94 8d 1c 	call	0x391a	; 0x391a <millis>
    106c:	eb 01       	movw	r28, r22
// Inline also save a little flash memory.
/** inline avr native functions if nonzero. */
#define USE_AVR_NATIVE_SPI_INLINE 1
#if USE_NATIVE_AVR_SPI && USE_AVR_NATIVE_SPI_INLINE
inline uint8_t SdSpi::receive() {
  SPDR = 0XFF;
    106e:	ff 24       	eor	r15, r15
    1070:	fa 94       	dec	r15
    1072:	09 c0       	rjmp	.+18     	; 0x1086 <_ZN7Sd2Card11waitNotBusyEj+0x2a>
  while (m_spi.receive() != 0XFF) {
    if (((uint16_t)millis() - t0) >= timeoutMillis) goto fail;
    1074:	0e 94 8d 1c 	call	0x391a	; 0x391a <millis>
    1078:	6c 1b       	sub	r22, r28
    107a:	7d 0b       	sbc	r23, r29
    107c:	60 17       	cp	r22, r16
    107e:	71 07       	cpc	r23, r17
    1080:	10 f0       	brcs	.+4      	; 0x1086 <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	08 c0       	rjmp	.+16     	; 0x1096 <_ZN7Sd2Card11waitNotBusyEj+0x3a>
    1086:	fe bc       	out	0x2e, r15	; 46
  while (!(SPSR & (1 << SPIF))) {}
    1088:	0d b4       	in	r0, 0x2d	; 45
    108a:	07 fe       	sbrs	r0, 7
    108c:	fd cf       	rjmp	.-6      	; 0x1088 <_ZN7Sd2Card11waitNotBusyEj+0x2c>
  return SPDR;
    108e:	8e b5       	in	r24, 0x2e	; 46
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  while (m_spi.receive() != 0XFF) {
    1090:	8f 3f       	cpi	r24, 0xFF	; 255
    1092:	81 f7       	brne	.-32     	; 0x1074 <_ZN7Sd2Card11waitNotBusyEj+0x18>
    1094:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;

 fail:
  return false;
}
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	08 95       	ret

000010a2 <_ZN7Sd2Card13chipSelectLowEv>:
#if !USE_SOFTWARE_SPI && defined(SPI_HAS_TRANSACTION)
  SPI.endTransaction();
#endif  // !USE_SOFTWARE_SPI && defined(SPI_HAS_TRANSACTION)
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow() {
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	8c 01       	movw	r16, r24
#if !USE_SOFTWARE_SPI && defined(SPI_HAS_TRANSACTION)
  SPI.beginTransaction(SPISettings());
#endif  // !USE_SOFTWARE_SPI && defined(SPI_HAS_TRANSACTION)
  m_spi.init(m_sckDivisor);
    10a8:	88 eb       	ldi	r24, 0xB8	; 184
    10aa:	96 e0       	ldi	r25, 0x06	; 6
    10ac:	f8 01       	movw	r30, r16
    10ae:	62 81       	ldd	r22, Z+2	; 0x02
    10b0:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <_ZN5SdSpi4initEh>
  digitalWrite(m_chipSelectPin, LOW);
    10b4:	f8 01       	movw	r30, r16
    10b6:	80 81       	ld	r24, Z
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <digitalWrite>
}
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	08 95       	ret

000010c4 <_ZN7Sd2Card11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <_ZN7Sd2Card11cardCommandEhm+0xc>
    10d0:	0f 92       	push	r0
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	8c 01       	movw	r16, r24
    10d8:	f6 2e       	mov	r15, r22
    10da:	29 83       	std	Y+1, r18	; 0x01
    10dc:	3a 83       	std	Y+2, r19	; 0x02
    10de:	4b 83       	std	Y+3, r20	; 0x03
    10e0:	5c 83       	std	Y+4, r21	; 0x04
  // select card
  chipSelectLow();
    10e2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN7Sd2Card13chipSelectLowEv>

  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
    10e6:	c8 01       	movw	r24, r16
    10e8:	68 e5       	ldi	r22, 0x58	; 88
    10ea:	72 e0       	ldi	r23, 0x02	; 2
    10ec:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN7Sd2Card11waitNotBusyEj>

  // send message
  for (uint8_t k = 0; k < 6; k++) m_spi.send(d[k]);
#else  // USE_SD_CRC
  // send command
  m_spi.send(cmd | 0x40);
    10f0:	8f 2d       	mov	r24, r15
    10f2:	80 64       	ori	r24, 0x40	; 64
  while (!(SPSR & (1 << SPIF))) {}
  buf[n] = SPDR;
  return 0;
}
inline void SdSpi::send(uint8_t data) {
  SPDR = data;
    10f4:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF))) {}
    10f6:	0d b4       	in	r0, 0x2d	; 45
    10f8:	07 fe       	sbrs	r0, 7
    10fa:	fd cf       	rjmp	.-6      	; 0x10f6 <_ZN7Sd2Card11cardCommandEhm+0x32>
    10fc:	fe 01       	movw	r30, r28
    10fe:	31 96       	adiw	r30, 0x01	; 1

  // send argument
  for (int8_t i = 3; i >= 0; i--) m_spi.send(pa[i]);
    1100:	9e 01       	movw	r18, r28
    1102:	23 50       	subi	r18, 0x03	; 3
    1104:	30 40       	sbci	r19, 0x00	; 0
    1106:	83 81       	ldd	r24, Z+3	; 0x03
  while (!(SPSR & (1 << SPIF))) {}
  buf[n] = SPDR;
  return 0;
}
inline void SdSpi::send(uint8_t data) {
  SPDR = data;
    1108:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF))) {}
    110a:	0d b4       	in	r0, 0x2d	; 45
    110c:	07 fe       	sbrs	r0, 7
    110e:	fd cf       	rjmp	.-6      	; 0x110a <_ZN7Sd2Card11cardCommandEhm+0x46>
    1110:	31 97       	sbiw	r30, 0x01	; 1
    1112:	e2 17       	cp	r30, r18
    1114:	f3 07       	cpc	r31, r19
    1116:	b9 f7       	brne	.-18     	; 0x1106 <_ZN7Sd2Card11cardCommandEhm+0x42>

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  m_spi.send(cmd == CMD0 ? 0X95 : 0X87);
    1118:	ff 20       	and	r15, r15
    111a:	11 f0       	breq	.+4      	; 0x1120 <_ZN7Sd2Card11cardCommandEhm+0x5c>
    111c:	87 e8       	ldi	r24, 0x87	; 135
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <_ZN7Sd2Card11cardCommandEhm+0x5e>
    1120:	85 e9       	ldi	r24, 0x95	; 149
  while (!(SPSR & (1 << SPIF))) {}
  buf[n] = SPDR;
  return 0;
}
inline void SdSpi::send(uint8_t data) {
  SPDR = data;
    1122:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF))) {}
    1124:	0d b4       	in	r0, 0x2d	; 45
    1126:	07 fe       	sbrs	r0, 7
    1128:	fd cf       	rjmp	.-6      	; 0x1124 <_ZN7Sd2Card11cardCommandEhm+0x60>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) m_spi.receive();
    112a:	8c e0       	ldi	r24, 0x0C	; 12
    112c:	f8 16       	cp	r15, r24
    112e:	31 f4       	brne	.+12     	; 0x113c <_ZN7Sd2Card11cardCommandEhm+0x78>
// Inline also save a little flash memory.
/** inline avr native functions if nonzero. */
#define USE_AVR_NATIVE_SPI_INLINE 1
#if USE_NATIVE_AVR_SPI && USE_AVR_NATIVE_SPI_INLINE
inline uint8_t SdSpi::receive() {
  SPDR = 0XFF;
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF))) {}
    1134:	0d b4       	in	r0, 0x2d	; 45
    1136:	07 fe       	sbrs	r0, 7
    1138:	fd cf       	rjmp	.-6      	; 0x1134 <_ZN7Sd2Card11cardCommandEhm+0x70>
  return SPDR;
    113a:	8e b5       	in	r24, 0x2e	; 46
    113c:	90 e0       	ldi	r25, 0x00	; 0
// Inline also save a little flash memory.
/** inline avr native functions if nonzero. */
#define USE_AVR_NATIVE_SPI_INLINE 1
#if USE_NATIVE_AVR_SPI && USE_AVR_NATIVE_SPI_INLINE
inline uint8_t SdSpi::receive() {
  SPDR = 0XFF;
    113e:	2f ef       	ldi	r18, 0xFF	; 255
    1140:	2e bd       	out	0x2e, r18	; 46
  while (!(SPSR & (1 << SPIF))) {}
    1142:	0d b4       	in	r0, 0x2d	; 45
    1144:	07 fe       	sbrs	r0, 7
    1146:	fd cf       	rjmp	.-6      	; 0x1142 <_ZN7Sd2Card11cardCommandEhm+0x7e>
  return SPDR;
    1148:	8e b5       	in	r24, 0x2e	; 46

  // wait for response
  for (uint8_t i = 0; ((m_status = m_spi.receive()) & 0X80) && i != 0XFF; i++) {
    114a:	87 ff       	sbrs	r24, 7
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <_ZN7Sd2Card11cardCommandEhm+0x8e>
    114e:	91 50       	subi	r25, 0x01	; 1
    1150:	b9 f7       	brne	.-18     	; 0x1140 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    1152:	f8 01       	movw	r30, r16
    1154:	83 83       	std	Z+3, r24	; 0x03
  }
  return m_status;
}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	08 95       	ret

0000116a <_ZN7Sd2Card14chipSelectHighEv>:
  chipSelectHigh();
  chipSelectLow();
#endif  // ENABLE_SPI_YIELD && !USE_SOFTWARE_SPI && defined(SPI_HAS_TRANSACTION)
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectHigh() {
    116a:	fc 01       	movw	r30, r24
  digitalWrite(m_chipSelectPin, HIGH);
    116c:	80 81       	ld	r24, Z
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <digitalWrite>
  while (!(SPSR & (1 << SPIF))) {}
  buf[n] = SPDR;
  return 0;
}
inline void SdSpi::send(uint8_t data) {
  SPDR = data;
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF))) {}
    1178:	0d b4       	in	r0, 0x2d	; 45
    117a:	07 fe       	sbrs	r0, 7
    117c:	fd cf       	rjmp	.-6      	; 0x1178 <_ZN7Sd2Card14chipSelectHighEv+0xe>
  // insure MISO goes high impedance
  m_spi.send(0XFF);
#if !USE_SOFTWARE_SPI && defined(SPI_HAS_TRANSACTION)
  SPI.endTransaction();
#endif  // !USE_SOFTWARE_SPI && defined(SPI_HAS_TRANSACTION)
}
    117e:	08 95       	ret

00001180 <_ZN7Sd2Card9writeStopEv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeStop() {
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	ec 01       	movw	r28, r24
  chipSelectLow();
    1186:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN7Sd2Card13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
    118a:	ce 01       	movw	r24, r28
    118c:	68 e5       	ldi	r22, 0x58	; 88
    118e:	72 e0       	ldi	r23, 0x02	; 2
    1190:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN7Sd2Card11waitNotBusyEj>
    1194:	88 23       	and	r24, r24
    1196:	89 f0       	breq	.+34     	; 0x11ba <_ZN7Sd2Card9writeStopEv+0x3a>
  while (!(SPSR & (1 << SPIF))) {}
  buf[n] = SPDR;
  return 0;
}
inline void SdSpi::send(uint8_t data) {
  SPDR = data;
    1198:	8d ef       	ldi	r24, 0xFD	; 253
    119a:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF))) {}
    119c:	0d b4       	in	r0, 0x2d	; 45
    119e:	07 fe       	sbrs	r0, 7
    11a0:	fd cf       	rjmp	.-6      	; 0x119c <_ZN7Sd2Card9writeStopEv+0x1c>
  m_spi.send(STOP_TRAN_TOKEN);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
    11a2:	ce 01       	movw	r24, r28
    11a4:	68 e5       	ldi	r22, 0x58	; 88
    11a6:	72 e0       	ldi	r23, 0x02	; 2
    11a8:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN7Sd2Card11waitNotBusyEj>
    11ac:	88 23       	and	r24, r24
    11ae:	29 f0       	breq	.+10     	; 0x11ba <_ZN7Sd2Card9writeStopEv+0x3a>
  chipSelectHigh();
    11b0:	ce 01       	movw	r24, r28
    11b2:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <_ZN7Sd2Card9writeStopEv+0x46>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {m_errorCode = code;}
    11ba:	82 e1       	ldi	r24, 0x12	; 18
    11bc:	89 83       	std	Y+1, r24	; 0x01
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
    11be:	ce 01       	movw	r24, r28
    11c0:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <_ZN7Sd2Card10writeStartEmm>:
 * for optimized multiple block writes.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
    11cc:	af 92       	push	r10
    11ce:	bf 92       	push	r11
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	ec 01       	movw	r28, r24
    11e2:	5a 01       	movw	r10, r20
    11e4:	6b 01       	movw	r12, r22
    11e6:	78 01       	movw	r14, r16
    11e8:	89 01       	movw	r16, r18

 private:
  //----------------------------------------------------------------------------
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    11ea:	67 e3       	ldi	r22, 0x37	; 55
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    11f8:	ce 01       	movw	r24, r28
    11fa:	67 e1       	ldi	r22, 0x17	; 23
    11fc:	a8 01       	movw	r20, r16
    11fe:	97 01       	movw	r18, r14
    1200:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
    1204:	88 23       	and	r24, r24
    1206:	11 f0       	breq	.+4      	; 0x120c <_ZN7Sd2Card10writeStartEmm+0x40>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {m_errorCode = code;}
    1208:	89 e0       	ldi	r24, 0x09	; 9
    120a:	13 c0       	rjmp	.+38     	; 0x1232 <_ZN7Sd2Card10writeStartEmm+0x66>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	39 f0       	breq	.+14     	; 0x1220 <_ZN7Sd2Card10writeStartEmm+0x54>
    1212:	89 e0       	ldi	r24, 0x09	; 9
    1214:	aa 0c       	add	r10, r10
    1216:	bb 1c       	adc	r11, r11
    1218:	cc 1c       	adc	r12, r12
    121a:	dd 1c       	adc	r13, r13
    121c:	8a 95       	dec	r24
    121e:	d1 f7       	brne	.-12     	; 0x1214 <_ZN7Sd2Card10writeStartEmm+0x48>
  if (cardCommand(CMD25, blockNumber)) {
    1220:	ce 01       	movw	r24, r28
    1222:	69 e1       	ldi	r22, 0x19	; 25
    1224:	a6 01       	movw	r20, r12
    1226:	95 01       	movw	r18, r10
    1228:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    122c:	88 23       	and	r24, r24
    122e:	39 f0       	breq	.+14     	; 0x123e <_ZN7Sd2Card10writeStartEmm+0x72>
    1230:	87 e0       	ldi	r24, 0x07	; 7
    1232:	89 83       	std	Y+1, r24	; 0x01
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    1234:	ce 01       	movw	r24, r28
    1236:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	04 c0       	rjmp	.+8      	; 0x1246 <_ZN7Sd2Card10writeStartEmm+0x7a>
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  chipSelectHigh();
    123e:	ce 01       	movw	r24, r28
    1240:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    1244:	81 e0       	ldi	r24, 0x01	; 1
  return true;

 fail:
  chipSelectHigh();
  return false;
}
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	df 90       	pop	r13
    1254:	cf 90       	pop	r12
    1256:	bf 90       	pop	r11
    1258:	af 90       	pop	r10
    125a:	08 95       	ret

0000125c <_ZN7Sd2Card9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	ec 01       	movw	r28, r24
    1262:	da 01       	movw	r26, r20
  while (!(SPSR & (1 << SPIF))) {}
  buf[n] = SPDR;
  return 0;
}
inline void SdSpi::send(uint8_t data) {
  SPDR = data;
    1264:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & (1 << SPIF))) {}
    1266:	0d b4       	in	r0, 0x2d	; 45
    1268:	07 fe       	sbrs	r0, 7
    126a:	fd cf       	rjmp	.-6      	; 0x1266 <_ZN7Sd2Card9writeDataEhPKh+0xa>
}
inline void SdSpi::send(const uint8_t* buf , size_t n) {
  if (n == 0) return;
  SPDR = buf[0];
    126c:	8c 91       	ld	r24, X
    126e:	8e bd       	out	0x2e, r24	; 46
  if (n > 1) {
    uint8_t b = buf[1];
    1270:	11 96       	adiw	r26, 0x01	; 1
    1272:	ec 91       	ld	r30, X
    1274:	11 97       	sbiw	r26, 0x01	; 1
    1276:	82 e0       	ldi	r24, 0x02	; 2
    1278:	90 e0       	ldi	r25, 0x00	; 0
    size_t i = 2;
    while (1) {
      while (!(SPSR & (1 << SPIF))) {}
    127a:	0d b4       	in	r0, 0x2d	; 45
    127c:	07 fe       	sbrs	r0, 7
    127e:	fd cf       	rjmp	.-6      	; 0x127a <_ZN7Sd2Card9writeDataEhPKh+0x1e>
      SPDR = b;
    1280:	ee bd       	out	0x2e, r30	; 46
      if (i == n) break;
    1282:	22 e0       	ldi	r18, 0x02	; 2
    1284:	80 30       	cpi	r24, 0x00	; 0
    1286:	92 07       	cpc	r25, r18
    1288:	31 f0       	breq	.+12     	; 0x1296 <_ZN7Sd2Card9writeDataEhPKh+0x3a>
      b = buf[i++];
    128a:	fd 01       	movw	r30, r26
    128c:	e8 0f       	add	r30, r24
    128e:	f9 1f       	adc	r31, r25
    1290:	e0 81       	ld	r30, Z
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	f2 cf       	rjmp	.-28     	; 0x127a <_ZN7Sd2Card9writeDataEhPKh+0x1e>
    }
  }
  while (!(SPSR & (1 << SPIF))) {}
    1296:	0d b4       	in	r0, 0x2d	; 45
    1298:	07 fe       	sbrs	r0, 7
    129a:	fd cf       	rjmp	.-6      	; 0x1296 <_ZN7Sd2Card9writeDataEhPKh+0x3a>
  while (!(SPSR & (1 << SPIF))) {}
  buf[n] = SPDR;
  return 0;
}
inline void SdSpi::send(uint8_t data) {
  SPDR = data;
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF))) {}
    12a0:	0d b4       	in	r0, 0x2d	; 45
    12a2:	07 fe       	sbrs	r0, 7
    12a4:	fd cf       	rjmp	.-6      	; 0x12a0 <_ZN7Sd2Card9writeDataEhPKh+0x44>
  while (!(SPSR & (1 << SPIF))) {}
  buf[n] = SPDR;
  return 0;
}
inline void SdSpi::send(uint8_t data) {
  SPDR = data;
    12a6:	8f ef       	ldi	r24, 0xFF	; 255
    12a8:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF))) {}
    12aa:	0d b4       	in	r0, 0x2d	; 45
    12ac:	07 fe       	sbrs	r0, 7
    12ae:	fd cf       	rjmp	.-6      	; 0x12aa <_ZN7Sd2Card9writeDataEhPKh+0x4e>
// Inline also save a little flash memory.
/** inline avr native functions if nonzero. */
#define USE_AVR_NATIVE_SPI_INLINE 1
#if USE_NATIVE_AVR_SPI && USE_AVR_NATIVE_SPI_INLINE
inline uint8_t SdSpi::receive() {
  SPDR = 0XFF;
    12b0:	8f ef       	ldi	r24, 0xFF	; 255
    12b2:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF))) {}
    12b4:	0d b4       	in	r0, 0x2d	; 45
    12b6:	07 fe       	sbrs	r0, 7
    12b8:	fd cf       	rjmp	.-6      	; 0x12b4 <_ZN7Sd2Card9writeDataEhPKh+0x58>
  return SPDR;
    12ba:	8e b5       	in	r24, 0x2e	; 46
  m_spi.send(token);
  m_spi.send(src, 512);
  m_spi.send(crc >> 8);
  m_spi.send(crc & 0XFF);

  m_status = m_spi.receive();
    12bc:	8b 83       	std	Y+3, r24	; 0x03
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    12be:	8f 71       	andi	r24, 0x1F	; 31
    12c0:	85 30       	cpi	r24, 0x05	; 5
    12c2:	11 f4       	brne	.+4      	; 0x12c8 <_ZN7Sd2Card9writeDataEhPKh+0x6c>
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	06 c0       	rjmp	.+12     	; 0x12d4 <_ZN7Sd2Card9writeDataEhPKh+0x78>
    12c8:	83 e1       	ldi	r24, 0x13	; 19
    12ca:	89 83       	std	Y+1, r24	; 0x01
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    12cc:	ce 01       	movw	r24, r28
    12ce:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    12d2:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	08 95       	ret

000012da <_ZN7Sd2Card9writeDataEPKh>:
/** Write one data block in a multiple block write sequence
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeData(const uint8_t* src) {
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	ec 01       	movw	r28, r24
    12e4:	8b 01       	movw	r16, r22
  chipSelectLow();
    12e6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN7Sd2Card13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
    12ea:	ce 01       	movw	r24, r28
    12ec:	68 e5       	ldi	r22, 0x58	; 88
    12ee:	72 e0       	ldi	r23, 0x02	; 2
    12f0:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN7Sd2Card11waitNotBusyEj>
    12f4:	88 23       	and	r24, r24
    12f6:	61 f0       	breq	.+24     	; 0x1310 <_ZN7Sd2Card9writeDataEPKh+0x36>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) goto fail;
    12f8:	ce 01       	movw	r24, r28
    12fa:	6c ef       	ldi	r22, 0xFC	; 252
    12fc:	a8 01       	movw	r20, r16
    12fe:	0e 94 2e 09 	call	0x125c	; 0x125c <_ZN7Sd2Card9writeDataEhPKh>
    1302:	88 23       	and	r24, r24
    1304:	29 f0       	breq	.+10     	; 0x1310 <_ZN7Sd2Card9writeDataEPKh+0x36>
  chipSelectHigh();
    1306:	ce 01       	movw	r24, r28
    1308:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	06 c0       	rjmp	.+12     	; 0x131c <_ZN7Sd2Card9writeDataEPKh+0x42>
    1310:	85 e1       	ldi	r24, 0x15	; 21
    1312:	89 83       	std	Y+1, r24	; 0x01
  return true;

 fail:
  error(SD_CARD_ERROR_WRITE_MULTIPLE);
  chipSelectHigh();
    1314:	ce 01       	movw	r24, r28
    1316:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    131a:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	08 95       	ret

00001326 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	ec 01       	movw	r28, r24
    1338:	7a 01       	movw	r14, r20
    133a:	8b 01       	movw	r16, r22
    133c:	69 01       	movw	r12, r18
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	39 f0       	breq	.+14     	; 0x1352 <_ZN7Sd2Card10writeBlockEmPKh+0x2c>
    1344:	99 e0       	ldi	r25, 0x09	; 9
    1346:	ee 0c       	add	r14, r14
    1348:	ff 1c       	adc	r15, r15
    134a:	00 1f       	adc	r16, r16
    134c:	11 1f       	adc	r17, r17
    134e:	9a 95       	dec	r25
    1350:	d1 f7       	brne	.-12     	; 0x1346 <_ZN7Sd2Card10writeBlockEmPKh+0x20>
  if (cardCommand(CMD24, blockNumber)) {
    1352:	ce 01       	movw	r24, r28
    1354:	68 e1       	ldi	r22, 0x18	; 24
    1356:	a8 01       	movw	r20, r16
    1358:	97 01       	movw	r18, r14
    135a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    135e:	88 23       	and	r24, r24
    1360:	19 f0       	breq	.+6      	; 0x1368 <_ZN7Sd2Card10writeBlockEmPKh+0x42>
    1362:	86 e0       	ldi	r24, 0x06	; 6
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	0c c0       	rjmp	.+24     	; 0x1380 <_ZN7Sd2Card10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    1368:	ce 01       	movw	r24, r28
    136a:	6e ef       	ldi	r22, 0xFE	; 254
    136c:	a6 01       	movw	r20, r12
    136e:	0e 94 2e 09 	call	0x125c	; 0x125c <_ZN7Sd2Card9writeDataEhPKh>
    1372:	88 23       	and	r24, r24
    1374:	29 f0       	breq	.+10     	; 0x1380 <_ZN7Sd2Card10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
    1376:	ce 01       	movw	r24, r28
    1378:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	04 c0       	rjmp	.+8      	; 0x1388 <_ZN7Sd2Card10writeBlockEmPKh+0x62>
  return true;

 fail:
  chipSelectHigh();
    1380:	ce 01       	movw	r24, r28
    1382:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    1386:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	08 95       	ret

0000139a <_ZN7Sd2Card8readStopEv>:
/** End a read multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::readStop() {
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	ec 01       	movw	r28, r24
  if (cardCommand(CMD12, 0)) {
    13a0:	6c e0       	ldi	r22, 0x0C	; 12
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    13ae:	88 23       	and	r24, r24
    13b0:	39 f0       	breq	.+14     	; 0x13c0 <_ZN7Sd2Card8readStopEv+0x26>
    13b2:	83 e0       	ldi	r24, 0x03	; 3
    13b4:	89 83       	std	Y+1, r24	; 0x01
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    13b6:	ce 01       	movw	r24, r28
    13b8:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <_ZN7Sd2Card8readStopEv+0x2e>
bool Sd2Card::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
    13c0:	ce 01       	movw	r24, r28
    13c2:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    13c6:	81 e0       	ldi	r24, 0x01	; 1
  return true;

 fail:
  chipSelectHigh();
  return false;
}
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <_ZN7Sd2Card9readStartEm>:
 * multiple block reads.  SPI chipSelect must be low for the entire sequence.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::readStart(uint32_t blockNumber) {
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	ec 01       	movw	r28, r24
    13d4:	9a 01       	movw	r18, r20
    13d6:	ab 01       	movw	r20, r22
  SD_TRACE("RS", blockNumber);
  if (type()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	39 f0       	breq	.+14     	; 0x13ec <_ZN7Sd2Card9readStartEm+0x1e>
    13de:	69 e0       	ldi	r22, 0x09	; 9
    13e0:	22 0f       	add	r18, r18
    13e2:	33 1f       	adc	r19, r19
    13e4:	44 1f       	adc	r20, r20
    13e6:	55 1f       	adc	r21, r21
    13e8:	6a 95       	dec	r22
    13ea:	d1 f7       	brne	.-12     	; 0x13e0 <_ZN7Sd2Card9readStartEm+0x12>
  if (cardCommand(CMD18, blockNumber)) {
    13ec:	ce 01       	movw	r24, r28
    13ee:	62 e1       	ldi	r22, 0x12	; 18
    13f0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    13f4:	88 23       	and	r24, r24
    13f6:	39 f0       	breq	.+14     	; 0x1406 <_ZN7Sd2Card9readStartEm+0x38>
    13f8:	85 e0       	ldi	r24, 0x05	; 5
    13fa:	89 83       	std	Y+1, r24	; 0x01
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    13fc:	ce 01       	movw	r24, r28
    13fe:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	04 c0       	rjmp	.+8      	; 0x140e <_ZN7Sd2Card9readStartEm+0x40>
  if (type()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  chipSelectHigh();
    1406:	ce 01       	movw	r24, r28
    1408:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    140c:	81 e0       	ldi	r24, 0x01	; 1
  return true;

 fail:
  chipSelectHigh();
  return false;
}
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	08 95       	ret

00001414 <_ZN7Sd2Card8readDataEPhj>:
bool Sd2Card::readData(uint8_t *dst) {
  chipSelectLow();
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool Sd2Card::readData(uint8_t* dst, size_t count) {
    1414:	bf 92       	push	r11
    1416:	cf 92       	push	r12
    1418:	df 92       	push	r13
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ec 01       	movw	r28, r24
    1428:	6b 01       	movw	r12, r22
    142a:	7a 01       	movw	r14, r20
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  uint16_t t0 = millis();
    142c:	0e 94 8d 1c 	call	0x391a	; 0x391a <millis>
    1430:	8b 01       	movw	r16, r22
// Inline also save a little flash memory.
/** inline avr native functions if nonzero. */
#define USE_AVR_NATIVE_SPI_INLINE 1
#if USE_NATIVE_AVR_SPI && USE_AVR_NATIVE_SPI_INLINE
inline uint8_t SdSpi::receive() {
  SPDR = 0XFF;
    1432:	bb 24       	eor	r11, r11
    1434:	ba 94       	dec	r11
    1436:	09 c0       	rjmp	.+18     	; 0x144a <_ZN7Sd2Card8readDataEPhj+0x36>
  while ((m_status = m_spi.receive()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    1438:	0e 94 8d 1c 	call	0x391a	; 0x391a <millis>
    143c:	60 1b       	sub	r22, r16
    143e:	71 0b       	sbc	r23, r17
    1440:	6d 52       	subi	r22, 0x2D	; 45
    1442:	71 40       	sbci	r23, 0x01	; 1
    1444:	10 f0       	brcs	.+4      	; 0x144a <_ZN7Sd2Card8readDataEPhj+0x36>
    1446:	81 e1       	ldi	r24, 0x11	; 17
    1448:	0b c0       	rjmp	.+22     	; 0x1460 <_ZN7Sd2Card8readDataEPhj+0x4c>
    144a:	be bc       	out	0x2e, r11	; 46
  while (!(SPSR & (1 << SPIF))) {}
    144c:	0d b4       	in	r0, 0x2d	; 45
    144e:	07 fe       	sbrs	r0, 7
    1450:	fd cf       	rjmp	.-6      	; 0x144c <_ZN7Sd2Card8readDataEPhj+0x38>
  return SPDR;
    1452:	8e b5       	in	r24, 0x2e	; 46
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  uint16_t t0 = millis();
  while ((m_status = m_spi.receive()) == 0XFF) {
    1454:	8b 83       	std	Y+3, r24	; 0x03
    1456:	8f 3f       	cpi	r24, 0xFF	; 255
    1458:	79 f3       	breq	.-34     	; 0x1438 <_ZN7Sd2Card8readDataEPhj+0x24>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
    spiYield();
  }
  if (m_status != DATA_START_BLOCK) {
    145a:	8e 3f       	cpi	r24, 0xFE	; 254
    145c:	39 f0       	breq	.+14     	; 0x146c <_ZN7Sd2Card8readDataEPhj+0x58>
    145e:	8f e0       	ldi	r24, 0x0F	; 15
    1460:	89 83       	std	Y+1, r24	; 0x01
#endif  // USE_SD_CRC
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    1462:	ce 01       	movw	r24, r28
    1464:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	30 c0       	rjmp	.+96     	; 0x14cc <_ZN7Sd2Card8readDataEPhj+0xb8>
}
inline uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  if (n-- == 0) return 0;
    146c:	d7 01       	movw	r26, r14
    146e:	11 97       	sbiw	r26, 0x01	; 1
    1470:	ef 28       	or	r14, r15
    1472:	d9 f0       	breq	.+54     	; 0x14aa <_ZN7Sd2Card8readDataEPhj+0x96>
  SPDR = 0XFF;
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	8e bd       	out	0x2e, r24	; 46
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
  for (size_t i = 0; i < n; i++) {
    while (!(SPSR & (1 << SPIF))) {}
    uint8_t b = SPDR;
    SPDR = 0XFF;
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	0b c0       	rjmp	.+22     	; 0x1496 <_ZN7Sd2Card8readDataEPhj+0x82>
}
inline uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  if (n-- == 0) return 0;
  SPDR = 0XFF;
  for (size_t i = 0; i < n; i++) {
    while (!(SPSR & (1 << SPIF))) {}
    1480:	0d b4       	in	r0, 0x2d	; 45
    1482:	07 fe       	sbrs	r0, 7
    1484:	fd cf       	rjmp	.-6      	; 0x1480 <_ZN7Sd2Card8readDataEPhj+0x6c>
    uint8_t b = SPDR;
    1486:	8e b5       	in	r24, 0x2e	; 46
    SPDR = 0XFF;
    1488:	9e bd       	out	0x2e, r25	; 46
    buf[i] = b;
    148a:	f6 01       	movw	r30, r12
    148c:	e2 0f       	add	r30, r18
    148e:	f3 1f       	adc	r31, r19
    1490:	80 83       	st	Z, r24
  return SPDR;
}
inline uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  if (n-- == 0) return 0;
  SPDR = 0XFF;
  for (size_t i = 0; i < n; i++) {
    1492:	2f 5f       	subi	r18, 0xFF	; 255
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	2a 17       	cp	r18, r26
    1498:	3b 07       	cpc	r19, r27
    149a:	90 f3       	brcs	.-28     	; 0x1480 <_ZN7Sd2Card8readDataEPhj+0x6c>
    while (!(SPSR & (1 << SPIF))) {}
    uint8_t b = SPDR;
    SPDR = 0XFF;
    buf[i] = b;
  }
  while (!(SPSR & (1 << SPIF))) {}
    149c:	0d b4       	in	r0, 0x2d	; 45
    149e:	07 fe       	sbrs	r0, 7
    14a0:	fd cf       	rjmp	.-6      	; 0x149c <_ZN7Sd2Card8readDataEPhj+0x88>
  buf[n] = SPDR;
    14a2:	8e b5       	in	r24, 0x2e	; 46
    14a4:	ac 0d       	add	r26, r12
    14a6:	bd 1d       	adc	r27, r13
    14a8:	8c 93       	st	X, r24
  if (m_status != DATA_START_BLOCK) {
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = m_spi.receive(dst, count))) {
    14aa:	1b 82       	std	Y+3, r1	; 0x03
// Inline also save a little flash memory.
/** inline avr native functions if nonzero. */
#define USE_AVR_NATIVE_SPI_INLINE 1
#if USE_NATIVE_AVR_SPI && USE_AVR_NATIVE_SPI_INLINE
inline uint8_t SdSpi::receive() {
  SPDR = 0XFF;
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF))) {}
    14b0:	0d b4       	in	r0, 0x2d	; 45
    14b2:	07 fe       	sbrs	r0, 7
    14b4:	fd cf       	rjmp	.-6      	; 0x14b0 <_ZN7Sd2Card8readDataEPhj+0x9c>
  return SPDR;
    14b6:	8e b5       	in	r24, 0x2e	; 46
// Inline also save a little flash memory.
/** inline avr native functions if nonzero. */
#define USE_AVR_NATIVE_SPI_INLINE 1
#if USE_NATIVE_AVR_SPI && USE_AVR_NATIVE_SPI_INLINE
inline uint8_t SdSpi::receive() {
  SPDR = 0XFF;
    14b8:	8f ef       	ldi	r24, 0xFF	; 255
    14ba:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF))) {}
    14bc:	0d b4       	in	r0, 0x2d	; 45
    14be:	07 fe       	sbrs	r0, 7
    14c0:	fd cf       	rjmp	.-6      	; 0x14bc <_ZN7Sd2Card8readDataEPhj+0xa8>
  return SPDR;
    14c2:	8e b5       	in	r24, 0x2e	; 46
#else
  // discard crc
  m_spi.receive();
  m_spi.receive();
#endif  // USE_SD_CRC
  chipSelectHigh();
    14c4:	ce 01       	movw	r24, r28
    14c6:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    14ca:	81 e0       	ldi	r24, 0x01	; 1
  return true;

 fail:
  chipSelectHigh();
  return false;
}
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	cf 90       	pop	r12
    14dc:	bf 90       	pop	r11
    14de:	08 95       	ret

000014e0 <_ZN7Sd2Card8readDataEPh>:
 * \param[in] dst Pointer to the location for the data to be read.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::readData(uint8_t *dst) {
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	8c 01       	movw	r16, r24
    14ea:	7b 01       	movw	r14, r22
  chipSelectLow();
    14ec:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN7Sd2Card13chipSelectLowEv>
  return readData(dst, 512);
    14f0:	c8 01       	movw	r24, r16
    14f2:	b7 01       	movw	r22, r14
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	52 e0       	ldi	r21, 0x02	; 2
    14f8:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN7Sd2Card8readDataEPhj>
}
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	ff 90       	pop	r15
    1502:	ef 90       	pop	r14
    1504:	08 95       	ret

00001506 <_ZN7Sd2Card12readRegisterEhPv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool Sd2Card::readRegister(uint8_t cmd, void* buf) {
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	ec 01       	movw	r28, r24
    1510:	8a 01       	movw	r16, r20
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    151e:	88 23       	and	r24, r24
    1520:	39 f0       	breq	.+14     	; 0x1530 <_ZN7Sd2Card12readRegisterEhPv+0x2a>
    1522:	80 e1       	ldi	r24, 0x10	; 16
    1524:	89 83       	std	Y+1, r24	; 0x01
    goto fail;
  }
  return readData(dst, 16);

 fail:
  chipSelectHigh();
    1526:	ce 01       	movw	r24, r28
    1528:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	06 c0       	rjmp	.+12     	; 0x153c <_ZN7Sd2Card12readRegisterEhPv+0x36>
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  return readData(dst, 16);
    1530:	ce 01       	movw	r24, r28
    1532:	b8 01       	movw	r22, r16
    1534:	40 e1       	ldi	r20, 0x10	; 16
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN7Sd2Card8readDataEPhj>

 fail:
  chipSelectHigh();
  return false;
}
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	08 95       	ret

00001546 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::readBlock(uint32_t blockNumber, uint8_t* dst) {
    1546:	cf 92       	push	r12
    1548:	df 92       	push	r13
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	ec 01       	movw	r28, r24
    1558:	7a 01       	movw	r14, r20
    155a:	8b 01       	movw	r16, r22
    155c:	69 01       	movw	r12, r18
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	83 30       	cpi	r24, 0x03	; 3
    1562:	39 f0       	breq	.+14     	; 0x1572 <_ZN7Sd2Card9readBlockEmPh+0x2c>
    1564:	b9 e0       	ldi	r27, 0x09	; 9
    1566:	ee 0c       	add	r14, r14
    1568:	ff 1c       	adc	r15, r15
    156a:	00 1f       	adc	r16, r16
    156c:	11 1f       	adc	r17, r17
    156e:	ba 95       	dec	r27
    1570:	d1 f7       	brne	.-12     	; 0x1566 <_ZN7Sd2Card9readBlockEmPh+0x20>
  if (cardCommand(CMD17, blockNumber)) {
    1572:	ce 01       	movw	r24, r28
    1574:	61 e1       	ldi	r22, 0x11	; 17
    1576:	a8 01       	movw	r20, r16
    1578:	97 01       	movw	r18, r14
    157a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    157e:	88 23       	and	r24, r24
    1580:	39 f0       	breq	.+14     	; 0x1590 <_ZN7Sd2Card9readBlockEmPh+0x4a>
    1582:	84 e0       	ldi	r24, 0x04	; 4
    1584:	89 83       	std	Y+1, r24	; 0x01
    goto fail;
  }
  return readData(dst, 512);

 fail:
  chipSelectHigh();
    1586:	ce 01       	movw	r24, r28
    1588:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	06 c0       	rjmp	.+12     	; 0x159c <_ZN7Sd2Card9readBlockEmPh+0x56>
  if (type()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (cardCommand(CMD17, blockNumber)) {
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  return readData(dst, 512);
    1590:	ce 01       	movw	r24, r28
    1592:	b6 01       	movw	r22, r12
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	52 e0       	ldi	r21, 0x02	; 2
    1598:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN7Sd2Card8readDataEPhj>

 fail:
  chipSelectHigh();
  return false;
}
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	df 90       	pop	r13
    15aa:	cf 90       	pop	r12
    15ac:	08 95       	ret

000015ae <_ZN7Sd2Card5eraseEmm>:
 * single block erase.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::erase(uint32_t firstBlock, uint32_t lastBlock) {
    15ae:	6f 92       	push	r6
    15b0:	7f 92       	push	r7
    15b2:	8f 92       	push	r8
    15b4:	9f 92       	push	r9
    15b6:	af 92       	push	r10
    15b8:	bf 92       	push	r11
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	60 97       	sbiw	r28, 0x10	; 16
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	5c 01       	movw	r10, r24
    15dc:	6a 01       	movw	r12, r20
    15de:	7b 01       	movw	r14, r22
    15e0:	38 01       	movw	r6, r16
    15e2:	49 01       	movw	r8, r18
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    15e4:	69 e0       	ldi	r22, 0x09	; 9
    15e6:	ae 01       	movw	r20, r28
    15e8:	4f 5f       	subi	r20, 0xFF	; 255
    15ea:	5f 4f       	sbci	r21, 0xFF	; 255
    15ec:	0e 94 83 0a 	call	0x1506	; 0x1506 <_ZN7Sd2Card12readRegisterEhPv>
  csd_t csd;
  if (!readCSD(&csd)) goto fail;
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <_ZN7Sd2Card5eraseEmm+0x48>
    15f4:	58 c0       	rjmp	.+176    	; 0x16a6 <_ZN7Sd2Card5eraseEmm+0xf8>
  // check for single block erase
  if (!csd.v1.erase_blk_en) {
    15f6:	3b 85       	ldd	r19, Y+11	; 0x0b
    15f8:	36 fd       	sbrc	r19, 6
    15fa:	1e c0       	rjmp	.+60     	; 0x1638 <_ZN7Sd2Card5eraseEmm+0x8a>
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstBlock & m) != 0 || ((lastBlock + 1) & m) != 0) {
    15fc:	d4 01       	movw	r26, r8
    15fe:	c3 01       	movw	r24, r6
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	a1 1d       	adc	r26, r1
    1604:	b1 1d       	adc	r27, r1
    1606:	8c 29       	or	r24, r12
    1608:	9d 29       	or	r25, r13
    160a:	ae 29       	or	r26, r14
    160c:	bf 29       	or	r27, r15
    160e:	3f 73       	andi	r19, 0x3F	; 63
    1610:	33 0f       	add	r19, r19
    1612:	2c 85       	ldd	r18, Y+12	; 0x0c
    1614:	22 1f       	adc	r18, r18
    1616:	22 27       	eor	r18, r18
    1618:	22 1f       	adc	r18, r18
    161a:	32 2b       	or	r19, r18
    161c:	23 2f       	mov	r18, r19
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	82 23       	and	r24, r18
    1626:	93 23       	and	r25, r19
    1628:	a4 23       	and	r26, r20
    162a:	b5 23       	and	r27, r21
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	a1 05       	cpc	r26, r1
    1630:	b1 05       	cpc	r27, r1
    1632:	11 f0       	breq	.+4      	; 0x1638 <_ZN7Sd2Card5eraseEmm+0x8a>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {m_errorCode = code;}
    1634:	8d e0       	ldi	r24, 0x0D	; 13
    1636:	2f c0       	rjmp	.+94     	; 0x1696 <_ZN7Sd2Card5eraseEmm+0xe8>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_BLOCK);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    1638:	f5 01       	movw	r30, r10
    163a:	84 81       	ldd	r24, Z+4	; 0x04
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	71 f0       	breq	.+28     	; 0x165c <_ZN7Sd2Card5eraseEmm+0xae>
    firstBlock <<= 9;
    1640:	09 e0       	ldi	r16, 0x09	; 9
    1642:	cc 0c       	add	r12, r12
    1644:	dd 1c       	adc	r13, r13
    1646:	ee 1c       	adc	r14, r14
    1648:	ff 1c       	adc	r15, r15
    164a:	0a 95       	dec	r16
    164c:	d1 f7       	brne	.-12     	; 0x1642 <_ZN7Sd2Card5eraseEmm+0x94>
    lastBlock <<= 9;
    164e:	19 e0       	ldi	r17, 0x09	; 9
    1650:	66 0c       	add	r6, r6
    1652:	77 1c       	adc	r7, r7
    1654:	88 1c       	adc	r8, r8
    1656:	99 1c       	adc	r9, r9
    1658:	1a 95       	dec	r17
    165a:	d1 f7       	brne	.-12     	; 0x1650 <_ZN7Sd2Card5eraseEmm+0xa2>
  }
  if (cardCommand(CMD32, firstBlock)
    165c:	c5 01       	movw	r24, r10
    165e:	60 e2       	ldi	r22, 0x20	; 32
    1660:	a7 01       	movw	r20, r14
    1662:	96 01       	movw	r18, r12
    1664:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    1668:	88 23       	and	r24, r24
    166a:	91 f4       	brne	.+36     	; 0x1690 <_ZN7Sd2Card5eraseEmm+0xe2>
    166c:	c5 01       	movw	r24, r10
    166e:	61 e2       	ldi	r22, 0x21	; 33
    1670:	a4 01       	movw	r20, r8
    1672:	93 01       	movw	r18, r6
    1674:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    1678:	88 23       	and	r24, r24
    167a:	51 f4       	brne	.+20     	; 0x1690 <_ZN7Sd2Card5eraseEmm+0xe2>
    167c:	c5 01       	movw	r24, r10
    167e:	66 e2       	ldi	r22, 0x26	; 38
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e0       	ldi	r20, 0x00	; 0
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    168c:	88 23       	and	r24, r24
    168e:	21 f1       	breq	.+72     	; 0x16d8 <_ZN7Sd2Card5eraseEmm+0x12a>
    1690:	8c e0       	ldi	r24, 0x0C	; 12
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <_ZN7Sd2Card5eraseEmm+0xe8>
    || cardCommand(CMD33, lastBlock)
    || cardCommand(CMD38, 0)) {
      error(SD_CARD_ERROR_ERASE);
      goto fail;
    1694:	8e e0       	ldi	r24, 0x0E	; 14
    1696:	f5 01       	movw	r30, r10
    1698:	81 83       	std	Z+1, r24	; 0x01
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <_ZN7Sd2Card5eraseEmm+0xf8>
  }
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  chipSelectHigh();
    169c:	c5 01       	movw	r24, r10
    169e:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <_ZN7Sd2Card5eraseEmm+0x100>
  return true;

 fail:
  chipSelectHigh();
    16a6:	c5 01       	movw	r24, r10
    16a8:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    16ae:	60 96       	adiw	r28, 0x10	; 16
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	ff 90       	pop	r15
    16c4:	ef 90       	pop	r14
    16c6:	df 90       	pop	r13
    16c8:	cf 90       	pop	r12
    16ca:	bf 90       	pop	r11
    16cc:	af 90       	pop	r10
    16ce:	9f 90       	pop	r9
    16d0:	8f 90       	pop	r8
    16d2:	7f 90       	pop	r7
    16d4:	6f 90       	pop	r6
    16d6:	08 95       	ret
    || cardCommand(CMD33, lastBlock)
    || cardCommand(CMD38, 0)) {
      error(SD_CARD_ERROR_ERASE);
      goto fail;
  }
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    16d8:	c5 01       	movw	r24, r10
    16da:	60 e1       	ldi	r22, 0x10	; 16
    16dc:	77 e2       	ldi	r23, 0x27	; 39
    16de:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN7Sd2Card11waitNotBusyEj>
    16e2:	88 23       	and	r24, r24
    16e4:	b9 f2       	breq	.-82     	; 0x1694 <_ZN7Sd2Card5eraseEmm+0xe6>
    16e6:	da cf       	rjmp	.-76     	; 0x169c <_ZN7Sd2Card5eraseEmm+0xee>

000016e8 <_ZN7Sd2Card5beginEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
bool Sd2Card::begin(uint8_t chipSelectPin, uint8_t sckDivisor) {
    16e8:	bf 92       	push	r11
    16ea:	cf 92       	push	r12
    16ec:	df 92       	push	r13
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	ec 01       	movw	r28, r24
    16fc:	b4 2e       	mov	r11, r20
  m_errorCode = m_type = 0;
    16fe:	1c 82       	std	Y+4, r1	; 0x04
    1700:	19 82       	std	Y+1, r1	; 0x01
  m_chipSelectPin = chipSelectPin;
    1702:	68 83       	st	Y, r22
  // 16-bit init start time allows over a minute
  uint16_t t0 = (uint16_t)millis();
    1704:	0e 94 8d 1c 	call	0x391a	; 0x391a <millis>
    1708:	6b 01       	movw	r12, r22
  uint32_t arg;

  pinMode(m_chipSelectPin, OUTPUT);
    170a:	88 81       	ld	r24, Y
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <pinMode>
  digitalWrite(m_chipSelectPin, HIGH);
    1712:	88 81       	ld	r24, Y
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <digitalWrite>
  m_spi.begin();
    171a:	88 eb       	ldi	r24, 0xB8	; 184
    171c:	96 e0       	ldi	r25, 0x06	; 6
    171e:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <_ZN5SdSpi5beginEv>

  // set SCK rate for initialization commands
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
    1722:	80 e4       	ldi	r24, 0x40	; 64
    1724:	8a 83       	std	Y+2, r24	; 0x02
  m_spi.init(m_sckDivisor);
    1726:	88 eb       	ldi	r24, 0xB8	; 184
    1728:	96 e0       	ldi	r25, 0x06	; 6
    172a:	60 e4       	ldi	r22, 0x40	; 64
    172c:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <_ZN5SdSpi4initEh>
    1730:	80 e0       	ldi	r24, 0x00	; 0
  while (!(SPSR & (1 << SPIF))) {}
  buf[n] = SPDR;
  return 0;
}
inline void SdSpi::send(uint8_t data) {
  SPDR = data;
    1732:	9f ef       	ldi	r25, 0xFF	; 255
    1734:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & (1 << SPIF))) {}
    1736:	0d b4       	in	r0, 0x2d	; 45
    1738:	07 fe       	sbrs	r0, 7
    173a:	fd cf       	rjmp	.-6      	; 0x1736 <_ZN7Sd2Card5beginEhh+0x4e>

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) m_spi.send(0XFF);
    173c:	8f 5f       	subi	r24, 0xFF	; 255
    173e:	8a 30       	cpi	r24, 0x0A	; 10
    1740:	c9 f7       	brne	.-14     	; 0x1734 <_ZN7Sd2Card5beginEhh+0x4c>
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <_ZN7Sd2Card5beginEhh+0x6e>

  // command to go idle in SPI mode
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
    1744:	0e 94 8d 1c 	call	0x391a	; 0x391a <millis>
    1748:	6c 19       	sub	r22, r12
    174a:	7d 09       	sbc	r23, r13
    174c:	61 5d       	subi	r22, 0xD1	; 209
    174e:	77 40       	sbci	r23, 0x07	; 7
    1750:	10 f0       	brcs	.+4      	; 0x1756 <_ZN7Sd2Card5beginEhh+0x6e>
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	63 c0       	rjmp	.+198    	; 0x181c <_ZN7Sd2Card5beginEhh+0x134>

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) m_spi.send(0XFF);

  // command to go idle in SPI mode
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
    1756:	ce 01       	movw	r24, r28
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	69 f7       	brne	.-38     	; 0x1744 <_ZN7Sd2Card5beginEhh+0x5c>
// Inline also save a little flash memory.
/** inline avr native functions if nonzero. */
#define USE_AVR_NATIVE_SPI_INLINE 1
#if USE_NATIVE_AVR_SPI && USE_AVR_NATIVE_SPI_INLINE
inline uint8_t SdSpi::receive() {
  SPDR = 0XFF;
    176a:	1f ef       	ldi	r17, 0xFF	; 255
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    176c:	ce 01       	movw	r24, r28
    176e:	68 e0       	ldi	r22, 0x08	; 8
    1770:	2a ea       	ldi	r18, 0xAA	; 170
    1772:	31 e0       	ldi	r19, 0x01	; 1
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    177c:	85 30       	cpi	r24, 0x05	; 5
    177e:	11 f4       	brne	.+4      	; 0x1784 <_ZN7Sd2Card5beginEhh+0x9c>
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void chipSelectHigh();
  void chipSelectLow();
  void spiYield();
  void type(uint8_t value) {m_type = value;}
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	0d c0       	rjmp	.+26     	; 0x179e <_ZN7Sd2Card5beginEhh+0xb6>
      type(SD_CARD_TYPE_SD1);
      break;
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	1e bd       	out	0x2e, r17	; 46
  while (!(SPSR & (1 << SPIF))) {}
    1788:	0d b4       	in	r0, 0x2d	; 45
    178a:	07 fe       	sbrs	r0, 7
    178c:	fd cf       	rjmp	.-6      	; 0x1788 <_ZN7Sd2Card5beginEhh+0xa0>
  return SPDR;
    178e:	9e b5       	in	r25, 0x2e	; 46
    }
    for (uint8_t i = 0; i < 4; i++) m_status = m_spi.receive();
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	84 30       	cpi	r24, 0x04	; 4
    1794:	c1 f7       	brne	.-16     	; 0x1786 <_ZN7Sd2Card5beginEhh+0x9e>
    1796:	9b 83       	std	Y+3, r25	; 0x03
    if (m_status == 0XAA) {
    1798:	9a 3a       	cpi	r25, 0xAA	; 170
    179a:	31 f4       	brne	.+12     	; 0x17a8 <_ZN7Sd2Card5beginEhh+0xc0>
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	8c 83       	std	Y+4, r24	; 0x04
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	82 30       	cpi	r24, 0x02	; 2
    17a4:	51 f4       	brne	.+20     	; 0x17ba <_ZN7Sd2Card5beginEhh+0xd2>
    17a6:	0d c0       	rjmp	.+26     	; 0x17c2 <_ZN7Sd2Card5beginEhh+0xda>
    for (uint8_t i = 0; i < 4; i++) m_status = m_spi.receive();
    if (m_status == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
    17a8:	0e 94 8d 1c 	call	0x391a	; 0x391a <millis>
    17ac:	6c 19       	sub	r22, r12
    17ae:	7d 09       	sbc	r23, r13
    17b0:	61 5d       	subi	r22, 0xD1	; 209
    17b2:	77 40       	sbci	r23, 0x07	; 7
    17b4:	d8 f2       	brcs	.-74     	; 0x176c <_ZN7Sd2Card5beginEhh+0x84>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {m_errorCode = code;}
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	31 c0       	rjmp	.+98     	; 0x181c <_ZN7Sd2Card5beginEhh+0x134>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    17ba:	ee 24       	eor	r14, r14
    17bc:	ff 24       	eor	r15, r15
    17be:	87 01       	movw	r16, r14
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <_ZN7Sd2Card5beginEhh+0xf8>
    17c2:	e1 2c       	mov	r14, r1
    17c4:	f1 2c       	mov	r15, r1
    17c6:	01 2d       	mov	r16, r1
    17c8:	80 e4       	ldi	r24, 0x40	; 64
    17ca:	18 2f       	mov	r17, r24
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <_ZN7Sd2Card5beginEhh+0xf8>

  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    // check for timeout
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
    17ce:	0e 94 8d 1c 	call	0x391a	; 0x391a <millis>
    17d2:	6c 19       	sub	r22, r12
    17d4:	7d 09       	sbc	r23, r13
    17d6:	61 5d       	subi	r22, 0xD1	; 209
    17d8:	77 40       	sbci	r23, 0x07	; 7
    17da:	10 f0       	brcs	.+4      	; 0x17e0 <_ZN7Sd2Card5beginEhh+0xf8>
    17dc:	8a e0       	ldi	r24, 0x0A	; 10
    17de:	1e c0       	rjmp	.+60     	; 0x181c <_ZN7Sd2Card5beginEhh+0x134>

 private:
  //----------------------------------------------------------------------------
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    17e0:	ce 01       	movw	r24, r28
    17e2:	67 e3       	ldi	r22, 0x37	; 55
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    17f0:	ce 01       	movw	r24, r28
    17f2:	69 e2       	ldi	r22, 0x29	; 41
    17f4:	a8 01       	movw	r20, r16
    17f6:	97 01       	movw	r18, r14
    17f8:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    17fc:	88 23       	and	r24, r24
    17fe:	39 f7       	brne	.-50     	; 0x17ce <_ZN7Sd2Card5beginEhh+0xe6>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	31 f5       	brne	.+76     	; 0x1852 <_ZN7Sd2Card5beginEhh+0x16a>
    if (cardCommand(CMD58, 0)) {
    1806:	ce 01       	movw	r24, r28
    1808:	6a e3       	ldi	r22, 0x3A	; 58
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7Sd2Card11cardCommandEhm>
    1816:	88 23       	and	r24, r24
    1818:	39 f0       	breq	.+14     	; 0x1828 <_ZN7Sd2Card5beginEhh+0x140>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {m_errorCode = code;}
    181a:	88 e0       	ldi	r24, 0x08	; 8
    181c:	89 83       	std	Y+1, r24	; 0x01
  chipSelectHigh();
  m_sckDivisor = sckDivisor;
  return true;

 fail:
  chipSelectHigh();
    181e:	ce 01       	movw	r24, r28
    1820:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	1a c0       	rjmp	.+52     	; 0x185c <_ZN7Sd2Card5beginEhh+0x174>
// Inline also save a little flash memory.
/** inline avr native functions if nonzero. */
#define USE_AVR_NATIVE_SPI_INLINE 1
#if USE_NATIVE_AVR_SPI && USE_AVR_NATIVE_SPI_INLINE
inline uint8_t SdSpi::receive() {
  SPDR = 0XFF;
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF))) {}
    182c:	0d b4       	in	r0, 0x2d	; 45
    182e:	07 fe       	sbrs	r0, 7
    1830:	fd cf       	rjmp	.-6      	; 0x182c <_ZN7Sd2Card5beginEhh+0x144>
  return SPDR;
    1832:	8e b5       	in	r24, 0x2e	; 46
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((m_spi.receive() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    1834:	80 7c       	andi	r24, 0xC0	; 192
    1836:	80 3c       	cpi	r24, 0xC0	; 192
    1838:	11 f4       	brne	.+4      	; 0x183e <_ZN7Sd2Card5beginEhh+0x156>
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void chipSelectHigh();
  void chipSelectLow();
  void spiYield();
  void type(uint8_t value) {m_type = value;}
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	8c 83       	std	Y+4, r24	; 0x04
    183e:	80 e0       	ldi	r24, 0x00	; 0
// Inline also save a little flash memory.
/** inline avr native functions if nonzero. */
#define USE_AVR_NATIVE_SPI_INLINE 1
#if USE_NATIVE_AVR_SPI && USE_AVR_NATIVE_SPI_INLINE
inline uint8_t SdSpi::receive() {
  SPDR = 0XFF;
    1840:	9f ef       	ldi	r25, 0xFF	; 255
    1842:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & (1 << SPIF))) {}
    1844:	0d b4       	in	r0, 0x2d	; 45
    1846:	07 fe       	sbrs	r0, 7
    1848:	fd cf       	rjmp	.-6      	; 0x1844 <_ZN7Sd2Card5beginEhh+0x15c>
  return SPDR;
    184a:	2e b5       	in	r18, 0x2e	; 46
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) m_spi.receive();
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	83 30       	cpi	r24, 0x03	; 3
    1850:	c1 f7       	brne	.-16     	; 0x1842 <_ZN7Sd2Card5beginEhh+0x15a>
  }
  chipSelectHigh();
    1852:	ce 01       	movw	r24, r28
    1854:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN7Sd2Card14chipSelectHighEv>
  m_sckDivisor = sckDivisor;
    1858:	ba 82       	std	Y+2, r11	; 0x02
    185a:	81 e0       	ldi	r24, 0x01	; 1
  return true;

 fail:
  chipSelectHigh();
  return false;
}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	cf 90       	pop	r12
    186c:	bf 90       	pop	r11
    186e:	08 95       	ret

00001870 <_ZN10SdBaseFile10make83NameEPKcPhPS1_>:
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
bool SdBaseFile::make83Name(const char* str, uint8_t* name, const char** ptr) {
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	dc 01       	movw	r26, r24
    187a:	eb 01       	movw	r28, r22
    187c:	8a 01       	movw	r16, r20
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    1882:	20 e2       	ldi	r18, 0x20	; 32
    1884:	fe 01       	movw	r30, r28
    1886:	e8 0f       	add	r30, r24
    1888:	f9 1f       	adc	r31, r25
    188a:	20 83       	st	Z, r18
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	8b 30       	cpi	r24, 0x0B	; 11
    1890:	91 05       	cpc	r25, r1
    1892:	c1 f7       	brne	.-16     	; 0x1884 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x14>
    1894:	57 e0       	ldi	r21, 0x07	; 7
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	24 c0       	rjmp	.+72     	; 0x18e2 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x72>
  i = 0;
  while (*str != '\0' && *str != '/') {
    c = *str++;
    189a:	62 2f       	mov	r22, r18
    if (c == '.') {
    189c:	2e 32       	cpi	r18, 0x2E	; 46
    189e:	19 f0       	breq	.+6      	; 0x18a6 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x36>
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
#ifdef __AVR__
      // store chars in flash
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
    18a0:	83 eb       	ldi	r24, 0xB3	; 179
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	07 c0       	rjmp	.+14     	; 0x18b4 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x44>
  while (i < 11) name[i++] = ' ';
  i = 0;
  while (*str != '\0' && *str != '/') {
    c = *str++;
    if (c == '.') {
      if (n == 10) {
    18a6:	5a 30       	cpi	r21, 0x0A	; 10
    18a8:	51 f1       	breq	.+84     	; 0x18fe <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x8e>
        // only one dot allowed
        DBG_FAIL_MACRO;
        goto fail;
    18aa:	5a e0       	ldi	r21, 0x0A	; 10
    18ac:	48 e0       	ldi	r20, 0x08	; 8
    18ae:	18 c0       	rjmp	.+48     	; 0x18e0 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x70>
      // illegal FAT characters
#ifdef __AVR__
      // store chars in flash
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) {
    18b0:	32 17       	cp	r19, r18
    18b2:	29 f1       	breq	.+74     	; 0x18fe <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x8e>
        DBG_FAIL_MACRO;
        goto fail;
    18b4:	fc 01       	movw	r30, r24
      // illegal FAT characters
#ifdef __AVR__
      // store chars in flash
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) {
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	34 91       	lpm	r19, Z+
    18ba:	33 23       	and	r19, r19
    18bc:	c9 f7       	brne	.-14     	; 0x18b0 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x40>
        goto fail;
      }
#endif  // __AVR__

      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E) {
    18be:	54 17       	cp	r21, r20
    18c0:	f0 f0       	brcs	.+60     	; 0x18fe <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x8e>
    18c2:	21 32       	cpi	r18, 0x21	; 33
    18c4:	e0 f0       	brcs	.+56     	; 0x18fe <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x8e>
    18c6:	2f 37       	cpi	r18, 0x7F	; 127
    18c8:	d0 f4       	brcc	.+52     	; 0x18fe <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x8e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    18ca:	82 2f       	mov	r24, r18
    18cc:	81 56       	subi	r24, 0x61	; 97
    18ce:	8a 31       	cpi	r24, 0x1A	; 26
    18d0:	10 f4       	brcc	.+4      	; 0x18d6 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x66>
    18d2:	62 2f       	mov	r22, r18
    18d4:	60 52       	subi	r22, 0x20	; 32
    18d6:	fe 01       	movw	r30, r28
    18d8:	e4 0f       	add	r30, r20
    18da:	f1 1d       	adc	r31, r1
    18dc:	60 83       	st	Z, r22
    18de:	4f 5f       	subi	r20, 0xFF	; 255
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while (*str != '\0' && *str != '/') {
    c = *str++;
    18e0:	11 96       	adiw	r26, 0x01	; 1
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while (*str != '\0' && *str != '/') {
    18e2:	2c 91       	ld	r18, X
    18e4:	22 23       	and	r18, r18
    18e6:	11 f0       	breq	.+4      	; 0x18ec <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x7c>
    18e8:	2f 32       	cpi	r18, 0x2F	; 47
    18ea:	b9 f6       	brne	.-82     	; 0x189a <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x2a>
      }
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  *ptr = str;
    18ec:	f8 01       	movw	r30, r16
    18ee:	b1 83       	std	Z+1, r27	; 0x01
    18f0:	a0 83       	st	Z, r26
  // must have a file name, extension is optional
  return name[0] != ' ';
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	88 81       	ld	r24, Y
    18f6:	80 32       	cpi	r24, 0x20	; 32
    18f8:	19 f0       	breq	.+6      	; 0x1900 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x90>
    18fa:	91 e0       	ldi	r25, 0x01	; 1
    18fc:	01 c0       	rjmp	.+2      	; 0x1900 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x90>
    18fe:	90 e0       	ldi	r25, 0x00	; 0

 fail:
  return false;
}
    1900:	89 2f       	mov	r24, r25
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	08 95       	ret

0000190c <_ZN10SdBaseFile10setDirSizeEv>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// set m_fileSize for a directory
bool SdBaseFile::setDirSize() {
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ef 92       	push	r14
    1912:	ff 92       	push	r15
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <_ZN10SdBaseFile10setDirSizeEv+0x12>
    191e:	0f 92       	push	r0
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	7c 01       	movw	r14, r24
  uint16_t s = 0;
  uint32_t cluster = m_firstCluster;
    1926:	fc 01       	movw	r30, r24
    1928:	86 89       	ldd	r24, Z+22	; 0x16
    192a:	97 89       	ldd	r25, Z+23	; 0x17
    192c:	a0 8d       	ldd	r26, Z+24	; 0x18
    192e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	9a 83       	std	Y+2, r25	; 0x02
    1934:	ab 83       	std	Y+3, r26	; 0x03
    1936:	bc 83       	std	Y+4, r27	; 0x04
    1938:	00 e0       	ldi	r16, 0x00	; 0
    193a:	10 e0       	ldi	r17, 0x00	; 0
  do {
    if (!m_vol->fatGet(cluster, &cluster)) {
    193c:	6e 01       	movw	r12, r28
    193e:	08 94       	sec
    1940:	c1 1c       	adc	r12, r1
    1942:	d1 1c       	adc	r13, r1
    1944:	49 81       	ldd	r20, Y+1	; 0x01
    1946:	5a 81       	ldd	r21, Y+2	; 0x02
    1948:	6b 81       	ldd	r22, Y+3	; 0x03
    194a:	7c 81       	ldd	r23, Y+4	; 0x04
    194c:	d7 01       	movw	r26, r14
    194e:	14 96       	adiw	r26, 0x04	; 4
    1950:	8d 91       	ld	r24, X+
    1952:	9c 91       	ld	r25, X
    1954:	15 97       	sbiw	r26, 0x05	; 5
    1956:	96 01       	movw	r18, r12
    1958:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN8SdVolume6fatGetEmPm>
    195c:	88 23       	and	r24, r24
    195e:	79 f1       	breq	.+94     	; 0x19be <_ZN10SdBaseFile10setDirSizeEv+0xb2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    s += m_vol->blocksPerCluster();
    1960:	d7 01       	movw	r26, r14
    1962:	14 96       	adiw	r26, 0x04	; 4
    1964:	ed 91       	ld	r30, X+
    1966:	fc 91       	ld	r31, X
    1968:	15 97       	sbiw	r26, 0x05	; 5
    196a:	84 81       	ldd	r24, Z+4	; 0x04
    196c:	08 0f       	add	r16, r24
    196e:	11 1d       	adc	r17, r1
    // max size if a directory file is 4096 blocks
    if (s >= 4096) {
    1970:	b0 e1       	ldi	r27, 0x10	; 16
    1972:	00 30       	cpi	r16, 0x00	; 0
    1974:	1b 07       	cpc	r17, r27
    1976:	18 f5       	brcc	.+70     	; 0x19be <_ZN10SdBaseFile10setDirSizeEv+0xb2>
//------------------------------------------------------------------------------
// set m_fileSize for a directory
bool SdBaseFile::setDirSize() {
  uint16_t s = 0;
  uint32_t cluster = m_firstCluster;
  do {
    1978:	29 81       	ldd	r18, Y+1	; 0x01
    197a:	3a 81       	ldd	r19, Y+2	; 0x02
    197c:	4b 81       	ldd	r20, Y+3	; 0x03
    197e:	5c 81       	ldd	r21, Y+4	; 0x04
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && m_fatType == 12) return  cluster >= FAT12EOC_MIN;
    if (m_fatType == 16) return cluster >= FAT16EOC_MIN;
    1980:	83 89       	ldd	r24, Z+19	; 0x13
    1982:	80 31       	cpi	r24, 0x10	; 16
    1984:	31 f4       	brne	.+12     	; 0x1992 <_ZN10SdBaseFile10setDirSizeEv+0x86>
    1986:	28 5f       	subi	r18, 0xF8	; 248
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	40 40       	sbci	r20, 0x00	; 0
    198c:	50 40       	sbci	r21, 0x00	; 0
    198e:	d0 f2       	brcs	.-76     	; 0x1944 <_ZN10SdBaseFile10setDirSizeEv+0x38>
    1990:	05 c0       	rjmp	.+10     	; 0x199c <_ZN10SdBaseFile10setDirSizeEv+0x90>
    return  cluster >= FAT32EOC_MIN;
    1992:	28 5f       	subi	r18, 0xF8	; 248
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	4f 4f       	sbci	r20, 0xFF	; 255
    1998:	5f 40       	sbci	r21, 0x0F	; 15
    199a:	a0 f2       	brcs	.-88     	; 0x1944 <_ZN10SdBaseFile10setDirSizeEv+0x38>
    if (s >= 4096) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } while (!m_vol->isEOC(cluster));
  m_fileSize = 512L*s;
    199c:	c8 01       	movw	r24, r16
    199e:	a0 e0       	ldi	r26, 0x00	; 0
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	29 e0       	ldi	r18, 0x09	; 9
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	aa 1f       	adc	r26, r26
    19aa:	bb 1f       	adc	r27, r27
    19ac:	2a 95       	dec	r18
    19ae:	d1 f7       	brne	.-12     	; 0x19a4 <_ZN10SdBaseFile10setDirSizeEv+0x98>
    19b0:	f7 01       	movw	r30, r14
    19b2:	82 8b       	std	Z+18, r24	; 0x12
    19b4:	93 8b       	std	Z+19, r25	; 0x13
    19b6:	a4 8b       	std	Z+20, r26	; 0x14
    19b8:	b5 8b       	std	Z+21, r27	; 0x15
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <_ZN10SdBaseFile10setDirSizeEv+0xb4>
  return true;
    19be:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	df 90       	pop	r13
    19d6:	cf 90       	pop	r12
    19d8:	08 95       	ret

000019da <_ZN10SdBaseFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is already open, the FAT volume has
 * not been initialized or it a FAT12 volume.
 */
bool SdBaseFile::openRoot(SdVolume* vol) {
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	ec 01       	movw	r28, r24
    19e0:	fb 01       	movw	r30, r22
  // error if file is already open
  if (isOpen()) {
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	88 23       	and	r24, r24
    19e6:	d1 f5       	brne	.+116    	; 0x1a5c <_ZN10SdBaseFile8openRootEP8SdVolume+0x82>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vol = vol;
    19e8:	7d 83       	std	Y+5, r23	; 0x05
    19ea:	6c 83       	std	Y+4, r22	; 0x04
  /** \return The number of FAT structures on the volume. */
  uint8_t fatCount() const {return m_fatCount;}
  /** \return The logical block number for the start of the first FAT. */
  uint32_t fatStartBlock() const {return m_fatStartBlock;}
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {return m_fatType;}
    19ec:	83 89       	ldd	r24, Z+19	; 0x13
  if (vol->fatType() == 16 || (FAT12_SUPPORT && vol->fatType() == 12)) {
    19ee:	80 31       	cpi	r24, 0x10	; 16
    19f0:	c9 f5       	brne	.+114    	; 0x1a64 <_ZN10SdBaseFile8openRootEP8SdVolume+0x8a>
    m_type = FAT_FILE_TYPE_ROOT_FIXED;
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	8a 83       	std	Y+2, r24	; 0x02
    m_firstCluster = 0;
    19f6:	1e 8a       	std	Y+22, r1	; 0x16
    19f8:	1f 8a       	std	Y+23, r1	; 0x17
    19fa:	18 8e       	std	Y+24, r1	; 0x18
    19fc:	19 8e       	std	Y+25, r1	; 0x19
    m_fileSize = 32 * vol->rootDirEntryCount();
    19fe:	84 89       	ldd	r24, Z+20	; 0x14
    1a00:	95 89       	ldd	r25, Z+21	; 0x15
    1a02:	a0 e0       	ldi	r26, 0x00	; 0
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	35 e0       	ldi	r19, 0x05	; 5
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	aa 1f       	adc	r26, r26
    1a0e:	bb 1f       	adc	r27, r27
    1a10:	3a 95       	dec	r19
    1a12:	d1 f7       	brne	.-12     	; 0x1a08 <_ZN10SdBaseFile8openRootEP8SdVolume+0x2e>
    1a14:	8a 8b       	std	Y+18, r24	; 0x12
    1a16:	9b 8b       	std	Y+19, r25	; 0x13
    1a18:	ac 8b       	std	Y+20, r26	; 0x14
    1a1a:	bd 8b       	std	Y+21, r27	; 0x15
    1a1c:	0f c0       	rjmp	.+30     	; 0x1a3c <_ZN10SdBaseFile8openRootEP8SdVolume+0x62>
  } else if (vol->fatType() == 32) {
    m_type = FAT_FILE_TYPE_ROOT32;
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	8a 83       	std	Y+2, r24	; 0x02
    m_firstCluster = vol->rootDirStart();
    1a22:	86 89       	ldd	r24, Z+22	; 0x16
    1a24:	97 89       	ldd	r25, Z+23	; 0x17
    1a26:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a28:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a2a:	8e 8b       	std	Y+22, r24	; 0x16
    1a2c:	9f 8b       	std	Y+23, r25	; 0x17
    1a2e:	a8 8f       	std	Y+24, r26	; 0x18
    1a30:	b9 8f       	std	Y+25, r27	; 0x19
    if (!setDirSize()) {
    1a32:	ce 01       	movw	r24, r28
    1a34:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN10SdBaseFile10setDirSizeEv>
    1a38:	88 23       	and	r24, r24
    1a3a:	81 f0       	breq	.+32     	; 0x1a5c <_ZN10SdBaseFile8openRootEP8SdVolume+0x82>
    // volume is not initialized, invalid, or FAT12 without support
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	89 83       	std	Y+1, r24	; 0x01

  // set to start of file
  m_curCluster = 0;
    1a40:	1e 82       	std	Y+6, r1	; 0x06
    1a42:	1f 82       	std	Y+7, r1	; 0x07
    1a44:	18 86       	std	Y+8, r1	; 0x08
    1a46:	19 86       	std	Y+9, r1	; 0x09
  m_curPosition = 0;
    1a48:	1a 86       	std	Y+10, r1	; 0x0a
    1a4a:	1b 86       	std	Y+11, r1	; 0x0b
    1a4c:	1c 86       	std	Y+12, r1	; 0x0c
    1a4e:	1d 86       	std	Y+13, r1	; 0x0d

  // root has no directory entry
  m_dirBlock = 0;
    1a50:	1e 86       	std	Y+14, r1	; 0x0e
    1a52:	1f 86       	std	Y+15, r1	; 0x0f
    1a54:	18 8a       	std	Y+16, r1	; 0x10
    1a56:	19 8a       	std	Y+17, r1	; 0x11
  m_dirIndex = 0;
    1a58:	1b 82       	std	Y+3, r1	; 0x03
    1a5a:	01 c0       	rjmp	.+2      	; 0x1a5e <_ZN10SdBaseFile8openRootEP8SdVolume+0x84>
  return true;
    1a5c:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret
  m_vol = vol;
  if (vol->fatType() == 16 || (FAT12_SUPPORT && vol->fatType() == 12)) {
    m_type = FAT_FILE_TYPE_ROOT_FIXED;
    m_firstCluster = 0;
    m_fileSize = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    1a64:	80 32       	cpi	r24, 0x20	; 32
    1a66:	d1 f7       	brne	.-12     	; 0x1a5c <_ZN10SdBaseFile8openRootEP8SdVolume+0x82>
    1a68:	da cf       	rjmp	.-76     	; 0x1a1e <_ZN10SdBaseFile8openRootEP8SdVolume+0x44>

00001a6a <_ZN10SdBaseFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdBaseFile::seekSet(uint32_t pos) {
    1a6a:	6f 92       	push	r6
    1a6c:	7f 92       	push	r7
    1a6e:	8f 92       	push	r8
    1a70:	9f 92       	push	r9
    1a72:	af 92       	push	r10
    1a74:	bf 92       	push	r11
    1a76:	cf 92       	push	r12
    1a78:	df 92       	push	r13
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	ec 01       	movw	r28, r24
    1a88:	7a 01       	movw	r14, r20
    1a8a:	8b 01       	movw	r16, r22
  /** \return True if this is a directory else false. */
  bool isDir() const {return m_type >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a normal file else false. */
  bool isFile() const {return m_type == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_type != FAT_FILE_TYPE_CLOSED;}
    1a8c:	2a 81       	ldd	r18, Y+2	; 0x02
  uint32_t nCur;
  uint32_t nNew;
  // error if file not open or seek past end of file
  if (!isOpen() || pos > m_fileSize) {
    1a8e:	22 23       	and	r18, r18
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <_ZN10SdBaseFile7seekSetEm+0x2a>
    1a92:	80 c0       	rjmp	.+256    	; 0x1b94 <_ZN10SdBaseFile7seekSetEm+0x12a>
    1a94:	8a 89       	ldd	r24, Y+18	; 0x12
    1a96:	9b 89       	ldd	r25, Y+19	; 0x13
    1a98:	ac 89       	ldd	r26, Y+20	; 0x14
    1a9a:	bd 89       	ldd	r27, Y+21	; 0x15
    1a9c:	84 17       	cp	r24, r20
    1a9e:	95 07       	cpc	r25, r21
    1aa0:	a6 07       	cpc	r26, r22
    1aa2:	b7 07       	cpc	r27, r23
    1aa4:	08 f4       	brcc	.+2      	; 0x1aa8 <_ZN10SdBaseFile7seekSetEm+0x3e>
    1aa6:	76 c0       	rjmp	.+236    	; 0x1b94 <_ZN10SdBaseFile7seekSetEm+0x12a>
    1aa8:	85 c0       	rjmp	.+266    	; 0x1bb4 <_ZN10SdBaseFile7seekSetEm+0x14a>
  }
  if (m_type == FAT_FILE_TYPE_ROOT_FIXED) {
    m_curPosition = pos;
    goto done;
  }
  if (pos == 0) {
    1aaa:	e1 14       	cp	r14, r1
    1aac:	f1 04       	cpc	r15, r1
    1aae:	01 05       	cpc	r16, r1
    1ab0:	11 05       	cpc	r17, r1
    1ab2:	51 f4       	brne	.+20     	; 0x1ac8 <_ZN10SdBaseFile7seekSetEm+0x5e>
    // set position to start of file
    m_curCluster = 0;
    1ab4:	1e 82       	std	Y+6, r1	; 0x06
    1ab6:	1f 82       	std	Y+7, r1	; 0x07
    1ab8:	18 86       	std	Y+8, r1	; 0x08
    1aba:	19 86       	std	Y+9, r1	; 0x09
    m_curPosition = 0;
    1abc:	1a 86       	std	Y+10, r1	; 0x0a
    1abe:	1b 86       	std	Y+11, r1	; 0x0b
    1ac0:	1c 86       	std	Y+12, r1	; 0x0c
    1ac2:	1d 86       	std	Y+13, r1	; 0x0d
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	67 c0       	rjmp	.+206    	; 0x1b96 <_ZN10SdBaseFile7seekSetEm+0x12c>
    goto done;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
    1ac8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1aca:	3b 85       	ldd	r19, Y+11	; 0x0b
    1acc:	4c 85       	ldd	r20, Y+12	; 0x0c
    1ace:	5d 85       	ldd	r21, Y+13	; 0x0d
    1ad0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ad2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ad4:	82 85       	ldd	r24, Z+10	; 0x0a
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	09 96       	adiw	r24, 0x09	; 9
    1ada:	21 50       	subi	r18, 0x01	; 1
    1adc:	30 40       	sbci	r19, 0x00	; 0
    1ade:	40 40       	sbci	r20, 0x00	; 0
    1ae0:	50 40       	sbci	r21, 0x00	; 0
    1ae2:	39 01       	movw	r6, r18
    1ae4:	4a 01       	movw	r8, r20
    1ae6:	08 2e       	mov	r0, r24
    1ae8:	04 c0       	rjmp	.+8      	; 0x1af2 <_ZN10SdBaseFile7seekSetEm+0x88>
    1aea:	96 94       	lsr	r9
    1aec:	87 94       	ror	r8
    1aee:	77 94       	ror	r7
    1af0:	67 94       	ror	r6
    1af2:	0a 94       	dec	r0
    1af4:	d2 f7       	brpl	.-12     	; 0x1aea <_ZN10SdBaseFile7seekSetEm+0x80>
    1af6:	2f 5f       	subi	r18, 0xFF	; 255
    1af8:	3f 4f       	sbci	r19, 0xFF	; 255
    1afa:	4f 4f       	sbci	r20, 0xFF	; 255
    1afc:	5f 4f       	sbci	r21, 0xFF	; 255
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
    1afe:	08 94       	sec
    1b00:	e1 08       	sbc	r14, r1
    1b02:	f1 08       	sbc	r15, r1
    1b04:	01 09       	sbc	r16, r1
    1b06:	11 09       	sbc	r17, r1
    1b08:	57 01       	movw	r10, r14
    1b0a:	68 01       	movw	r12, r16
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <_ZN10SdBaseFile7seekSetEm+0xac>
    1b0e:	d6 94       	lsr	r13
    1b10:	c7 94       	ror	r12
    1b12:	b7 94       	ror	r11
    1b14:	a7 94       	ror	r10
    1b16:	8a 95       	dec	r24
    1b18:	d2 f7       	brpl	.-12     	; 0x1b0e <_ZN10SdBaseFile7seekSetEm+0xa4>
    1b1a:	08 94       	sec
    1b1c:	e1 1c       	adc	r14, r1
    1b1e:	f1 1c       	adc	r15, r1
    1b20:	01 1d       	adc	r16, r1
    1b22:	11 1d       	adc	r17, r1

  if (nNew < nCur || m_curPosition == 0) {
    1b24:	a6 14       	cp	r10, r6
    1b26:	b7 04       	cpc	r11, r7
    1b28:	c8 04       	cpc	r12, r8
    1b2a:	d9 04       	cpc	r13, r9
    1b2c:	28 f0       	brcs	.+10     	; 0x1b38 <_ZN10SdBaseFile7seekSetEm+0xce>
    1b2e:	21 15       	cp	r18, r1
    1b30:	31 05       	cpc	r19, r1
    1b32:	41 05       	cpc	r20, r1
    1b34:	51 05       	cpc	r21, r1
    1b36:	49 f4       	brne	.+18     	; 0x1b4a <_ZN10SdBaseFile7seekSetEm+0xe0>
    // must follow chain from first cluster
    m_curCluster = m_firstCluster;
    1b38:	8e 89       	ldd	r24, Y+22	; 0x16
    1b3a:	9f 89       	ldd	r25, Y+23	; 0x17
    1b3c:	a8 8d       	ldd	r26, Y+24	; 0x18
    1b3e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1b40:	8e 83       	std	Y+6, r24	; 0x06
    1b42:	9f 83       	std	Y+7, r25	; 0x07
    1b44:	a8 87       	std	Y+8, r26	; 0x08
    1b46:	b9 87       	std	Y+9, r27	; 0x09
    1b48:	16 c0       	rjmp	.+44     	; 0x1b76 <_ZN10SdBaseFile7seekSetEm+0x10c>
  } else {
    // advance from curPosition
    nNew -= nCur;
    1b4a:	a6 18       	sub	r10, r6
    1b4c:	b7 08       	sbc	r11, r7
    1b4e:	c8 08       	sbc	r12, r8
    1b50:	d9 08       	sbc	r13, r9
    1b52:	11 c0       	rjmp	.+34     	; 0x1b76 <_ZN10SdBaseFile7seekSetEm+0x10c>
  }
  while (nNew--) {
    if (!m_vol->fatGet(m_curCluster, &m_curCluster)) {
    1b54:	4e 81       	ldd	r20, Y+6	; 0x06
    1b56:	5f 81       	ldd	r21, Y+7	; 0x07
    1b58:	68 85       	ldd	r22, Y+8	; 0x08
    1b5a:	79 85       	ldd	r23, Y+9	; 0x09
    1b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b60:	94 01       	movw	r18, r8
    1b62:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN8SdVolume6fatGetEmPm>
    1b66:	08 94       	sec
    1b68:	a1 08       	sbc	r10, r1
    1b6a:	b1 08       	sbc	r11, r1
    1b6c:	c1 08       	sbc	r12, r1
    1b6e:	d1 08       	sbc	r13, r1
    1b70:	88 23       	and	r24, r24
    1b72:	31 f4       	brne	.+12     	; 0x1b80 <_ZN10SdBaseFile7seekSetEm+0x116>
    1b74:	0f c0       	rjmp	.+30     	; 0x1b94 <_ZN10SdBaseFile7seekSetEm+0x12a>
    1b76:	46 e0       	ldi	r20, 0x06	; 6
    1b78:	84 2e       	mov	r8, r20
    1b7a:	91 2c       	mov	r9, r1
    1b7c:	8c 0e       	add	r8, r28
    1b7e:	9d 1e       	adc	r9, r29
    m_curCluster = m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    1b80:	a1 14       	cp	r10, r1
    1b82:	b1 04       	cpc	r11, r1
    1b84:	c1 04       	cpc	r12, r1
    1b86:	d1 04       	cpc	r13, r1
    1b88:	29 f7       	brne	.-54     	; 0x1b54 <_ZN10SdBaseFile7seekSetEm+0xea>
    if (!m_vol->fatGet(m_curCluster, &m_curCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_curPosition = pos;
    1b8a:	ea 86       	std	Y+10, r14	; 0x0a
    1b8c:	fb 86       	std	Y+11, r15	; 0x0b
    1b8e:	0c 87       	std	Y+12, r16	; 0x0c
    1b90:	1d 87       	std	Y+13, r17	; 0x0d
    1b92:	98 cf       	rjmp	.-208    	; 0x1ac4 <_ZN10SdBaseFile7seekSetEm+0x5a>
    1b94:	80 e0       	ldi	r24, 0x00	; 0
 done:
  return true;

 fail:
  return false;
}
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	df 90       	pop	r13
    1ba4:	cf 90       	pop	r12
    1ba6:	bf 90       	pop	r11
    1ba8:	af 90       	pop	r10
    1baa:	9f 90       	pop	r9
    1bac:	8f 90       	pop	r8
    1bae:	7f 90       	pop	r7
    1bb0:	6f 90       	pop	r6
    1bb2:	08 95       	ret
  // error if file not open or seek past end of file
  if (!isOpen() || pos > m_fileSize) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_type == FAT_FILE_TYPE_ROOT_FIXED) {
    1bb4:	22 30       	cpi	r18, 0x02	; 2
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <_ZN10SdBaseFile7seekSetEm+0x150>
    1bb8:	78 cf       	rjmp	.-272    	; 0x1aaa <_ZN10SdBaseFile7seekSetEm+0x40>
    1bba:	e7 cf       	rjmp	.-50     	; 0x1b8a <_ZN10SdBaseFile7seekSetEm+0x120>

00001bbc <_ZN10SdBaseFile15contiguousRangeEPmS0_>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is not contiguous, file has zero length
 * or an I/O error occurred.
 */
bool SdBaseFile::contiguousRange(uint32_t* bgnBlock, uint32_t* endBlock) {
    1bbc:	6f 92       	push	r6
    1bbe:	7f 92       	push	r7
    1bc0:	8f 92       	push	r8
    1bc2:	9f 92       	push	r9
    1bc4:	af 92       	push	r10
    1bc6:	bf 92       	push	r11
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <_ZN10SdBaseFile15contiguousRangeEPmS0_+0x1e>
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	6c 01       	movw	r12, r24
    1be2:	4b 01       	movw	r8, r22
    1be4:	3a 01       	movw	r6, r20
  // error if no blocks
  if (m_firstCluster == 0) {
    1be6:	dc 01       	movw	r26, r24
    1be8:	56 96       	adiw	r26, 0x16	; 22
    1bea:	ed 90       	ld	r14, X+
    1bec:	fd 90       	ld	r15, X+
    1bee:	0d 91       	ld	r16, X+
    1bf0:	1c 91       	ld	r17, X
    1bf2:	59 97       	sbiw	r26, 0x19	; 25
    1bf4:	e1 14       	cp	r14, r1
    1bf6:	f1 04       	cpc	r15, r1
    1bf8:	01 05       	cpc	r16, r1
    1bfa:	11 05       	cpc	r17, r1
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <_ZN10SdBaseFile15contiguousRangeEPmS0_+0x44>
    1bfe:	63 c0       	rjmp	.+198    	; 0x1cc6 <_ZN10SdBaseFile15contiguousRangeEPmS0_+0x10a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint32_t c = m_firstCluster; ; c++) {
    uint32_t next;
    if (!m_vol->fatGet(c, &next)) {
    1c00:	5e 01       	movw	r10, r28
    1c02:	08 94       	sec
    1c04:	a1 1c       	adc	r10, r1
    1c06:	b1 1c       	adc	r11, r1
    1c08:	f6 01       	movw	r30, r12
    1c0a:	84 81       	ldd	r24, Z+4	; 0x04
    1c0c:	95 81       	ldd	r25, Z+5	; 0x05
    1c0e:	b8 01       	movw	r22, r16
    1c10:	a7 01       	movw	r20, r14
    1c12:	95 01       	movw	r18, r10
    1c14:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN8SdVolume6fatGetEmPm>
    1c18:	88 23       	and	r24, r24
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <_ZN10SdBaseFile15contiguousRangeEPmS0_+0x62>
    1c1c:	54 c0       	rjmp	.+168    	; 0x1cc6 <_ZN10SdBaseFile15contiguousRangeEPmS0_+0x10a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // check for contiguous
    if (next != (c + 1)) {
    1c1e:	29 81       	ldd	r18, Y+1	; 0x01
    1c20:	3a 81       	ldd	r19, Y+2	; 0x02
    1c22:	4b 81       	ldd	r20, Y+3	; 0x03
    1c24:	5c 81       	ldd	r21, Y+4	; 0x04
    1c26:	d8 01       	movw	r26, r16
    1c28:	c7 01       	movw	r24, r14
    1c2a:	01 96       	adiw	r24, 0x01	; 1
    1c2c:	a1 1d       	adc	r26, r1
    1c2e:	b1 1d       	adc	r27, r1
    1c30:	28 17       	cp	r18, r24
    1c32:	39 07       	cpc	r19, r25
    1c34:	4a 07       	cpc	r20, r26
    1c36:	5b 07       	cpc	r21, r27
    1c38:	19 f4       	brne	.+6      	; 0x1c40 <_ZN10SdBaseFile15contiguousRangeEPmS0_+0x84>
    1c3a:	79 01       	movw	r14, r18
    1c3c:	8a 01       	movw	r16, r20
    1c3e:	e4 cf       	rjmp	.-56     	; 0x1c08 <_ZN10SdBaseFile15contiguousRangeEPmS0_+0x4c>
      // error if not end of chain
      if (!m_vol->isEOC(next)) {
    1c40:	d6 01       	movw	r26, r12
    1c42:	14 96       	adiw	r26, 0x04	; 4
    1c44:	ed 91       	ld	r30, X+
    1c46:	fc 91       	ld	r31, X
    1c48:	15 97       	sbiw	r26, 0x05	; 5
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && m_fatType == 12) return  cluster >= FAT12EOC_MIN;
    if (m_fatType == 16) return cluster >= FAT16EOC_MIN;
    1c4a:	83 89       	ldd	r24, Z+19	; 0x13
    1c4c:	80 31       	cpi	r24, 0x10	; 16
    1c4e:	31 f4       	brne	.+12     	; 0x1c5c <_ZN10SdBaseFile15contiguousRangeEPmS0_+0xa0>
    1c50:	28 5f       	subi	r18, 0xF8	; 248
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
    1c54:	40 40       	sbci	r20, 0x00	; 0
    1c56:	50 40       	sbci	r21, 0x00	; 0
    1c58:	b0 f1       	brcs	.+108    	; 0x1cc6 <_ZN10SdBaseFile15contiguousRangeEPmS0_+0x10a>
    1c5a:	05 c0       	rjmp	.+10     	; 0x1c66 <_ZN10SdBaseFile15contiguousRangeEPmS0_+0xaa>
    return  cluster >= FAT32EOC_MIN;
    1c5c:	28 5f       	subi	r18, 0xF8	; 248
    1c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c60:	4f 4f       	sbci	r20, 0xFF	; 255
    1c62:	5f 40       	sbci	r21, 0x0F	; 15
    1c64:	80 f1       	brcs	.+96     	; 0x1cc6 <_ZN10SdBaseFile15contiguousRangeEPmS0_+0x10a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      *bgnBlock = m_vol->clusterStartBlock(m_firstCluster);
    1c66:	d6 01       	movw	r26, r12
    1c68:	56 96       	adiw	r26, 0x16	; 22
    1c6a:	4d 91       	ld	r20, X+
    1c6c:	5d 91       	ld	r21, X+
    1c6e:	6d 91       	ld	r22, X+
    1c70:	7c 91       	ld	r23, X
    1c72:	59 97       	sbiw	r26, 0x19	; 25
    1c74:	cf 01       	movw	r24, r30
    1c76:	0e 94 0f 18 	call	0x301e	; 0x301e <_ZNK8SdVolume17clusterStartBlockEm>
    1c7a:	f4 01       	movw	r30, r8
    1c7c:	60 83       	st	Z, r22
    1c7e:	71 83       	std	Z+1, r23	; 0x01
    1c80:	82 83       	std	Z+2, r24	; 0x02
    1c82:	93 83       	std	Z+3, r25	; 0x03
      *endBlock = m_vol->clusterStartBlock(c)
                  + m_vol->blocksPerCluster() - 1;
    1c84:	d6 01       	movw	r26, r12
    1c86:	14 96       	adiw	r26, 0x04	; 4
    1c88:	8d 91       	ld	r24, X+
    1c8a:	9c 91       	ld	r25, X
    1c8c:	15 97       	sbiw	r26, 0x05	; 5
    1c8e:	b8 01       	movw	r22, r16
    1c90:	a7 01       	movw	r20, r14
    1c92:	0e 94 0f 18 	call	0x301e	; 0x301e <_ZNK8SdVolume17clusterStartBlockEm>
    1c96:	d6 01       	movw	r26, r12
    1c98:	14 96       	adiw	r26, 0x04	; 4
    1c9a:	ed 91       	ld	r30, X+
    1c9c:	fc 91       	ld	r31, X
    1c9e:	15 97       	sbiw	r26, 0x05	; 5
    1ca0:	24 81       	ldd	r18, Z+4	; 0x04
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	21 50       	subi	r18, 0x01	; 1
    1caa:	30 40       	sbci	r19, 0x00	; 0
    1cac:	40 40       	sbci	r20, 0x00	; 0
    1cae:	50 40       	sbci	r21, 0x00	; 0
    1cb0:	26 0f       	add	r18, r22
    1cb2:	37 1f       	adc	r19, r23
    1cb4:	48 1f       	adc	r20, r24
    1cb6:	59 1f       	adc	r21, r25
    1cb8:	f3 01       	movw	r30, r6
    1cba:	20 83       	st	Z, r18
    1cbc:	31 83       	std	Z+1, r19	; 0x01
    1cbe:	42 83       	std	Z+2, r20	; 0x02
    1cc0:	53 83       	std	Z+3, r21	; 0x03
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <_ZN10SdBaseFile15contiguousRangeEPmS0_+0x10c>
      return true;
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    }
  }

 fail:
  return false;
}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	bf 90       	pop	r11
    1ce2:	af 90       	pop	r10
    1ce4:	9f 90       	pop	r9
    1ce6:	8f 90       	pop	r8
    1ce8:	7f 90       	pop	r7
    1cea:	6f 90       	pop	r6
    1cec:	08 95       	ret

00001cee <_ZN10SdBaseFile13cacheDirEntryEh>:
  return 0;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdBaseFile::cacheDirEntry(uint8_t action) {
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	ec 01       	movw	r28, r24
    1cf4:	46 2f       	mov	r20, r22
  cache_t* pc;
  pc = m_vol->cacheFetch(m_dirBlock, action);
    1cf6:	6e 85       	ldd	r22, Y+14	; 0x0e
    1cf8:	7f 85       	ldd	r23, Y+15	; 0x0f
    1cfa:	88 89       	ldd	r24, Y+16	; 0x10
    1cfc:	99 89       	ldd	r25, Y+17	; 0x11
    1cfe:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN8SdVolume10cacheFetchEmh>
    1d02:	ac 01       	movw	r20, r24
  if (!pc) {
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	19 f4       	brne	.+6      	; 0x1d0e <_ZN10SdBaseFile13cacheDirEntryEh+0x20>
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	0a c0       	rjmp	.+20     	; 0x1d22 <_ZN10SdBaseFile13cacheDirEntryEh+0x34>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + m_dirIndex;
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	65 e0       	ldi	r22, 0x05	; 5
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	6a 95       	dec	r22
    1d1c:	e1 f7       	brne	.-8      	; 0x1d16 <_ZN10SdBaseFile13cacheDirEntryEh+0x28>
    1d1e:	24 0f       	add	r18, r20
    1d20:	35 1f       	adc	r19, r21

 fail:
  return 0;
}
    1d22:	c9 01       	movw	r24, r18
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	08 95       	ret

00001d2a <_ZN10SdBaseFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
bool SdBaseFile::sync() {
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	8c 01       	movw	r16, r24
  // only allow open files and directories
  if (!isOpen()) {
    1d34:	fc 01       	movw	r30, r24
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	88 23       	and	r24, r24
    1d3a:	e1 f1       	breq	.+120    	; 0x1db4 <_ZN10SdBaseFile4syncEv+0x8a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    1d3c:	81 81       	ldd	r24, Z+1	; 0x01
    1d3e:	87 ff       	sbrs	r24, 7
    1d40:	36 c0       	rjmp	.+108    	; 0x1dae <_ZN10SdBaseFile4syncEv+0x84>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    1d42:	c8 01       	movw	r24, r16
    1d44:	61 e0       	ldi	r22, 0x01	; 1
    1d46:	0e 94 77 0e 	call	0x1cee	; 0x1cee <_ZN10SdBaseFile13cacheDirEntryEh>
    1d4a:	ec 01       	movw	r28, r24
    // check for deleted by another open file object
    if (!d || d->name[0] == DIR_NAME_DELETED) {
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	91 f1       	breq	.+100    	; 0x1db4 <_ZN10SdBaseFile4syncEv+0x8a>
    1d50:	88 81       	ld	r24, Y
    1d52:	85 3e       	cpi	r24, 0xE5	; 229
    1d54:	79 f1       	breq	.+94     	; 0x1db4 <_ZN10SdBaseFile4syncEv+0x8a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = m_fileSize;
    1d56:	f8 01       	movw	r30, r16
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	82 30       	cpi	r24, 0x02	; 2
    1d5c:	40 f4       	brcc	.+16     	; 0x1d6e <_ZN10SdBaseFile4syncEv+0x44>
    1d5e:	82 89       	ldd	r24, Z+18	; 0x12
    1d60:	93 89       	ldd	r25, Z+19	; 0x13
    1d62:	a4 89       	ldd	r26, Z+20	; 0x14
    1d64:	b5 89       	ldd	r27, Z+21	; 0x15
    1d66:	8c 8f       	std	Y+28, r24	; 0x1c
    1d68:	9d 8f       	std	Y+29, r25	; 0x1d
    1d6a:	ae 8f       	std	Y+30, r26	; 0x1e
    1d6c:	bf 8f       	std	Y+31, r27	; 0x1f

    // update first cluster fields
    d->firstClusterLow = m_firstCluster & 0XFFFF;
    1d6e:	f8 01       	movw	r30, r16
    1d70:	86 89       	ldd	r24, Z+22	; 0x16
    1d72:	97 89       	ldd	r25, Z+23	; 0x17
    1d74:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d76:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d78:	9b 8f       	std	Y+27, r25	; 0x1b
    1d7a:	8a 8f       	std	Y+26, r24	; 0x1a
    d->firstClusterHigh = m_firstCluster >> 16;
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	aa 27       	eor	r26, r26
    1d80:	bb 27       	eor	r27, r27
    1d82:	9d 8b       	std	Y+21, r25	; 0x15
    1d84:	8c 8b       	std	Y+20, r24	; 0x14

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
    1d86:	e0 91 bb 06 	lds	r30, 0x06BB
    1d8a:	f0 91 bc 06 	lds	r31, 0x06BC
    1d8e:	30 97       	sbiw	r30, 0x00	; 0
    1d90:	51 f0       	breq	.+20     	; 0x1da6 <_ZN10SdBaseFile4syncEv+0x7c>
      m_dateTime(&d->lastWriteDate, &d->lastWriteTime);
    1d92:	be 01       	movw	r22, r28
    1d94:	6a 5e       	subi	r22, 0xEA	; 234
    1d96:	7f 4f       	sbci	r23, 0xFF	; 255
    1d98:	ce 01       	movw	r24, r28
    1d9a:	48 96       	adiw	r24, 0x18	; 24
    1d9c:	19 95       	eicall
      d->lastAccessDate = d->lastWriteDate;
    1d9e:	88 8d       	ldd	r24, Y+24	; 0x18
    1da0:	99 8d       	ldd	r25, Y+25	; 0x19
    1da2:	9b 8b       	std	Y+19, r25	; 0x13
    1da4:	8a 8b       	std	Y+18, r24	; 0x12
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
    1da6:	f8 01       	movw	r30, r16
    1da8:	81 81       	ldd	r24, Z+1	; 0x01
    1daa:	8f 77       	andi	r24, 0x7F	; 127
    1dac:	81 83       	std	Z+1, r24	; 0x01
  }
  return m_vol->cacheSync();
    1dae:	0e 94 29 18 	call	0x3052	; 0x3052 <_ZN8SdVolume9cacheSyncEv>
    1db2:	04 c0       	rjmp	.+8      	; 0x1dbc <_ZN10SdBaseFile4syncEv+0x92>

 fail:
  writeError = true;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	f8 01       	movw	r30, r16
    1db8:	80 83       	st	Z, r24
    1dba:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	08 95       	ret

00001dc6 <_ZN10SdBaseFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
bool SdBaseFile::truncate(uint32_t length) {
    1dc6:	6f 92       	push	r6
    1dc8:	7f 92       	push	r7
    1dca:	8f 92       	push	r8
    1dcc:	9f 92       	push	r9
    1dce:	af 92       	push	r10
    1dd0:	bf 92       	push	r11
    1dd2:	cf 92       	push	r12
    1dd4:	df 92       	push	r13
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <_ZN10SdBaseFile8truncateEm+0x1e>
    1de4:	0f 92       	push	r0
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	7c 01       	movw	r14, r24
    1dec:	5a 01       	movw	r10, r20
    1dee:	6b 01       	movw	r12, r22
  uint32_t newPos;
  // error if not a normal file or read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
    1df0:	dc 01       	movw	r26, r24
    1df2:	12 96       	adiw	r26, 0x02	; 2
    1df4:	8c 91       	ld	r24, X
    1df6:	12 97       	sbiw	r26, 0x02	; 2
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <_ZN10SdBaseFile8truncateEm+0x38>
    1dfc:	91 c0       	rjmp	.+290    	; 0x1f20 <_ZN10SdBaseFile8truncateEm+0x15a>
    1dfe:	11 96       	adiw	r26, 0x01	; 1
    1e00:	8c 91       	ld	r24, X
    1e02:	81 ff       	sbrs	r24, 1
    1e04:	8d c0       	rjmp	.+282    	; 0x1f20 <_ZN10SdBaseFile8truncateEm+0x15a>
    1e06:	a0 c0       	rjmp	.+320    	; 0x1f48 <_ZN10SdBaseFile8truncateEm+0x182>
  if (length > m_fileSize) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // fileSize and length are zero - nothing to do
  if (m_fileSize == 0) return true;
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	a1 05       	cpc	r26, r1
    1e0c:	b1 05       	cpc	r27, r1
    1e0e:	11 f4       	brne	.+4      	; 0x1e14 <_ZN10SdBaseFile8truncateEm+0x4e>
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	87 c0       	rjmp	.+270    	; 0x1f22 <_ZN10SdBaseFile8truncateEm+0x15c>

  // remember position for seek after truncation
  newPos = m_curPosition > length ? length : m_curPosition;
    1e14:	f7 01       	movw	r30, r14
    1e16:	62 84       	ldd	r6, Z+10	; 0x0a
    1e18:	73 84       	ldd	r7, Z+11	; 0x0b
    1e1a:	84 84       	ldd	r8, Z+12	; 0x0c
    1e1c:	95 84       	ldd	r9, Z+13	; 0x0d

  // position to last cluster in truncated file
  if (!seekSet(length)) {
    1e1e:	c7 01       	movw	r24, r14
    1e20:	b6 01       	movw	r22, r12
    1e22:	a5 01       	movw	r20, r10
    1e24:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN10SdBaseFile7seekSetEm>
    1e28:	88 23       	and	r24, r24
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <_ZN10SdBaseFile8truncateEm+0x68>
    1e2c:	79 c0       	rjmp	.+242    	; 0x1f20 <_ZN10SdBaseFile8truncateEm+0x15a>
    1e2e:	d7 01       	movw	r26, r14
    1e30:	14 96       	adiw	r26, 0x04	; 4
    1e32:	8d 91       	ld	r24, X+
    1e34:	9c 91       	ld	r25, X
    1e36:	15 97       	sbiw	r26, 0x05	; 5
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (length == 0) {
    1e38:	a1 14       	cp	r10, r1
    1e3a:	b1 04       	cpc	r11, r1
    1e3c:	c1 04       	cpc	r12, r1
    1e3e:	d1 04       	cpc	r13, r1
    1e40:	89 f4       	brne	.+34     	; 0x1e64 <_ZN10SdBaseFile8truncateEm+0x9e>
    // free all clusters
    if (!m_vol->freeChain(m_firstCluster)) {
    1e42:	56 96       	adiw	r26, 0x16	; 22
    1e44:	4d 91       	ld	r20, X+
    1e46:	5d 91       	ld	r21, X+
    1e48:	6d 91       	ld	r22, X+
    1e4a:	7c 91       	ld	r23, X
    1e4c:	59 97       	sbiw	r26, 0x19	; 25
    1e4e:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN8SdVolume9freeChainEm>
    1e52:	88 23       	and	r24, r24
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <_ZN10SdBaseFile8truncateEm+0x92>
    1e56:	64 c0       	rjmp	.+200    	; 0x1f20 <_ZN10SdBaseFile8truncateEm+0x15a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_firstCluster = 0;
    1e58:	f7 01       	movw	r30, r14
    1e5a:	16 8a       	std	Z+22, r1	; 0x16
    1e5c:	17 8a       	std	Z+23, r1	; 0x17
    1e5e:	10 8e       	std	Z+24, r1	; 0x18
    1e60:	11 8e       	std	Z+25, r1	; 0x19
    1e62:	44 c0       	rjmp	.+136    	; 0x1eec <_ZN10SdBaseFile8truncateEm+0x126>
  } else {
    uint32_t toFree;
    if (!m_vol->fatGet(m_curCluster, &toFree)) {
    1e64:	d7 01       	movw	r26, r14
    1e66:	16 96       	adiw	r26, 0x06	; 6
    1e68:	4d 91       	ld	r20, X+
    1e6a:	5d 91       	ld	r21, X+
    1e6c:	6d 91       	ld	r22, X+
    1e6e:	7c 91       	ld	r23, X
    1e70:	19 97       	sbiw	r26, 0x09	; 9
    1e72:	9e 01       	movw	r18, r28
    1e74:	2f 5f       	subi	r18, 0xFF	; 255
    1e76:	3f 4f       	sbci	r19, 0xFF	; 255
    1e78:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN8SdVolume6fatGetEmPm>
    1e7c:	88 23       	and	r24, r24
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <_ZN10SdBaseFile8truncateEm+0xbc>
    1e80:	4f c0       	rjmp	.+158    	; 0x1f20 <_ZN10SdBaseFile8truncateEm+0x15a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!m_vol->isEOC(toFree)) {
    1e82:	d7 01       	movw	r26, r14
    1e84:	14 96       	adiw	r26, 0x04	; 4
    1e86:	ed 91       	ld	r30, X+
    1e88:	fc 91       	ld	r31, X
    1e8a:	15 97       	sbiw	r26, 0x05	; 5
    1e8c:	49 81       	ldd	r20, Y+1	; 0x01
    1e8e:	5a 81       	ldd	r21, Y+2	; 0x02
    1e90:	6b 81       	ldd	r22, Y+3	; 0x03
    1e92:	7c 81       	ldd	r23, Y+4	; 0x04
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && m_fatType == 12) return  cluster >= FAT12EOC_MIN;
    if (m_fatType == 16) return cluster >= FAT16EOC_MIN;
    1e94:	83 89       	ldd	r24, Z+19	; 0x13
    1e96:	80 31       	cpi	r24, 0x10	; 16
    1e98:	49 f4       	brne	.+18     	; 0x1eac <_ZN10SdBaseFile8truncateEm+0xe6>
    1e9a:	48 3f       	cpi	r20, 0xF8	; 248
    1e9c:	bf ef       	ldi	r27, 0xFF	; 255
    1e9e:	5b 07       	cpc	r21, r27
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	6b 07       	cpc	r22, r27
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	7b 07       	cpc	r23, r27
    1ea8:	48 f0       	brcs	.+18     	; 0x1ebc <_ZN10SdBaseFile8truncateEm+0xf6>
    1eaa:	20 c0       	rjmp	.+64     	; 0x1eec <_ZN10SdBaseFile8truncateEm+0x126>
    return  cluster >= FAT32EOC_MIN;
    1eac:	48 3f       	cpi	r20, 0xF8	; 248
    1eae:	8f ef       	ldi	r24, 0xFF	; 255
    1eb0:	58 07       	cpc	r21, r24
    1eb2:	8f ef       	ldi	r24, 0xFF	; 255
    1eb4:	68 07       	cpc	r22, r24
    1eb6:	8f e0       	ldi	r24, 0x0F	; 15
    1eb8:	78 07       	cpc	r23, r24
    1eba:	c0 f4       	brcc	.+48     	; 0x1eec <_ZN10SdBaseFile8truncateEm+0x126>
      // free extra clusters
      if (!m_vol->freeChain(toFree)) {
    1ebc:	cf 01       	movw	r24, r30
    1ebe:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN8SdVolume9freeChainEm>
    1ec2:	88 23       	and	r24, r24
    1ec4:	69 f1       	breq	.+90     	; 0x1f20 <_ZN10SdBaseFile8truncateEm+0x15a>
    return (position >> 9) & m_clusterBlockMask;}
  uint32_t clusterStartBlock(uint32_t cluster) const;
  bool fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    1ec6:	d7 01       	movw	r26, r14
    1ec8:	16 96       	adiw	r26, 0x06	; 6
    1eca:	4d 91       	ld	r20, X+
    1ecc:	5d 91       	ld	r21, X+
    1ece:	6d 91       	ld	r22, X+
    1ed0:	7c 91       	ld	r23, X
    1ed2:	19 97       	sbiw	r26, 0x09	; 9
    1ed4:	14 96       	adiw	r26, 0x04	; 4
    1ed6:	8d 91       	ld	r24, X+
    1ed8:	9c 91       	ld	r25, X
    1eda:	15 97       	sbiw	r26, 0x05	; 5
    1edc:	0f ef       	ldi	r16, 0xFF	; 255
    1ede:	1f ef       	ldi	r17, 0xFF	; 255
    1ee0:	2f ef       	ldi	r18, 0xFF	; 255
    1ee2:	3f e0       	ldi	r19, 0x0F	; 15
    1ee4:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8SdVolume6fatPutEmm>
        DBG_FAIL_MACRO;
        goto fail;
      }
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    1ee8:	88 23       	and	r24, r24
    1eea:	d1 f0       	breq	.+52     	; 0x1f20 <_ZN10SdBaseFile8truncateEm+0x15a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_fileSize = length;
    1eec:	f7 01       	movw	r30, r14
    1eee:	a2 8a       	std	Z+18, r10	; 0x12
    1ef0:	b3 8a       	std	Z+19, r11	; 0x13
    1ef2:	c4 8a       	std	Z+20, r12	; 0x14
    1ef4:	d5 8a       	std	Z+21, r13	; 0x15

  // need to update directory entry
  m_flags |= F_FILE_DIR_DIRTY;
    1ef6:	81 81       	ldd	r24, Z+1	; 0x01
    1ef8:	80 68       	ori	r24, 0x80	; 128
    1efa:	81 83       	std	Z+1, r24	; 0x01

  if (!sync()) {
    1efc:	c7 01       	movw	r24, r14
    1efe:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN10SdBaseFile4syncEv>
    1f02:	88 23       	and	r24, r24
    1f04:	69 f0       	breq	.+26     	; 0x1f20 <_ZN10SdBaseFile8truncateEm+0x15a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // set file to correct position
  return seekSet(newPos);
    1f06:	b6 01       	movw	r22, r12
    1f08:	a5 01       	movw	r20, r10
    1f0a:	6a 14       	cp	r6, r10
    1f0c:	7b 04       	cpc	r7, r11
    1f0e:	8c 04       	cpc	r8, r12
    1f10:	9d 04       	cpc	r9, r13
    1f12:	10 f4       	brcc	.+4      	; 0x1f18 <_ZN10SdBaseFile8truncateEm+0x152>
    1f14:	b4 01       	movw	r22, r8
    1f16:	a3 01       	movw	r20, r6
    1f18:	c7 01       	movw	r24, r14
    1f1a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN10SdBaseFile7seekSetEm>
    1f1e:	01 c0       	rjmp	.+2      	; 0x1f22 <_ZN10SdBaseFile8truncateEm+0x15c>
    1f20:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	df 90       	pop	r13
    1f38:	cf 90       	pop	r12
    1f3a:	bf 90       	pop	r11
    1f3c:	af 90       	pop	r10
    1f3e:	9f 90       	pop	r9
    1f40:	8f 90       	pop	r8
    1f42:	7f 90       	pop	r7
    1f44:	6f 90       	pop	r6
    1f46:	08 95       	ret
  if (!isFile() || !(m_flags & O_WRITE)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // error if length is greater than current size
  if (length > m_fileSize) {
    1f48:	f7 01       	movw	r30, r14
    1f4a:	82 89       	ldd	r24, Z+18	; 0x12
    1f4c:	93 89       	ldd	r25, Z+19	; 0x13
    1f4e:	a4 89       	ldd	r26, Z+20	; 0x14
    1f50:	b5 89       	ldd	r27, Z+21	; 0x15
    1f52:	84 17       	cp	r24, r20
    1f54:	95 07       	cpc	r25, r21
    1f56:	a6 07       	cpc	r26, r22
    1f58:	b7 07       	cpc	r27, r23
    1f5a:	08 f0       	brcs	.+2      	; 0x1f5e <_ZN10SdBaseFile8truncateEm+0x198>
    1f5c:	55 cf       	rjmp	.-342    	; 0x1e08 <_ZN10SdBaseFile8truncateEm+0x42>
    1f5e:	e0 cf       	rjmp	.-64     	; 0x1f20 <_ZN10SdBaseFile8truncateEm+0x15a>

00001f60 <_ZN10SdBaseFile15openCachedEntryEhh>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes m_vol is initialized
bool SdBaseFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    1f60:	1f 93       	push	r17
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	ec 01       	movw	r28, r24
    1f68:	14 2f       	mov	r17, r20
  // location of entry in cache
  dir_t* p = &m_vol->cacheAddress()->dir[dirIndex];
    1f6a:	26 2f       	mov	r18, r22
    1f6c:	30 e0       	ldi	r19, 0x00	; 0

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    1f6e:	f9 01       	movw	r30, r18
    1f70:	85 e0       	ldi	r24, 0x05	; 5
    1f72:	ee 0f       	add	r30, r30
    1f74:	ff 1f       	adc	r31, r31
    1f76:	8a 95       	dec	r24
    1f78:	e1 f7       	brne	.-8      	; 0x1f72 <_ZN10SdBaseFile15openCachedEntryEhh+0x12>
    1f7a:	ee 53       	subi	r30, 0x3E	; 62
    1f7c:	f9 4f       	sbci	r31, 0xF9	; 249
    1f7e:	83 85       	ldd	r24, Z+11	; 0x0b
    1f80:	81 71       	andi	r24, 0x11	; 17
    1f82:	21 f0       	breq	.+8      	; 0x1f8c <_ZN10SdBaseFile15openCachedEntryEhh+0x2c>
    if (oflag & (O_WRITE | O_TRUNC)) {
    1f84:	84 2f       	mov	r24, r20
    1f86:	82 71       	andi	r24, 0x12	; 18
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <_ZN10SdBaseFile15openCachedEntryEhh+0x2c>
    1f8a:	64 c0       	rjmp	.+200    	; 0x2054 <_ZN10SdBaseFile15openCachedEntryEhh+0xf4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // remember location of directory entry on SD
  m_dirBlock = m_vol->cacheBlockNumber();
    1f8c:	80 91 c2 08 	lds	r24, 0x08C2
    1f90:	90 91 c3 08 	lds	r25, 0x08C3
    1f94:	a0 91 c4 08 	lds	r26, 0x08C4
    1f98:	b0 91 c5 08 	lds	r27, 0x08C5
    1f9c:	8e 87       	std	Y+14, r24	; 0x0e
    1f9e:	9f 87       	std	Y+15, r25	; 0x0f
    1fa0:	a8 8b       	std	Y+16, r26	; 0x10
    1fa2:	b9 8b       	std	Y+17, r27	; 0x11
  m_dirIndex = dirIndex;
    1fa4:	6b 83       	std	Y+3, r22	; 0x03

  // copy first cluster number for directory fields
  m_firstCluster = (uint32_t)p->firstClusterHigh << 16;
    1fa6:	f9 01       	movw	r30, r18
    1fa8:	b5 e0       	ldi	r27, 0x05	; 5
    1faa:	ee 0f       	add	r30, r30
    1fac:	ff 1f       	adc	r31, r31
    1fae:	ba 95       	dec	r27
    1fb0:	e1 f7       	brne	.-8      	; 0x1faa <_ZN10SdBaseFile15openCachedEntryEhh+0x4a>
    1fb2:	ee 53       	subi	r30, 0x3E	; 62
    1fb4:	f9 4f       	sbci	r31, 0xF9	; 249
    1fb6:	24 89       	ldd	r18, Z+20	; 0x14
    1fb8:	35 89       	ldd	r19, Z+21	; 0x15
    1fba:	40 e0       	ldi	r20, 0x00	; 0
    1fbc:	50 e0       	ldi	r21, 0x00	; 0
    1fbe:	a9 01       	movw	r20, r18
    1fc0:	33 27       	eor	r19, r19
    1fc2:	22 27       	eor	r18, r18
    1fc4:	2e 8b       	std	Y+22, r18	; 0x16
    1fc6:	3f 8b       	std	Y+23, r19	; 0x17
    1fc8:	48 8f       	std	Y+24, r20	; 0x18
    1fca:	59 8f       	std	Y+25, r21	; 0x19
  m_firstCluster |= p->firstClusterLow;
    1fcc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fce:	93 8d       	ldd	r25, Z+27	; 0x1b
    1fd0:	a0 e0       	ldi	r26, 0x00	; 0
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	28 2b       	or	r18, r24
    1fd6:	39 2b       	or	r19, r25
    1fd8:	4a 2b       	or	r20, r26
    1fda:	5b 2b       	or	r21, r27
    1fdc:	2e 8b       	std	Y+22, r18	; 0x16
    1fde:	3f 8b       	std	Y+23, r19	; 0x17
    1fe0:	48 8f       	std	Y+24, r20	; 0x18
    1fe2:	59 8f       	std	Y+25, r21	; 0x19
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file else false.
 */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    1fe4:	83 85       	ldd	r24, Z+11	; 0x0b
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	88 71       	andi	r24, 0x18	; 24
    1fea:	90 70       	andi	r25, 0x00	; 0

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	51 f4       	brne	.+20     	; 0x2004 <_ZN10SdBaseFile15openCachedEntryEhh+0xa4>
    m_fileSize = p->fileSize;
    1ff0:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ff2:	95 8d       	ldd	r25, Z+29	; 0x1d
    1ff4:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1ff6:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1ff8:	8a 8b       	std	Y+18, r24	; 0x12
    1ffa:	9b 8b       	std	Y+19, r25	; 0x13
    1ffc:	ac 8b       	std	Y+20, r26	; 0x14
    1ffe:	bd 8b       	std	Y+21, r27	; 0x15
    m_type = FAT_FILE_TYPE_NORMAL;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	08 c0       	rjmp	.+16     	; 0x2014 <_ZN10SdBaseFile15openCachedEntryEhh+0xb4>
  } else if (DIR_IS_SUBDIR(p)) {
    2004:	40 97       	sbiw	r24, 0x10	; 16
    2006:	31 f5       	brne	.+76     	; 0x2054 <_ZN10SdBaseFile15openCachedEntryEhh+0xf4>
    if (!setDirSize()) {
    2008:	ce 01       	movw	r24, r28
    200a:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN10SdBaseFile10setDirSizeEv>
    200e:	88 23       	and	r24, r24
    2010:	09 f1       	breq	.+66     	; 0x2054 <_ZN10SdBaseFile15openCachedEntryEhh+0xf4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_type = FAT_FILE_TYPE_SUBDIR;
    2012:	84 e0       	ldi	r24, 0x04	; 4
    2014:	8a 83       	std	Y+2, r24	; 0x02
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;
    2016:	81 2f       	mov	r24, r17
    2018:	8f 70       	andi	r24, 0x0F	; 15
    201a:	89 83       	std	Y+1, r24	; 0x01

  // set to start of file
  m_curCluster = 0;
    201c:	1e 82       	std	Y+6, r1	; 0x06
    201e:	1f 82       	std	Y+7, r1	; 0x07
    2020:	18 86       	std	Y+8, r1	; 0x08
    2022:	19 86       	std	Y+9, r1	; 0x09
  m_curPosition = 0;
    2024:	1a 86       	std	Y+10, r1	; 0x0a
    2026:	1b 86       	std	Y+11, r1	; 0x0b
    2028:	1c 86       	std	Y+12, r1	; 0x0c
    202a:	1d 86       	std	Y+13, r1	; 0x0d
  if ((oflag & O_TRUNC) && !truncate(0)) {
    202c:	14 ff       	sbrs	r17, 4
    202e:	18 c0       	rjmp	.+48     	; 0x2060 <_ZN10SdBaseFile15openCachedEntryEhh+0x100>
    2030:	ce 01       	movw	r24, r28
    2032:	40 e0       	ldi	r20, 0x00	; 0
    2034:	50 e0       	ldi	r21, 0x00	; 0
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	70 e0       	ldi	r23, 0x00	; 0
    203a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <_ZN10SdBaseFile8truncateEm>
    203e:	88 23       	and	r24, r24
    2040:	79 f4       	brne	.+30     	; 0x2060 <_ZN10SdBaseFile15openCachedEntryEhh+0x100>
    2042:	08 c0       	rjmp	.+16     	; 0x2054 <_ZN10SdBaseFile15openCachedEntryEhh+0xf4>
  }
  /** Set the files position to end-of-file + \a offset. See seekSet().
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int32_t offset = 0) {return seekSet(m_fileSize + offset);}
    2044:	4a 89       	ldd	r20, Y+18	; 0x12
    2046:	5b 89       	ldd	r21, Y+19	; 0x13
    2048:	6c 89       	ldd	r22, Y+20	; 0x14
    204a:	7d 89       	ldd	r23, Y+21	; 0x15
    204c:	ce 01       	movw	r24, r28
    204e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN10SdBaseFile7seekSetEm>
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <_ZN10SdBaseFile15openCachedEntryEhh+0xf8>
    goto fail;
  }
  return oflag & O_AT_END ? seekEnd(0) : true;

 fail:
  m_type = FAT_FILE_TYPE_CLOSED;
    2054:	1a 82       	std	Y+2, r1	; 0x02
    2056:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	1f 91       	pop	r17
    205e:	08 95       	ret
  m_curPosition = 0;
  if ((oflag & O_TRUNC) && !truncate(0)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return oflag & O_AT_END ? seekEnd(0) : true;
    2060:	15 fd       	sbrc	r17, 5
    2062:	f0 cf       	rjmp	.-32     	; 0x2044 <_ZN10SdBaseFile15openCachedEntryEhh+0xe4>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	f8 cf       	rjmp	.-16     	; 0x2058 <_ZN10SdBaseFile15openCachedEntryEhh+0xf8>

00002068 <_ZN10SdBaseFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
bool SdBaseFile::close() {
    2068:	0f 93       	push	r16
    206a:	1f 93       	push	r17
    206c:	8c 01       	movw	r16, r24
  bool rtn = sync();
    206e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN10SdBaseFile4syncEv>
  m_type = FAT_FILE_TYPE_CLOSED;
    2072:	f8 01       	movw	r30, r16
    2074:	12 82       	std	Z+2, r1	; 0x02
  return rtn;
}
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	08 95       	ret

0000207c <_ZN10SdBaseFile6removeEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
bool SdBaseFile::remove() {
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	ec 01       	movw	r28, r24
  dir_t* d;
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) {
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	50 e0       	ldi	r21, 0x00	; 0
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <_ZN10SdBaseFile8truncateEm>
    208e:	88 23       	and	r24, r24
    2090:	69 f0       	breq	.+26     	; 0x20ac <_ZN10SdBaseFile6removeEv+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache directory entry
  d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    2092:	ce 01       	movw	r24, r28
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	0e 94 77 0e 	call	0x1cee	; 0x1cee <_ZN10SdBaseFile13cacheDirEntryEh>
    209a:	fc 01       	movw	r30, r24
  if (!d) {
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	31 f0       	breq	.+12     	; 0x20ac <_ZN10SdBaseFile6removeEv+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // mark entry deleted
  d->name[0] = DIR_NAME_DELETED;
    20a0:	85 ee       	ldi	r24, 0xE5	; 229
    20a2:	80 83       	st	Z, r24

  // set this file closed
  m_type = FAT_FILE_TYPE_CLOSED;
    20a4:	1a 82       	std	Y+2, r1	; 0x02

  // write entry to SD
  return m_vol->cacheSync();
    20a6:	0e 94 29 18 	call	0x3052	; 0x3052 <_ZN8SdVolume9cacheSyncEv>
    20aa:	01 c0       	rjmp	.+2      	; 0x20ae <_ZN10SdBaseFile6removeEv+0x32>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
  return true;

 fail:
  return false;
}
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	08 95       	ret

000020b4 <_ZN10SdBaseFile4readEPvj>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int SdBaseFile::read(void* buf, size_t nbyte) {
    20b4:	3f 92       	push	r3
    20b6:	4f 92       	push	r4
    20b8:	5f 92       	push	r5
    20ba:	6f 92       	push	r6
    20bc:	7f 92       	push	r7
    20be:	8f 92       	push	r8
    20c0:	9f 92       	push	r9
    20c2:	af 92       	push	r10
    20c4:	bf 92       	push	r11
    20c6:	cf 92       	push	r12
    20c8:	df 92       	push	r13
    20ca:	ef 92       	push	r14
    20cc:	ff 92       	push	r15
    20ce:	0f 93       	push	r16
    20d0:	1f 93       	push	r17
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	28 97       	sbiw	r28, 0x08	; 8
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	98 87       	std	Y+8, r25	; 0x08
    20e8:	8f 83       	std	Y+7, r24	; 0x07
    20ea:	5e 83       	std	Y+6, r21	; 0x06
    20ec:	4d 83       	std	Y+5, r20	; 0x05
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open or write only
  if (!isOpen() || !(m_flags & O_READ)) {
    20ee:	dc 01       	movw	r26, r24
    20f0:	12 96       	adiw	r26, 0x02	; 2
    20f2:	8c 91       	ld	r24, X
    20f4:	12 97       	sbiw	r26, 0x02	; 2
    20f6:	88 23       	and	r24, r24
    20f8:	09 f4       	brne	.+2      	; 0x20fc <_ZN10SdBaseFile4readEPvj+0x48>
    20fa:	1d c1       	rjmp	.+570    	; 0x2336 <__stack+0x137>
    20fc:	11 96       	adiw	r26, 0x01	; 1
    20fe:	8c 91       	ld	r24, X
    2100:	80 ff       	sbrs	r24, 0
    2102:	19 c1       	rjmp	.+562    	; 0x2336 <__stack+0x137>
    2104:	33 c1       	rjmp	.+614    	; 0x236c <__stack+0x16d>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max bytes left in file
  if (nbyte >= (m_fileSize - m_curPosition)) {
    nbyte = m_fileSize - m_curPosition;
    2106:	f5 01       	movw	r30, r10
    2108:	ee 19       	sub	r30, r14
    210a:	ff 09       	sbc	r31, r15
    210c:	fe 83       	std	Y+6, r31	; 0x06
    210e:	ed 83       	std	Y+5, r30	; 0x05
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int SdBaseFile::read(void* buf, size_t nbyte) {
  uint8_t blockOfCluster;
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    2110:	7a 83       	std	Y+2, r23	; 0x02
    2112:	69 83       	std	Y+1, r22	; 0x01
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = m_firstCluster;
        } else {
          // get next cluster from FAT
          if (!m_vol->fatGet(m_curCluster, &m_curCluster)) {
    2114:	8f 81       	ldd	r24, Y+7	; 0x07
    2116:	98 85       	ldd	r25, Y+8	; 0x08
    2118:	06 96       	adiw	r24, 0x06	; 6
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	6d 80       	ldd	r6, Y+5	; 0x05
    2120:	7e 80       	ldd	r7, Y+6	; 0x06
    2122:	02 c1       	rjmp	.+516    	; 0x2328 <__stack+0x129>
  }
  // amount left to read
  toRead = nbyte;
  while (toRead > 0) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
    2124:	af 81       	ldd	r26, Y+7	; 0x07
    2126:	b8 85       	ldd	r27, Y+8	; 0x08
    2128:	1a 96       	adiw	r26, 0x0a	; 10
    212a:	2d 91       	ld	r18, X+
    212c:	3d 91       	ld	r19, X+
    212e:	4d 91       	ld	r20, X+
    2130:	5c 91       	ld	r21, X
    2132:	1d 97       	sbiw	r26, 0x0d	; 13
    2134:	8f ef       	ldi	r24, 0xFF	; 255
    2136:	48 2e       	mov	r4, r24
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	58 2e       	mov	r5, r24
    213c:	42 22       	and	r4, r18
    213e:	53 22       	and	r5, r19
    blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    2140:	14 96       	adiw	r26, 0x04	; 4
    2142:	ed 91       	ld	r30, X+
    2144:	fc 91       	ld	r31, X
    2146:	15 97       	sbiw	r26, 0x05	; 5
  static bool cacheWriteFat();
#endif  // USE_MULTIPLE_CARDS
//------------------------------------------------------------------------------
  bool allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;}
    2148:	59 01       	movw	r10, r18
    214a:	6a 01       	movw	r12, r20
    214c:	09 e0       	ldi	r16, 0x09	; 9
    214e:	d6 94       	lsr	r13
    2150:	c7 94       	ror	r12
    2152:	b7 94       	ror	r11
    2154:	a7 94       	ror	r10
    2156:	0a 95       	dec	r16
    2158:	d1 f7       	brne	.-12     	; 0x214e <_ZN10SdBaseFile4readEPvj+0x9a>
    215a:	35 80       	ldd	r3, Z+5	; 0x05
    215c:	3a 20       	and	r3, r10
    if (m_type == FAT_FILE_TYPE_ROOT_FIXED) {
    215e:	12 96       	adiw	r26, 0x02	; 2
    2160:	8c 91       	ld	r24, X
    2162:	82 30       	cpi	r24, 0x02	; 2
    2164:	49 f4       	brne	.+18     	; 0x2178 <_ZN10SdBaseFile4readEPvj+0xc4>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
    2166:	e6 88       	ldd	r14, Z+22	; 0x16
    2168:	f7 88       	ldd	r15, Z+23	; 0x17
    216a:	00 8d       	ldd	r16, Z+24	; 0x18
    216c:	11 8d       	ldd	r17, Z+25	; 0x19
    216e:	ea 0c       	add	r14, r10
    2170:	fb 1c       	adc	r15, r11
    2172:	0c 1d       	adc	r16, r12
    2174:	1d 1d       	adc	r17, r13
    2176:	35 c0       	rjmp	.+106    	; 0x21e2 <_ZN10SdBaseFile4readEPvj+0x12e>
    } else {
      if (offset == 0 && blockOfCluster == 0) {
    2178:	41 14       	cp	r4, r1
    217a:	51 04       	cpc	r5, r1
    217c:	11 f5       	brne	.+68     	; 0x21c2 <_ZN10SdBaseFile4readEPvj+0x10e>
    217e:	33 20       	and	r3, r3
    2180:	01 f5       	brne	.+64     	; 0x21c2 <_ZN10SdBaseFile4readEPvj+0x10e>
        // start of new cluster
        if (m_curPosition == 0) {
    2182:	21 15       	cp	r18, r1
    2184:	31 05       	cpc	r19, r1
    2186:	41 05       	cpc	r20, r1
    2188:	51 05       	cpc	r21, r1
    218a:	59 f4       	brne	.+22     	; 0x21a2 <_ZN10SdBaseFile4readEPvj+0xee>
          // use first cluster in file
          m_curCluster = m_firstCluster;
    218c:	ef 81       	ldd	r30, Y+7	; 0x07
    218e:	f8 85       	ldd	r31, Y+8	; 0x08
    2190:	86 89       	ldd	r24, Z+22	; 0x16
    2192:	97 89       	ldd	r25, Z+23	; 0x17
    2194:	a0 8d       	ldd	r26, Z+24	; 0x18
    2196:	b1 8d       	ldd	r27, Z+25	; 0x19
    2198:	86 83       	std	Z+6, r24	; 0x06
    219a:	97 83       	std	Z+7, r25	; 0x07
    219c:	a0 87       	std	Z+8, r26	; 0x08
    219e:	b1 87       	std	Z+9, r27	; 0x09
    21a0:	10 c0       	rjmp	.+32     	; 0x21c2 <_ZN10SdBaseFile4readEPvj+0x10e>
        } else {
          // get next cluster from FAT
          if (!m_vol->fatGet(m_curCluster, &m_curCluster)) {
    21a2:	af 81       	ldd	r26, Y+7	; 0x07
    21a4:	b8 85       	ldd	r27, Y+8	; 0x08
    21a6:	16 96       	adiw	r26, 0x06	; 6
    21a8:	4d 91       	ld	r20, X+
    21aa:	5d 91       	ld	r21, X+
    21ac:	6d 91       	ld	r22, X+
    21ae:	7c 91       	ld	r23, X
    21b0:	19 97       	sbiw	r26, 0x09	; 9
    21b2:	cf 01       	movw	r24, r30
    21b4:	2b 81       	ldd	r18, Y+3	; 0x03
    21b6:	3c 81       	ldd	r19, Y+4	; 0x04
    21b8:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN8SdVolume6fatGetEmPm>
    21bc:	88 23       	and	r24, r24
    21be:	09 f4       	brne	.+2      	; 0x21c2 <_ZN10SdBaseFile4readEPvj+0x10e>
    21c0:	ba c0       	rjmp	.+372    	; 0x2336 <__stack+0x137>
            goto fail;
          }
        }
      }

      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    21c2:	ef 81       	ldd	r30, Y+7	; 0x07
    21c4:	f8 85       	ldd	r31, Y+8	; 0x08
    21c6:	46 81       	ldd	r20, Z+6	; 0x06
    21c8:	57 81       	ldd	r21, Z+7	; 0x07
    21ca:	60 85       	ldd	r22, Z+8	; 0x08
    21cc:	71 85       	ldd	r23, Z+9	; 0x09
    21ce:	84 81       	ldd	r24, Z+4	; 0x04
    21d0:	95 81       	ldd	r25, Z+5	; 0x05
    21d2:	0e 94 0f 18 	call	0x301e	; 0x301e <_ZNK8SdVolume17clusterStartBlockEm>
    21d6:	7b 01       	movw	r14, r22
    21d8:	8c 01       	movw	r16, r24
    21da:	e3 0c       	add	r14, r3
    21dc:	f1 1c       	adc	r15, r1
    21de:	01 1d       	adc	r16, r1
    21e0:	11 1d       	adc	r17, r1
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
    21e2:	41 14       	cp	r4, r1
    21e4:	51 04       	cpc	r5, r1
    21e6:	99 f4       	brne	.+38     	; 0x220e <__stack+0xf>
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	6f 16       	cp	r6, r31
    21ec:	f2 e0       	ldi	r31, 0x02	; 2
    21ee:	7f 06       	cpc	r7, r31
    21f0:	70 f0       	brcs	.+28     	; 0x220e <__stack+0xf>
#endif  // USE_SEPARATE_FAT_CACHE
  static Sd2Card* m_sdCard;            // Sd2Card object for cache
#endif  // USE_MULTIPLE_CARDS

  cache_t *cacheAddress() {return &m_cacheBuffer;}
  uint32_t cacheBlockNumber() {return m_cacheBlockNumber;}
    21f2:	20 91 c2 08 	lds	r18, 0x08C2
    21f6:	30 91 c3 08 	lds	r19, 0x08C3
    21fa:	40 91 c4 08 	lds	r20, 0x08C4
    21fe:	50 91 c5 08 	lds	r21, 0x08C5
    2202:	e2 16       	cp	r14, r18
    2204:	f3 06       	cpc	r15, r19
    2206:	04 07       	cpc	r16, r20
    2208:	15 07       	cpc	r17, r21
    220a:	09 f0       	breq	.+2      	; 0x220e <__stack+0xf>
    220c:	cf c0       	rjmp	.+414    	; 0x23ac <__stack+0x1ad>
      // amount to be read from current block
      n = 512 - offset;
      if (n > toRead) n = toRead;
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetch(block, SdVolume::CACHE_FOR_READ);
    220e:	c8 01       	movw	r24, r16
    2210:	b7 01       	movw	r22, r14
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN8SdVolume10cacheFetchEmh>
      if (!pc) {
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	09 f4       	brne	.+2      	; 0x221e <__stack+0x1f>
    221c:	8c c0       	rjmp	.+280    	; 0x2336 <__stack+0x137>

      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	52 e0       	ldi	r21, 0x02	; 2
    2222:	44 19       	sub	r20, r4
    2224:	55 09       	sbc	r21, r5
    2226:	43 01       	movw	r8, r6
    2228:	46 15       	cp	r20, r6
    222a:	57 05       	cpc	r21, r7
    222c:	08 f4       	brcc	.+2      	; 0x2230 <__stack+0x31>
    222e:	4a 01       	movw	r8, r20
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    2230:	9c 01       	movw	r18, r24
    2232:	24 0d       	add	r18, r4
    2234:	35 1d       	adc	r19, r5
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	9a 81       	ldd	r25, Y+2	; 0x02
    223a:	b9 01       	movw	r22, r18
    223c:	a4 01       	movw	r20, r8
    223e:	0e 94 14 02 	call	0x428	; 0x428 <memcpy>
    2242:	59 c0       	rjmp	.+178    	; 0x22f6 <__stack+0xf7>
    if (FAT12_SUPPORT && m_fatType == 12) return  cluster >= FAT12EOC_MIN;
    if (m_fatType == 16) return cluster >= FAT16EOC_MIN;
    return  cluster >= FAT32EOC_MIN;
  }
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard->readBlock(block, dst);}
    2244:	80 91 c7 08 	lds	r24, 0x08C7
    2248:	90 91 c8 08 	lds	r25, 0x08C8
    224c:	b8 01       	movw	r22, r16
    224e:	a7 01       	movw	r20, r14
    2250:	29 81       	ldd	r18, Y+1	; 0x01
    2252:	3a 81       	ldd	r19, Y+2	; 0x02
    2254:	0e 94 a3 0a 	call	0x1546	; 0x1546 <_ZN7Sd2Card9readBlockEmPh>
    } else if (!USE_MULTI_BLOCK_SD_IO || toRead < 1024) {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
    2258:	88 23       	and	r24, r24
    225a:	09 f4       	brne	.+2      	; 0x225e <__stack+0x5f>
    225c:	6c c0       	rjmp	.+216    	; 0x2336 <__stack+0x137>
        DBG_FAIL_MACRO;
        goto fail;
    225e:	81 2c       	mov	r8, r1
    2260:	12 e0       	ldi	r17, 0x02	; 2
    2262:	91 2e       	mov	r9, r17
    2264:	48 c0       	rjmp	.+144    	; 0x22f6 <__stack+0xf7>
      }
    } else {
      uint8_t nb = toRead >> 9;
    2266:	d7 2c       	mov	r13, r7
    2268:	d6 94       	lsr	r13
      if (m_type != FAT_FILE_TYPE_ROOT_FIXED) {
    226a:	af 81       	ldd	r26, Y+7	; 0x07
    226c:	b8 85       	ldd	r27, Y+8	; 0x08
    226e:	12 96       	adiw	r26, 0x02	; 2
    2270:	8c 91       	ld	r24, X
    2272:	12 97       	sbiw	r26, 0x02	; 2
    2274:	82 30       	cpi	r24, 0x02	; 2
    2276:	49 f0       	breq	.+18     	; 0x228a <__stack+0x8b>
    2278:	14 96       	adiw	r26, 0x04	; 4
    227a:	ed 91       	ld	r30, X+
    227c:	fc 91       	ld	r31, X
    227e:	15 97       	sbiw	r26, 0x05	; 5
    2280:	84 81       	ldd	r24, Z+4	; 0x04
    2282:	83 19       	sub	r24, r3
    2284:	8d 15       	cp	r24, r13
    2286:	08 f4       	brcc	.+2      	; 0x228a <__stack+0x8b>
    2288:	d8 2e       	mov	r13, r24
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) nb = mb;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
    228a:	e2 16       	cp	r14, r18
    228c:	f3 06       	cpc	r15, r19
    228e:	04 07       	cpc	r16, r20
    2290:	15 07       	cpc	r17, r21
    2292:	70 f0       	brcs	.+28     	; 0x22b0 <__stack+0xb1>
    2294:	2d 0d       	add	r18, r13
    2296:	31 1d       	adc	r19, r1
    2298:	41 1d       	adc	r20, r1
    229a:	51 1d       	adc	r21, r1
    229c:	e2 16       	cp	r14, r18
    229e:	f3 06       	cpc	r15, r19
    22a0:	04 07       	cpc	r16, r20
    22a2:	15 07       	cpc	r17, r21
    22a4:	28 f4       	brcc	.+10     	; 0x22b0 <__stack+0xb1>
        && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
    22a6:	0e 94 29 18 	call	0x3052	; 0x3052 <_ZN8SdVolume9cacheSyncEv>
    22aa:	88 23       	and	r24, r24
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <__stack+0xb1>
    22ae:	43 c0       	rjmp	.+134    	; 0x2336 <__stack+0x137>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->sdCard()->readStart(block)) {
    22b0:	80 91 c7 08 	lds	r24, 0x08C7
    22b4:	90 91 c8 08 	lds	r25, 0x08C8
    22b8:	b8 01       	movw	r22, r16
    22ba:	a7 01       	movw	r20, r14
    22bc:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN7Sd2Card9readStartEm>
    22c0:	88 23       	and	r24, r24
    22c2:	c9 f1       	breq	.+114    	; 0x2336 <__stack+0x137>
        DBG_FAIL_MACRO;
        goto fail;
    22c4:	09 81       	ldd	r16, Y+1	; 0x01
    22c6:	1a 81       	ldd	r17, Y+2	; 0x02
    22c8:	ff 24       	eor	r15, r15
    22ca:	08 c0       	rjmp	.+16     	; 0x22dc <__stack+0xdd>
      }
      for (uint8_t b = 0; b < nb; b++) {
        if (!m_vol->sdCard()->readData(dst + b*512)) {
    22cc:	b8 01       	movw	r22, r16
    22ce:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_ZN7Sd2Card8readDataEPh>
    22d2:	00 50       	subi	r16, 0x00	; 0
    22d4:	1e 4f       	sbci	r17, 0xFE	; 254
    22d6:	88 23       	and	r24, r24
    22d8:	71 f1       	breq	.+92     	; 0x2336 <__stack+0x137>
      }
      if (!m_vol->sdCard()->readStart(block)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      for (uint8_t b = 0; b < nb; b++) {
    22da:	f3 94       	inc	r15
    22dc:	80 91 c7 08 	lds	r24, 0x08C7
    22e0:	90 91 c8 08 	lds	r25, 0x08C8
    22e4:	fd 14       	cp	r15, r13
    22e6:	90 f3       	brcs	.-28     	; 0x22cc <__stack+0xcd>
        if (!m_vol->sdCard()->readData(dst + b*512)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->sdCard()->readStop()) {
    22e8:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN7Sd2Card8readStopEv>
    22ec:	88 23       	and	r24, r24
    22ee:	19 f1       	breq	.+70     	; 0x2336 <__stack+0x137>
      uint8_t nb = toRead >> 9;
      if (m_type != FAT_FILE_TYPE_ROOT_FIXED) {
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) nb = mb;
      }
      n = 512*nb;
    22f0:	9d 2c       	mov	r9, r13
    22f2:	99 0c       	add	r9, r9
    22f4:	88 24       	eor	r8, r8
      if (!m_vol->sdCard()->readStop()) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    22f6:	e9 81       	ldd	r30, Y+1	; 0x01
    22f8:	fa 81       	ldd	r31, Y+2	; 0x02
    22fa:	e8 0d       	add	r30, r8
    22fc:	f9 1d       	adc	r31, r9
    22fe:	fa 83       	std	Y+2, r31	; 0x02
    2300:	e9 83       	std	Y+1, r30	; 0x01
    m_curPosition += n;
    2302:	94 01       	movw	r18, r8
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	ef 81       	ldd	r30, Y+7	; 0x07
    230a:	f8 85       	ldd	r31, Y+8	; 0x08
    230c:	82 85       	ldd	r24, Z+10	; 0x0a
    230e:	93 85       	ldd	r25, Z+11	; 0x0b
    2310:	a4 85       	ldd	r26, Z+12	; 0x0c
    2312:	b5 85       	ldd	r27, Z+13	; 0x0d
    2314:	82 0f       	add	r24, r18
    2316:	93 1f       	adc	r25, r19
    2318:	a4 1f       	adc	r26, r20
    231a:	b5 1f       	adc	r27, r21
    231c:	82 87       	std	Z+10, r24	; 0x0a
    231e:	93 87       	std	Z+11, r25	; 0x0b
    2320:	a4 87       	std	Z+12, r26	; 0x0c
    2322:	b5 87       	std	Z+13, r27	; 0x0d
    toRead -= n;
    2324:	68 18       	sub	r6, r8
    2326:	79 08       	sbc	r7, r9
  if (nbyte >= (m_fileSize - m_curPosition)) {
    nbyte = m_fileSize - m_curPosition;
  }
  // amount left to read
  toRead = nbyte;
  while (toRead > 0) {
    2328:	61 14       	cp	r6, r1
    232a:	71 04       	cpc	r7, r1
    232c:	09 f0       	breq	.+2      	; 0x2330 <__stack+0x131>
    232e:	fa ce       	rjmp	.-524    	; 0x2124 <_ZN10SdBaseFile4readEPvj+0x70>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte;
    2330:	4d 81       	ldd	r20, Y+5	; 0x05
    2332:	5e 81       	ldd	r21, Y+6	; 0x06
    2334:	02 c0       	rjmp	.+4      	; 0x233a <__stack+0x13b>
    2336:	4f ef       	ldi	r20, 0xFF	; 255
    2338:	5f ef       	ldi	r21, 0xFF	; 255

 fail:
  return -1;
}
    233a:	ca 01       	movw	r24, r20
    233c:	28 96       	adiw	r28, 0x08	; 8
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	ff 90       	pop	r15
    2352:	ef 90       	pop	r14
    2354:	df 90       	pop	r13
    2356:	cf 90       	pop	r12
    2358:	bf 90       	pop	r11
    235a:	af 90       	pop	r10
    235c:	9f 90       	pop	r9
    235e:	8f 90       	pop	r8
    2360:	7f 90       	pop	r7
    2362:	6f 90       	pop	r6
    2364:	5f 90       	pop	r5
    2366:	4f 90       	pop	r4
    2368:	3f 90       	pop	r3
    236a:	08 95       	ret
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max bytes left in file
  if (nbyte >= (m_fileSize - m_curPosition)) {
    236c:	af 81       	ldd	r26, Y+7	; 0x07
    236e:	b8 85       	ldd	r27, Y+8	; 0x08
    2370:	52 96       	adiw	r26, 0x12	; 18
    2372:	ad 90       	ld	r10, X+
    2374:	bd 90       	ld	r11, X+
    2376:	cd 90       	ld	r12, X+
    2378:	dc 90       	ld	r13, X
    237a:	55 97       	sbiw	r26, 0x15	; 21
    237c:	1a 96       	adiw	r26, 0x0a	; 10
    237e:	ed 90       	ld	r14, X+
    2380:	fd 90       	ld	r15, X+
    2382:	0d 91       	ld	r16, X+
    2384:	1c 91       	ld	r17, X
    2386:	1d 97       	sbiw	r26, 0x0d	; 13
    2388:	ed 81       	ldd	r30, Y+5	; 0x05
    238a:	fe 81       	ldd	r31, Y+6	; 0x06
    238c:	9f 01       	movw	r18, r30
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	50 e0       	ldi	r21, 0x00	; 0
    2392:	d6 01       	movw	r26, r12
    2394:	c5 01       	movw	r24, r10
    2396:	8e 19       	sub	r24, r14
    2398:	9f 09       	sbc	r25, r15
    239a:	a0 0b       	sbc	r26, r16
    239c:	b1 0b       	sbc	r27, r17
    239e:	28 17       	cp	r18, r24
    23a0:	39 07       	cpc	r19, r25
    23a2:	4a 07       	cpc	r20, r26
    23a4:	5b 07       	cpc	r21, r27
    23a6:	08 f0       	brcs	.+2      	; 0x23aa <__stack+0x1ab>
    23a8:	ae ce       	rjmp	.-676    	; 0x2106 <_ZN10SdBaseFile4readEPvj+0x52>
    23aa:	b2 ce       	rjmp	.-668    	; 0x2110 <_ZN10SdBaseFile4readEPvj+0x5c>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    } else if (!USE_MULTI_BLOCK_SD_IO || toRead < 1024) {
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	6f 16       	cp	r6, r31
    23b0:	f4 e0       	ldi	r31, 0x04	; 4
    23b2:	7f 06       	cpc	r7, r31
    23b4:	08 f0       	brcs	.+2      	; 0x23b8 <__stack+0x1b9>
    23b6:	57 cf       	rjmp	.-338    	; 0x2266 <__stack+0x67>
    23b8:	45 cf       	rjmp	.-374    	; 0x2244 <__stack+0x45>

000023ba <_ZN10SdBaseFile4readEv>:
/** Read the next byte from a file.
 *
 * \return For success read returns the next byte in the file as an int.
 * If an error occurs or end of file is reached -1 is returned.
 */
int16_t SdBaseFile::read() {
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	0f 92       	push	r0
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  return read(&b, 1) == 1 ? b : -1;
    23c4:	be 01       	movw	r22, r28
    23c6:	6f 5f       	subi	r22, 0xFF	; 255
    23c8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <_ZN10SdBaseFile4readEPvj>
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	19 f0       	breq	.+6      	; 0x23dc <_ZN10SdBaseFile4readEv+0x22>
    23d6:	2f ef       	ldi	r18, 0xFF	; 255
    23d8:	3f ef       	ldi	r19, 0xFF	; 255
    23da:	03 c0       	rjmp	.+6      	; 0x23e2 <_ZN10SdBaseFile4readEv+0x28>
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
}
    23e2:	c9 01       	movw	r24, r18
    23e4:	0f 90       	pop	r0
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <_ZN10SdBaseFile10addClusterEv>:
SdBaseFile* SdBaseFile::m_cwd = 0;
// callback function for date/time
void (*SdBaseFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// add a cluster to a file
bool SdBaseFile::addCluster() {
    23ec:	cf 93       	push	r28
    23ee:	df 93       	push	r29
    23f0:	ec 01       	movw	r28, r24
  if (!m_vol->allocContiguous(1, &m_curCluster)) {
    23f2:	9c 01       	movw	r18, r24
    23f4:	2a 5f       	subi	r18, 0xFA	; 250
    23f6:	3f 4f       	sbci	r19, 0xFF	; 255
    23f8:	8c 81       	ldd	r24, Y+4	; 0x04
    23fa:	9d 81       	ldd	r25, Y+5	; 0x05
    23fc:	41 e0       	ldi	r20, 0x01	; 1
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	60 e0       	ldi	r22, 0x00	; 0
    2402:	70 e0       	ldi	r23, 0x00	; 0
    2404:	0e 94 34 1b 	call	0x3668	; 0x3668 <_ZN8SdVolume15allocContiguousEmPm>
    2408:	88 23       	and	r24, r24
    240a:	a1 f0       	breq	.+40     	; 0x2434 <_ZN10SdBaseFile10addClusterEv+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // if first cluster of file link to directory entry
  if (m_firstCluster == 0) {
    240c:	8e 89       	ldd	r24, Y+22	; 0x16
    240e:	9f 89       	ldd	r25, Y+23	; 0x17
    2410:	a8 8d       	ldd	r26, Y+24	; 0x18
    2412:	b9 8d       	ldd	r27, Y+25	; 0x19
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	a1 05       	cpc	r26, r1
    2418:	b1 05       	cpc	r27, r1
    241a:	59 f4       	brne	.+22     	; 0x2432 <_ZN10SdBaseFile10addClusterEv+0x46>
    m_firstCluster = m_curCluster;
    241c:	8e 81       	ldd	r24, Y+6	; 0x06
    241e:	9f 81       	ldd	r25, Y+7	; 0x07
    2420:	a8 85       	ldd	r26, Y+8	; 0x08
    2422:	b9 85       	ldd	r27, Y+9	; 0x09
    2424:	8e 8b       	std	Y+22, r24	; 0x16
    2426:	9f 8b       	std	Y+23, r25	; 0x17
    2428:	a8 8f       	std	Y+24, r26	; 0x18
    242a:	b9 8f       	std	Y+25, r27	; 0x19
    m_flags |= F_FILE_DIR_DIRTY;
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	80 68       	ori	r24, 0x80	; 128
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;

 fail:
  return false;
}
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	08 95       	ret

0000243a <_ZN10SdBaseFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
int SdBaseFile::write(const void* buf, size_t nbyte) {
    243a:	2f 92       	push	r2
    243c:	3f 92       	push	r3
    243e:	4f 92       	push	r4
    2440:	5f 92       	push	r5
    2442:	6f 92       	push	r6
    2444:	7f 92       	push	r7
    2446:	8f 92       	push	r8
    2448:	9f 92       	push	r9
    244a:	af 92       	push	r10
    244c:	bf 92       	push	r11
    244e:	cf 92       	push	r12
    2450:	df 92       	push	r13
    2452:	ef 92       	push	r14
    2454:	ff 92       	push	r15
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	29 97       	sbiw	r28, 0x09	; 9
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	4c 01       	movw	r8, r24
    2470:	16 2f       	mov	r17, r22
    2472:	07 2f       	mov	r16, r23
    2474:	59 87       	std	Y+9, r21	; 0x09
    2476:	48 87       	std	Y+8, r20	; 0x08
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
    2478:	dc 01       	movw	r26, r24
    247a:	12 96       	adiw	r26, 0x02	; 2
    247c:	8c 91       	ld	r24, X
    247e:	12 97       	sbiw	r26, 0x02	; 2
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	09 f0       	breq	.+2      	; 0x2486 <_ZN10SdBaseFile5writeEPKvj+0x4c>
    2484:	bd c1       	rjmp	.+890    	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
    2486:	11 96       	adiw	r26, 0x01	; 1
    2488:	8c 91       	ld	r24, X
    248a:	81 ff       	sbrs	r24, 1
    248c:	b9 c1       	rjmp	.+882    	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
    248e:	d7 c1       	rjmp	.+942    	; 0x283e <_ZN10SdBaseFile5writeEPKvj+0x404>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND) && m_curPosition != m_fileSize) {
    2490:	f4 01       	movw	r30, r8
    2492:	42 89       	ldd	r20, Z+18	; 0x12
    2494:	53 89       	ldd	r21, Z+19	; 0x13
    2496:	64 89       	ldd	r22, Z+20	; 0x14
    2498:	75 89       	ldd	r23, Z+21	; 0x15
    249a:	82 85       	ldd	r24, Z+10	; 0x0a
    249c:	93 85       	ldd	r25, Z+11	; 0x0b
    249e:	a4 85       	ldd	r26, Z+12	; 0x0c
    24a0:	b5 85       	ldd	r27, Z+13	; 0x0d
    24a2:	84 17       	cp	r24, r20
    24a4:	95 07       	cpc	r25, r21
    24a6:	a6 07       	cpc	r26, r22
    24a8:	b7 07       	cpc	r27, r23
    24aa:	31 f0       	breq	.+12     	; 0x24b8 <_ZN10SdBaseFile5writeEPKvj+0x7e>
    24ac:	c4 01       	movw	r24, r8
    24ae:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN10SdBaseFile7seekSetEm>
    if (!seekEnd()) {
    24b2:	88 23       	and	r24, r24
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <_ZN10SdBaseFile5writeEPKvj+0x7e>
    24b6:	a4 c1       	rjmp	.+840    	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    24b8:	88 85       	ldd	r24, Y+8	; 0x08
    24ba:	99 85       	ldd	r25, Y+9	; 0x09
    24bc:	9c 01       	movw	r18, r24
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	50 e0       	ldi	r21, 0x00	; 0
    24c2:	f4 01       	movw	r30, r8
    24c4:	82 85       	ldd	r24, Z+10	; 0x0a
    24c6:	93 85       	ldd	r25, Z+11	; 0x0b
    24c8:	a4 85       	ldd	r26, Z+12	; 0x0c
    24ca:	b5 85       	ldd	r27, Z+13	; 0x0d
    24cc:	80 95       	com	r24
    24ce:	90 95       	com	r25
    24d0:	a0 95       	com	r26
    24d2:	b0 95       	com	r27
    24d4:	82 17       	cp	r24, r18
    24d6:	93 07       	cpc	r25, r19
    24d8:	a4 07       	cpc	r26, r20
    24da:	b5 07       	cpc	r27, r21
    24dc:	08 f4       	brcc	.+2      	; 0x24e0 <_ZN10SdBaseFile5writeEPKvj+0xa6>
    24de:	90 c1       	rjmp	.+800    	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
int SdBaseFile::write(const void* buf, size_t nbyte) {
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
    24e0:	81 2f       	mov	r24, r17
    24e2:	90 2f       	mov	r25, r16
    24e4:	9c 01       	movw	r18, r24
    24e6:	3f 83       	std	Y+7, r19	; 0x07
    24e8:	2e 83       	std	Y+6, r18	; 0x06
    24ea:	28 84       	ldd	r2, Y+8	; 0x08
    24ec:	39 84       	ldd	r3, Y+9	; 0x09
    24ee:	4c c1       	rjmp	.+664    	; 0x2788 <_ZN10SdBaseFile5writeEPKvj+0x34e>
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    24f0:	d4 01       	movw	r26, r8
    24f2:	14 96       	adiw	r26, 0x04	; 4
    24f4:	ed 91       	ld	r30, X+
    24f6:	fc 91       	ld	r31, X
    24f8:	15 97       	sbiw	r26, 0x05	; 5
  static bool cacheWriteFat();
#endif  // USE_MULTIPLE_CARDS
//------------------------------------------------------------------------------
  bool allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;}
    24fa:	da 01       	movw	r26, r20
    24fc:	c9 01       	movw	r24, r18
    24fe:	19 e0       	ldi	r17, 0x09	; 9
    2500:	b6 95       	lsr	r27
    2502:	a7 95       	ror	r26
    2504:	97 95       	ror	r25
    2506:	87 95       	ror	r24
    2508:	1a 95       	dec	r17
    250a:	d1 f7       	brne	.-12     	; 0x2500 <_ZN10SdBaseFile5writeEPKvj+0xc6>
    250c:	15 81       	ldd	r17, Z+5	; 0x05
    250e:	18 23       	and	r17, r24
    uint16_t blockOffset = m_curPosition & 0X1FF;
    2510:	af ef       	ldi	r26, 0xFF	; 255
    2512:	ea 2e       	mov	r14, r26
    2514:	a1 e0       	ldi	r26, 0x01	; 1
    2516:	fa 2e       	mov	r15, r26
    2518:	e2 22       	and	r14, r18
    251a:	f3 22       	and	r15, r19
    if (blockOfCluster == 0 && blockOffset == 0) {
    251c:	11 23       	and	r17, r17
    251e:	09 f0       	breq	.+2      	; 0x2522 <_ZN10SdBaseFile5writeEPKvj+0xe8>
    2520:	52 c0       	rjmp	.+164    	; 0x25c6 <_ZN10SdBaseFile5writeEPKvj+0x18c>
    2522:	e1 14       	cp	r14, r1
    2524:	f1 04       	cpc	r15, r1
    2526:	09 f0       	breq	.+2      	; 0x252a <_ZN10SdBaseFile5writeEPKvj+0xf0>
    2528:	4e c0       	rjmp	.+156    	; 0x25c6 <_ZN10SdBaseFile5writeEPKvj+0x18c>
      // start of new cluster
      if (m_curCluster != 0) {
    252a:	d4 01       	movw	r26, r8
    252c:	16 96       	adiw	r26, 0x06	; 6
    252e:	4d 91       	ld	r20, X+
    2530:	5d 91       	ld	r21, X+
    2532:	6d 91       	ld	r22, X+
    2534:	7c 91       	ld	r23, X
    2536:	19 97       	sbiw	r26, 0x09	; 9
    2538:	41 15       	cp	r20, r1
    253a:	51 05       	cpc	r21, r1
    253c:	61 05       	cpc	r22, r1
    253e:	71 05       	cpc	r23, r1
    2540:	71 f1       	breq	.+92     	; 0x259e <_ZN10SdBaseFile5writeEPKvj+0x164>
        uint32_t next;
        if (!m_vol->fatGet(m_curCluster, &next)) {
    2542:	cf 01       	movw	r24, r30
    2544:	9e 01       	movw	r18, r28
    2546:	2f 5f       	subi	r18, 0xFF	; 255
    2548:	3f 4f       	sbci	r19, 0xFF	; 255
    254a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN8SdVolume6fatGetEmPm>
    254e:	88 23       	and	r24, r24
    2550:	09 f4       	brne	.+2      	; 0x2554 <_ZN10SdBaseFile5writeEPKvj+0x11a>
    2552:	56 c1       	rjmp	.+684    	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (m_vol->isEOC(next)) {
    2554:	29 81       	ldd	r18, Y+1	; 0x01
    2556:	3a 81       	ldd	r19, Y+2	; 0x02
    2558:	4b 81       	ldd	r20, Y+3	; 0x03
    255a:	5c 81       	ldd	r21, Y+4	; 0x04
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && m_fatType == 12) return  cluster >= FAT12EOC_MIN;
    if (m_fatType == 16) return cluster >= FAT16EOC_MIN;
    255c:	d4 01       	movw	r26, r8
    255e:	14 96       	adiw	r26, 0x04	; 4
    2560:	ed 91       	ld	r30, X+
    2562:	fc 91       	ld	r31, X
    2564:	15 97       	sbiw	r26, 0x05	; 5
    2566:	83 89       	ldd	r24, Z+19	; 0x13
    2568:	80 31       	cpi	r24, 0x10	; 16
    256a:	49 f4       	brne	.+18     	; 0x257e <_ZN10SdBaseFile5writeEPKvj+0x144>
    256c:	28 3f       	cpi	r18, 0xF8	; 248
    256e:	bf ef       	ldi	r27, 0xFF	; 255
    2570:	3b 07       	cpc	r19, r27
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	4b 07       	cpc	r20, r27
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	5b 07       	cpc	r21, r27
    257a:	48 f0       	brcs	.+18     	; 0x258e <_ZN10SdBaseFile5writeEPKvj+0x154>
    257c:	19 c0       	rjmp	.+50     	; 0x25b0 <_ZN10SdBaseFile5writeEPKvj+0x176>
    return  cluster >= FAT32EOC_MIN;
    257e:	28 3f       	cpi	r18, 0xF8	; 248
    2580:	ef ef       	ldi	r30, 0xFF	; 255
    2582:	3e 07       	cpc	r19, r30
    2584:	ef ef       	ldi	r30, 0xFF	; 255
    2586:	4e 07       	cpc	r20, r30
    2588:	ef e0       	ldi	r30, 0x0F	; 15
    258a:	5e 07       	cpc	r21, r30
    258c:	88 f4       	brcc	.+34     	; 0x25b0 <_ZN10SdBaseFile5writeEPKvj+0x176>
          if (!addCluster()) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        } else {
          m_curCluster = next;
    258e:	d4 01       	movw	r26, r8
    2590:	16 96       	adiw	r26, 0x06	; 6
    2592:	2d 93       	st	X+, r18
    2594:	3d 93       	st	X+, r19
    2596:	4d 93       	st	X+, r20
    2598:	5c 93       	st	X, r21
    259a:	19 97       	sbiw	r26, 0x09	; 9
    259c:	14 c0       	rjmp	.+40     	; 0x25c6 <_ZN10SdBaseFile5writeEPKvj+0x18c>
        }
      } else {
        if (m_firstCluster == 0) {
    259e:	f4 01       	movw	r30, r8
    25a0:	86 89       	ldd	r24, Z+22	; 0x16
    25a2:	97 89       	ldd	r25, Z+23	; 0x17
    25a4:	a0 8d       	ldd	r26, Z+24	; 0x18
    25a6:	b1 8d       	ldd	r27, Z+25	; 0x19
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	a1 05       	cpc	r26, r1
    25ac:	b1 05       	cpc	r27, r1
    25ae:	31 f4       	brne	.+12     	; 0x25bc <_ZN10SdBaseFile5writeEPKvj+0x182>
          // allocate first cluster of file
          if (!addCluster()) {
    25b0:	c4 01       	movw	r24, r8
    25b2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <_ZN10SdBaseFile10addClusterEv>
    25b6:	88 23       	and	r24, r24
    25b8:	31 f4       	brne	.+12     	; 0x25c6 <_ZN10SdBaseFile5writeEPKvj+0x18c>
    25ba:	22 c1       	rjmp	.+580    	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
            DBG_FAIL_MACRO;
            goto fail;
          }
        } else {
          m_curCluster = m_firstCluster;
    25bc:	f4 01       	movw	r30, r8
    25be:	86 83       	std	Z+6, r24	; 0x06
    25c0:	97 83       	std	Z+7, r25	; 0x07
    25c2:	a0 87       	std	Z+8, r26	; 0x08
    25c4:	b1 87       	std	Z+9, r27	; 0x09
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    25c6:	d4 01       	movw	r26, r8
    25c8:	16 96       	adiw	r26, 0x06	; 6
    25ca:	4d 91       	ld	r20, X+
    25cc:	5d 91       	ld	r21, X+
    25ce:	6d 91       	ld	r22, X+
    25d0:	7c 91       	ld	r23, X
    25d2:	19 97       	sbiw	r26, 0x09	; 9
    25d4:	14 96       	adiw	r26, 0x04	; 4
    25d6:	8d 91       	ld	r24, X+
    25d8:	9c 91       	ld	r25, X
    25da:	15 97       	sbiw	r26, 0x05	; 5
    25dc:	0e 94 0f 18 	call	0x301e	; 0x301e <_ZNK8SdVolume17clusterStartBlockEm>
    25e0:	5b 01       	movw	r10, r22
    25e2:	6c 01       	movw	r12, r24
    25e4:	a1 0e       	add	r10, r17
    25e6:	b1 1c       	adc	r11, r1
    25e8:	c1 1c       	adc	r12, r1
    25ea:	d1 1c       	adc	r13, r1

    if (blockOffset != 0 || nToWrite < 512) {
    25ec:	e1 14       	cp	r14, r1
    25ee:	f1 04       	cpc	r15, r1
    25f0:	a9 f4       	brne	.+42     	; 0x261c <_ZN10SdBaseFile5writeEPKvj+0x1e2>
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	2b 16       	cp	r2, r27
    25f6:	b2 e0       	ldi	r27, 0x02	; 2
    25f8:	3b 06       	cpc	r3, r27
    25fa:	a0 f5       	brcc	.+104    	; 0x2664 <_ZN10SdBaseFile5writeEPKvj+0x22a>
      // partial block - must use cache
     if (blockOffset == 0 && m_curPosition >= m_fileSize) {
    25fc:	f4 01       	movw	r30, r8
    25fe:	22 85       	ldd	r18, Z+10	; 0x0a
    2600:	33 85       	ldd	r19, Z+11	; 0x0b
    2602:	44 85       	ldd	r20, Z+12	; 0x0c
    2604:	55 85       	ldd	r21, Z+13	; 0x0d
    2606:	82 89       	ldd	r24, Z+18	; 0x12
    2608:	93 89       	ldd	r25, Z+19	; 0x13
    260a:	a4 89       	ldd	r26, Z+20	; 0x14
    260c:	b5 89       	ldd	r27, Z+21	; 0x15
    260e:	28 17       	cp	r18, r24
    2610:	39 07       	cpc	r19, r25
    2612:	4a 07       	cpc	r20, r26
    2614:	5b 07       	cpc	r21, r27
    2616:	10 f0       	brcs	.+4      	; 0x261c <_ZN10SdBaseFile5writeEPKvj+0x1e2>
    2618:	45 e0       	ldi	r20, 0x05	; 5
    261a:	01 c0       	rjmp	.+2      	; 0x261e <_ZN10SdBaseFile5writeEPKvj+0x1e4>
    261c:	41 e0       	ldi	r20, 0x01	; 1
        cacheOption = SdVolume::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of block
        cacheOption = SdVolume::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetch(block, cacheOption);
    261e:	c6 01       	movw	r24, r12
    2620:	b5 01       	movw	r22, r10
    2622:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN8SdVolume10cacheFetchEmh>
      if (!pc) {
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	09 f4       	brne	.+2      	; 0x262c <_ZN10SdBaseFile5writeEPKvj+0x1f2>
    262a:	ea c0       	rjmp	.+468    	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
        DBG_FAIL_MACRO;
        goto fail;
      }

      // max space in block
      uint16_t space = 512 - blockOffset;
    262c:	00 e0       	ldi	r16, 0x00	; 0
    262e:	12 e0       	ldi	r17, 0x02	; 2
    2630:	0e 19       	sub	r16, r14
    2632:	1f 09       	sbc	r17, r15
    2634:	21 01       	movw	r4, r2
    2636:	02 15       	cp	r16, r2
    2638:	13 05       	cpc	r17, r3
    263a:	08 f4       	brcc	.+2      	; 0x263e <_ZN10SdBaseFile5writeEPKvj+0x204>
    263c:	28 01       	movw	r4, r16

      // lesser of space and amount to write
      n = space < nToWrite ? space : nToWrite;

      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
    263e:	9c 01       	movw	r18, r24
    2640:	2e 0d       	add	r18, r14
    2642:	3f 1d       	adc	r19, r15
    2644:	c9 01       	movw	r24, r18
    2646:	6e 81       	ldd	r22, Y+6	; 0x06
    2648:	7f 81       	ldd	r23, Y+7	; 0x07
    264a:	a2 01       	movw	r20, r4
    264c:	0e 94 14 02 	call	0x428	; 0x428 <memcpy>

      // flush cache if all space used.
      if (n == space) {
    2650:	40 16       	cp	r4, r16
    2652:	51 06       	cpc	r5, r17
    2654:	09 f0       	breq	.+2      	; 0x2658 <_ZN10SdBaseFile5writeEPKvj+0x21e>
    2656:	80 c0       	rjmp	.+256    	; 0x2758 <_ZN10SdBaseFile5writeEPKvj+0x31e>
        if (!m_vol->cacheWriteData()) {
    2658:	0e 94 6e 18 	call	0x30dc	; 0x30dc <_ZN8SdVolume14cacheWriteDataEv>
    265c:	88 23       	and	r24, r24
    265e:	09 f0       	breq	.+2      	; 0x2662 <_ZN10SdBaseFile5writeEPKvj+0x228>
    2660:	7b c0       	rjmp	.+246    	; 0x2758 <_ZN10SdBaseFile5writeEPKvj+0x31e>
    2662:	ce c0       	rjmp	.+412    	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }

    } else if (!USE_MULTI_BLOCK_SD_IO || nToWrite < 1024) {
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	2f 16       	cp	r2, r31
    2668:	f4 e0       	ldi	r31, 0x04	; 4
    266a:	3f 06       	cpc	r3, r31
    266c:	00 f5       	brcc	.+64     	; 0x26ae <_ZN10SdBaseFile5writeEPKvj+0x274>
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
    266e:	80 91 c2 08 	lds	r24, 0x08C2
    2672:	90 91 c3 08 	lds	r25, 0x08C3
    2676:	a0 91 c4 08 	lds	r26, 0x08C4
    267a:	b0 91 c5 08 	lds	r27, 0x08C5
    267e:	8a 15       	cp	r24, r10
    2680:	9b 05       	cpc	r25, r11
    2682:	ac 05       	cpc	r26, r12
    2684:	bd 05       	cpc	r27, r13
    2686:	11 f4       	brne	.+4      	; 0x268c <_ZN10SdBaseFile5writeEPKvj+0x252>
        m_vol->cacheInvalidate();
    2688:	0e 94 00 18 	call	0x3000	; 0x3000 <_ZN8SdVolume15cacheInvalidateEv>
  }
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard->readBlock(block, dst);}
  bool writeBlock(uint32_t block, const uint8_t* dst) {
    return m_sdCard->writeBlock(block, dst);
    268c:	80 91 c7 08 	lds	r24, 0x08C7
    2690:	90 91 c8 08 	lds	r25, 0x08C8
    2694:	b6 01       	movw	r22, r12
    2696:	a5 01       	movw	r20, r10
    2698:	2e 81       	ldd	r18, Y+6	; 0x06
    269a:	3f 81       	ldd	r19, Y+7	; 0x07
    269c:	0e 94 93 09 	call	0x1326	; 0x1326 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!m_vol->writeBlock(block, src)) {
    26a0:	88 23       	and	r24, r24
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <_ZN10SdBaseFile5writeEPKvj+0x26c>
    26a4:	ad c0       	rjmp	.+346    	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
        DBG_FAIL_MACRO;
        goto fail;
    26a6:	41 2c       	mov	r4, r1
    26a8:	f2 e0       	ldi	r31, 0x02	; 2
    26aa:	5f 2e       	mov	r5, r31
    26ac:	55 c0       	rjmp	.+170    	; 0x2758 <_ZN10SdBaseFile5writeEPKvj+0x31e>
      }
    } else {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
    26ae:	d4 01       	movw	r26, r8
    26b0:	14 96       	adiw	r26, 0x04	; 4
    26b2:	ed 91       	ld	r30, X+
    26b4:	fc 91       	ld	r31, X
    26b6:	15 97       	sbiw	r26, 0x05	; 5
    26b8:	84 81       	ldd	r24, Z+4	; 0x04
    26ba:	81 1b       	sub	r24, r17
    26bc:	b3 2d       	mov	r27, r3
    26be:	b6 95       	lsr	r27
    26c0:	bd 83       	std	Y+5, r27	; 0x05
    26c2:	8b 17       	cp	r24, r27
    26c4:	08 f4       	brcc	.+2      	; 0x26c8 <_ZN10SdBaseFile5writeEPKvj+0x28e>
    26c6:	8d 83       	std	Y+5, r24	; 0x05
      if (nBlock > maxBlocks) nBlock = maxBlocks;

      n = 512*nBlock;
      if (!m_vol->sdCard()->writeStart(block, nBlock)) {
    26c8:	ed 81       	ldd	r30, Y+5	; 0x05
    26ca:	0e 2f       	mov	r16, r30
    26cc:	10 e0       	ldi	r17, 0x00	; 0
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	80 91 c7 08 	lds	r24, 0x08C7
    26d6:	90 91 c8 08 	lds	r25, 0x08C8
    26da:	b6 01       	movw	r22, r12
    26dc:	a5 01       	movw	r20, r10
    26de:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_ZN7Sd2Card10writeStartEmm>
    26e2:	88 23       	and	r24, r24
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <_ZN10SdBaseFile5writeEPKvj+0x2ae>
    26e6:	8c c0       	rjmp	.+280    	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
        DBG_FAIL_MACRO;
        goto fail;
    26e8:	6e 80       	ldd	r6, Y+6	; 0x06
    26ea:	7f 80       	ldd	r7, Y+7	; 0x07
    26ec:	86 01       	movw	r16, r12
    26ee:	75 01       	movw	r14, r10
    26f0:	22 c0       	rjmp	.+68     	; 0x2736 <_ZN10SdBaseFile5writeEPKvj+0x2fc>
      }
      for (uint8_t b = 0; b < nBlock; b++) {
        // invalidate cache if block is in cache
        if ((block + b) == m_vol->cacheBlockNumber()) {
    26f2:	80 91 c2 08 	lds	r24, 0x08C2
    26f6:	90 91 c3 08 	lds	r25, 0x08C3
    26fa:	a0 91 c4 08 	lds	r26, 0x08C4
    26fe:	b0 91 c5 08 	lds	r27, 0x08C5
    2702:	e8 16       	cp	r14, r24
    2704:	f9 06       	cpc	r15, r25
    2706:	0a 07       	cpc	r16, r26
    2708:	1b 07       	cpc	r17, r27
    270a:	11 f4       	brne	.+4      	; 0x2710 <_ZN10SdBaseFile5writeEPKvj+0x2d6>
          m_vol->cacheInvalidate();
    270c:	0e 94 00 18 	call	0x3000	; 0x3000 <_ZN8SdVolume15cacheInvalidateEv>
        }
        if (!m_vol->sdCard()->writeData(src + 512*b)) {
    2710:	80 91 c7 08 	lds	r24, 0x08C7
    2714:	90 91 c8 08 	lds	r25, 0x08C8
    2718:	b3 01       	movw	r22, r6
    271a:	0e 94 6d 09 	call	0x12da	; 0x12da <_ZN7Sd2Card9writeDataEPKh>
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	32 e0       	ldi	r19, 0x02	; 2
    2722:	62 0e       	add	r6, r18
    2724:	73 1e       	adc	r7, r19
    2726:	08 94       	sec
    2728:	e1 1c       	adc	r14, r1
    272a:	f1 1c       	adc	r15, r1
    272c:	01 1d       	adc	r16, r1
    272e:	11 1d       	adc	r17, r1
    2730:	88 23       	and	r24, r24
    2732:	09 f4       	brne	.+2      	; 0x2736 <_ZN10SdBaseFile5writeEPKvj+0x2fc>
    2734:	65 c0       	rjmp	.+202    	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
      n = 512*nBlock;
      if (!m_vol->sdCard()->writeStart(block, nBlock)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      for (uint8_t b = 0; b < nBlock; b++) {
    2736:	8e 2d       	mov	r24, r14
    2738:	8a 19       	sub	r24, r10
    273a:	3d 81       	ldd	r19, Y+5	; 0x05
    273c:	83 17       	cp	r24, r19
    273e:	c8 f2       	brcs	.-78     	; 0x26f2 <_ZN10SdBaseFile5writeEPKvj+0x2b8>
        if (!m_vol->sdCard()->writeData(src + 512*b)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->sdCard()->writeStop()) {
    2740:	80 91 c7 08 	lds	r24, 0x08C7
    2744:	90 91 c8 08 	lds	r25, 0x08C8
    2748:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN7Sd2Card9writeStopEv>
    274c:	88 23       	and	r24, r24
    274e:	09 f4       	brne	.+2      	; 0x2752 <_ZN10SdBaseFile5writeEPKvj+0x318>
    2750:	57 c0       	rjmp	.+174    	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) nBlock = maxBlocks;

      n = 512*nBlock;
    2752:	5d 80       	ldd	r5, Y+5	; 0x05
    2754:	55 0c       	add	r5, r5
    2756:	44 24       	eor	r4, r4
      if (!m_vol->sdCard()->writeStop()) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    2758:	92 01       	movw	r18, r4
    275a:	40 e0       	ldi	r20, 0x00	; 0
    275c:	50 e0       	ldi	r21, 0x00	; 0
    275e:	f4 01       	movw	r30, r8
    2760:	82 85       	ldd	r24, Z+10	; 0x0a
    2762:	93 85       	ldd	r25, Z+11	; 0x0b
    2764:	a4 85       	ldd	r26, Z+12	; 0x0c
    2766:	b5 85       	ldd	r27, Z+13	; 0x0d
    2768:	82 0f       	add	r24, r18
    276a:	93 1f       	adc	r25, r19
    276c:	a4 1f       	adc	r26, r20
    276e:	b5 1f       	adc	r27, r21
    2770:	82 87       	std	Z+10, r24	; 0x0a
    2772:	93 87       	std	Z+11, r25	; 0x0b
    2774:	a4 87       	std	Z+12, r26	; 0x0c
    2776:	b5 87       	std	Z+13, r27	; 0x0d
    src += n;
    2778:	2e 81       	ldd	r18, Y+6	; 0x06
    277a:	3f 81       	ldd	r19, Y+7	; 0x07
    277c:	24 0d       	add	r18, r4
    277e:	35 1d       	adc	r19, r5
    2780:	3f 83       	std	Y+7, r19	; 0x07
    2782:	2e 83       	std	Y+6, r18	; 0x06
    nToWrite -= n;
    2784:	24 18       	sub	r2, r4
    2786:	35 08       	sbc	r3, r5
    2788:	d4 01       	movw	r26, r8
    278a:	1a 96       	adiw	r26, 0x0a	; 10
    278c:	2d 91       	ld	r18, X+
    278e:	3d 91       	ld	r19, X+
    2790:	4d 91       	ld	r20, X+
    2792:	5c 91       	ld	r21, X
    2794:	1d 97       	sbiw	r26, 0x0d	; 13
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    2796:	21 14       	cp	r2, r1
    2798:	31 04       	cpc	r3, r1
    279a:	09 f0       	breq	.+2      	; 0x279e <_ZN10SdBaseFile5writeEPKvj+0x364>
    279c:	a9 ce       	rjmp	.-686    	; 0x24f0 <_ZN10SdBaseFile5writeEPKvj+0xb6>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    279e:	52 96       	adiw	r26, 0x12	; 18
    27a0:	8d 91       	ld	r24, X+
    27a2:	9d 91       	ld	r25, X+
    27a4:	0d 90       	ld	r0, X+
    27a6:	bc 91       	ld	r27, X
    27a8:	a0 2d       	mov	r26, r0
    27aa:	82 17       	cp	r24, r18
    27ac:	93 07       	cpc	r25, r19
    27ae:	a4 07       	cpc	r26, r20
    27b0:	b5 07       	cpc	r27, r21
    27b2:	48 f4       	brcc	.+18     	; 0x27c6 <_ZN10SdBaseFile5writeEPKvj+0x38c>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    27b4:	f4 01       	movw	r30, r8
    27b6:	22 8b       	std	Z+18, r18	; 0x12
    27b8:	33 8b       	std	Z+19, r19	; 0x13
    27ba:	44 8b       	std	Z+20, r20	; 0x14
    27bc:	55 8b       	std	Z+21, r21	; 0x15
    m_flags |= F_FILE_DIR_DIRTY;
    27be:	81 81       	ldd	r24, Z+1	; 0x01
    27c0:	80 68       	ori	r24, 0x80	; 128
    27c2:	81 83       	std	Z+1, r24	; 0x01
    27c4:	11 c0       	rjmp	.+34     	; 0x27e8 <_ZN10SdBaseFile5writeEPKvj+0x3ae>
  } else if (m_dateTime && nbyte) {
    27c6:	80 91 bb 06 	lds	r24, 0x06BB
    27ca:	90 91 bc 06 	lds	r25, 0x06BC
    27ce:	89 2b       	or	r24, r25
    27d0:	59 f0       	breq	.+22     	; 0x27e8 <_ZN10SdBaseFile5writeEPKvj+0x3ae>
    27d2:	28 85       	ldd	r18, Y+8	; 0x08
    27d4:	39 85       	ldd	r19, Y+9	; 0x09
    27d6:	23 2b       	or	r18, r19
    27d8:	39 f0       	breq	.+14     	; 0x27e8 <_ZN10SdBaseFile5writeEPKvj+0x3ae>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
    27da:	d4 01       	movw	r26, r8
    27dc:	11 96       	adiw	r26, 0x01	; 1
    27de:	8c 91       	ld	r24, X
    27e0:	11 97       	sbiw	r26, 0x01	; 1
    27e2:	80 68       	ori	r24, 0x80	; 128
    27e4:	11 96       	adiw	r26, 0x01	; 1
    27e6:	8c 93       	st	X, r24
  }

  if (m_flags & O_SYNC) {
    27e8:	f4 01       	movw	r30, r8
    27ea:	81 81       	ldd	r24, Z+1	; 0x01
    27ec:	83 ff       	sbrs	r24, 3
    27ee:	05 c0       	rjmp	.+10     	; 0x27fa <_ZN10SdBaseFile5writeEPKvj+0x3c0>
    if (!sync()) {
    27f0:	c4 01       	movw	r24, r8
    27f2:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN10SdBaseFile4syncEv>
    27f6:	88 23       	and	r24, r24
    27f8:	19 f0       	breq	.+6      	; 0x2800 <_ZN10SdBaseFile5writeEPKvj+0x3c6>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
    27fa:	48 85       	ldd	r20, Y+8	; 0x08
    27fc:	59 85       	ldd	r21, Y+9	; 0x09
    27fe:	05 c0       	rjmp	.+10     	; 0x280a <_ZN10SdBaseFile5writeEPKvj+0x3d0>

 fail:
  // return for write error
  writeError = true;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	d4 01       	movw	r26, r8
    2804:	8c 93       	st	X, r24
    2806:	4f ef       	ldi	r20, 0xFF	; 255
    2808:	5f ef       	ldi	r21, 0xFF	; 255
  return -1;
}
    280a:	ca 01       	movw	r24, r20
    280c:	29 96       	adiw	r28, 0x09	; 9
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	ff 90       	pop	r15
    2822:	ef 90       	pop	r14
    2824:	df 90       	pop	r13
    2826:	cf 90       	pop	r12
    2828:	bf 90       	pop	r11
    282a:	af 90       	pop	r10
    282c:	9f 90       	pop	r9
    282e:	8f 90       	pop	r8
    2830:	7f 90       	pop	r7
    2832:	6f 90       	pop	r6
    2834:	5f 90       	pop	r5
    2836:	4f 90       	pop	r4
    2838:	3f 90       	pop	r3
    283a:	2f 90       	pop	r2
    283c:	08 95       	ret
  if (!isFile() || !(m_flags & O_WRITE)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND) && m_curPosition != m_fileSize) {
    283e:	82 fd       	sbrc	r24, 2
    2840:	27 ce       	rjmp	.-946    	; 0x2490 <_ZN10SdBaseFile5writeEPKvj+0x56>
    2842:	3a ce       	rjmp	.-908    	; 0x24b8 <_ZN10SdBaseFile5writeEPKvj+0x7e>

00002844 <_ZN10SdBaseFile13addDirClusterEv>:
  return false;
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
cache_t* SdBaseFile::addDirCluster() {
    2844:	9f 92       	push	r9
    2846:	af 92       	push	r10
    2848:	bf 92       	push	r11
    284a:	cf 92       	push	r12
    284c:	df 92       	push	r13
    284e:	ef 92       	push	r14
    2850:	ff 92       	push	r15
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	8c 01       	movw	r16, r24
  uint32_t block;
  cache_t* pc;
  // max folder size
  if (m_fileSize/sizeof(dir_t) >= 0XFFFF) {
    285c:	fc 01       	movw	r30, r24
    285e:	82 89       	ldd	r24, Z+18	; 0x12
    2860:	93 89       	ldd	r25, Z+19	; 0x13
    2862:	a4 89       	ldd	r26, Z+20	; 0x14
    2864:	b5 89       	ldd	r27, Z+21	; 0x15
    2866:	80 5e       	subi	r24, 0xE0	; 224
    2868:	9f 4f       	sbci	r25, 0xFF	; 255
    286a:	af 41       	sbci	r26, 0x1F	; 31
    286c:	b0 40       	sbci	r27, 0x00	; 0
    286e:	08 f0       	brcs	.+2      	; 0x2872 <_ZN10SdBaseFile13addDirClusterEv+0x2e>
    2870:	5c c0       	rjmp	.+184    	; 0x292a <_ZN10SdBaseFile13addDirClusterEv+0xe6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    2872:	c8 01       	movw	r24, r16
    2874:	0e 94 f6 11 	call	0x23ec	; 0x23ec <_ZN10SdBaseFile10addClusterEv>
    2878:	88 23       	and	r24, r24
    287a:	09 f4       	brne	.+2      	; 0x287e <_ZN10SdBaseFile13addDirClusterEv+0x3a>
    287c:	56 c0       	rjmp	.+172    	; 0x292a <_ZN10SdBaseFile13addDirClusterEv+0xe6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterStartBlock(m_curCluster);
    287e:	d8 01       	movw	r26, r16
    2880:	16 96       	adiw	r26, 0x06	; 6
    2882:	4d 91       	ld	r20, X+
    2884:	5d 91       	ld	r21, X+
    2886:	6d 91       	ld	r22, X+
    2888:	7c 91       	ld	r23, X
    288a:	19 97       	sbiw	r26, 0x09	; 9
    288c:	14 96       	adiw	r26, 0x04	; 4
    288e:	8d 91       	ld	r24, X+
    2890:	9c 91       	ld	r25, X
    2892:	15 97       	sbiw	r26, 0x05	; 5
    2894:	0e 94 0f 18 	call	0x301e	; 0x301e <_ZNK8SdVolume17clusterStartBlockEm>
    2898:	5b 01       	movw	r10, r22
    289a:	6c 01       	movw	r12, r24
  pc = m_vol->cacheFetch(block, SdVolume::CACHE_RESERVE_FOR_WRITE);
    289c:	45 e0       	ldi	r20, 0x05	; 5
    289e:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN8SdVolume10cacheFetchEmh>
    28a2:	ec 01       	movw	r28, r24
  if (!pc) {
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	09 f4       	brne	.+2      	; 0x28aa <_ZN10SdBaseFile13addDirClusterEv+0x66>
    28a8:	42 c0       	rjmp	.+132    	; 0x292e <_ZN10SdBaseFile13addDirClusterEv+0xea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	92 e0       	ldi	r25, 0x02	; 2
    28ae:	fe 01       	movw	r30, r28
    28b0:	9c 01       	movw	r18, r24
    28b2:	11 92       	st	Z+, r1
    28b4:	21 50       	subi	r18, 0x01	; 1
    28b6:	30 40       	sbci	r19, 0x00	; 0
    28b8:	e1 f7       	brne	.-8      	; 0x28b2 <_ZN10SdBaseFile13addDirClusterEv+0x6e>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
    if (!m_vol->writeBlock(block + i, pc->data)) {
    28ba:	9c 2e       	mov	r9, r28
    28bc:	ed 2e       	mov	r14, r29
    28be:	ff 24       	eor	r15, r15
    28c0:	f3 94       	inc	r15
    28c2:	11 c0       	rjmp	.+34     	; 0x28e6 <_ZN10SdBaseFile13addDirClusterEv+0xa2>
    28c4:	b6 01       	movw	r22, r12
    28c6:	a5 01       	movw	r20, r10
    28c8:	4f 0d       	add	r20, r15
    28ca:	51 1d       	adc	r21, r1
    28cc:	61 1d       	adc	r22, r1
    28ce:	71 1d       	adc	r23, r1
    28d0:	80 91 c7 08 	lds	r24, 0x08C7
    28d4:	90 91 c8 08 	lds	r25, 0x08C8
    28d8:	29 2d       	mov	r18, r9
    28da:	3e 2d       	mov	r19, r14
    28dc:	0e 94 93 09 	call	0x1326	; 0x1326 <_ZN7Sd2Card10writeBlockEmPKh>
    28e0:	88 23       	and	r24, r24
    28e2:	19 f1       	breq	.+70     	; 0x292a <_ZN10SdBaseFile13addDirClusterEv+0xe6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
    28e4:	f3 94       	inc	r15
  bool init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
  bool init(Sd2Card* dev, uint8_t part);

  // inline functions that return volume info
  /** \return The volume's cluster size in blocks. */
  uint8_t blocksPerCluster() const {return m_blocksPerCluster;}
    28e6:	d8 01       	movw	r26, r16
    28e8:	14 96       	adiw	r26, 0x04	; 4
    28ea:	ed 91       	ld	r30, X+
    28ec:	fc 91       	ld	r31, X
    28ee:	15 97       	sbiw	r26, 0x05	; 5
    28f0:	24 81       	ldd	r18, Z+4	; 0x04
    28f2:	f2 16       	cp	r15, r18
    28f4:	38 f3       	brcs	.-50     	; 0x28c4 <_ZN10SdBaseFile13addDirClusterEv+0x80>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Increase directory file size by cluster size
  m_fileSize += 512UL*m_vol->blocksPerCluster();
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	50 e0       	ldi	r21, 0x00	; 0
    28fc:	89 e0       	ldi	r24, 0x09	; 9
    28fe:	22 0f       	add	r18, r18
    2900:	33 1f       	adc	r19, r19
    2902:	44 1f       	adc	r20, r20
    2904:	55 1f       	adc	r21, r21
    2906:	8a 95       	dec	r24
    2908:	d1 f7       	brne	.-12     	; 0x28fe <_ZN10SdBaseFile13addDirClusterEv+0xba>
    290a:	52 96       	adiw	r26, 0x12	; 18
    290c:	8d 91       	ld	r24, X+
    290e:	9d 91       	ld	r25, X+
    2910:	0d 90       	ld	r0, X+
    2912:	bc 91       	ld	r27, X
    2914:	a0 2d       	mov	r26, r0
    2916:	82 0f       	add	r24, r18
    2918:	93 1f       	adc	r25, r19
    291a:	a4 1f       	adc	r26, r20
    291c:	b5 1f       	adc	r27, r21
    291e:	f8 01       	movw	r30, r16
    2920:	82 8b       	std	Z+18, r24	; 0x12
    2922:	93 8b       	std	Z+19, r25	; 0x13
    2924:	a4 8b       	std	Z+20, r26	; 0x14
    2926:	b5 8b       	std	Z+21, r27	; 0x15
    2928:	02 c0       	rjmp	.+4      	; 0x292e <_ZN10SdBaseFile13addDirClusterEv+0xea>
  return pc;
    292a:	c0 e0       	ldi	r28, 0x00	; 0
    292c:	d0 e0       	ldi	r29, 0x00	; 0

 fail:
  return 0;
}
    292e:	ce 01       	movw	r24, r28
    2930:	df 91       	pop	r29
    2932:	cf 91       	pop	r28
    2934:	1f 91       	pop	r17
    2936:	0f 91       	pop	r16
    2938:	ff 90       	pop	r15
    293a:	ef 90       	pop	r14
    293c:	df 90       	pop	r13
    293e:	cf 90       	pop	r12
    2940:	bf 90       	pop	r11
    2942:	af 90       	pop	r10
    2944:	9f 90       	pop	r9
    2946:	08 95       	ret

00002948 <_ZN10SdBaseFile4openEPS_PKhh>:
  return false;
}
//------------------------------------------------------------------------------
// open with filename in dname
bool SdBaseFile::open(SdBaseFile* dirFile,
  const uint8_t dname[11], uint8_t oflag) {
    2948:	3f 92       	push	r3
    294a:	4f 92       	push	r4
    294c:	5f 92       	push	r5
    294e:	6f 92       	push	r6
    2950:	7f 92       	push	r7
    2952:	8f 92       	push	r8
    2954:	9f 92       	push	r9
    2956:	af 92       	push	r10
    2958:	bf 92       	push	r11
    295a:	cf 92       	push	r12
    295c:	df 92       	push	r13
    295e:	ef 92       	push	r14
    2960:	ff 92       	push	r15
    2962:	0f 93       	push	r16
    2964:	1f 93       	push	r17
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	4c 01       	movw	r8, r24
    296c:	eb 01       	movw	r28, r22
    296e:	44 2e       	mov	r4, r20
    2970:	35 2e       	mov	r3, r21
    2972:	52 2e       	mov	r5, r18
  bool emptyFound = false;
  bool fileFound = false;
  uint8_t index;
  dir_t* p;

  m_vol = dirFile->m_vol;
    2974:	8c 81       	ldd	r24, Y+4	; 0x04
    2976:	9d 81       	ldd	r25, Y+5	; 0x05
    2978:	f4 01       	movw	r30, r8
    297a:	95 83       	std	Z+5, r25	; 0x05
    297c:	84 83       	std	Z+4, r24	; 0x04
  int read(void* buf, size_t nbyte);
  int8_t readDir(dir_t* dir);
  static bool remove(SdBaseFile* dirFile, const char* path);
  bool remove();
  /** Set the file's current position to zero. */
  void rewind() {seekSet(0);}
    297e:	cb 01       	movw	r24, r22
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	50 e0       	ldi	r21, 0x00	; 0
    2984:	60 e0       	ldi	r22, 0x00	; 0
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN10SdBaseFile7seekSetEm>
    298c:	77 24       	eor	r7, r7
    298e:	4f c0       	rjmp	.+158    	; 0x2a2e <_ZN10SdBaseFile4openEPS_PKhh+0xe6>
  dirFile->rewind();
  // search for file

  while (dirFile->m_curPosition < dirFile->m_fileSize) {
    // Cache directory block.
    if (dirFile->read() < 0) {
    2990:	ce 01       	movw	r24, r28
    2992:	0e 94 dd 11 	call	0x23ba	; 0x23ba <_ZN10SdBaseFile4readEv>
    2996:	97 fd       	sbrc	r25, 7
    2998:	ab c0       	rjmp	.+342    	; 0x2af0 <_ZN10SdBaseFile4openEPS_PKhh+0x1a8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Position to to next block
    dirFile->m_curPosition += 511;
    299a:	8a 85       	ldd	r24, Y+10	; 0x0a
    299c:	9b 85       	ldd	r25, Y+11	; 0x0b
    299e:	ac 85       	ldd	r26, Y+12	; 0x0c
    29a0:	bd 85       	ldd	r27, Y+13	; 0x0d
    29a2:	81 50       	subi	r24, 0x01	; 1
    29a4:	9e 4f       	sbci	r25, 0xFE	; 254
    29a6:	af 4f       	sbci	r26, 0xFF	; 255
    29a8:	bf 4f       	sbci	r27, 0xFF	; 255
    29aa:	8a 87       	std	Y+10, r24	; 0x0a
    29ac:	9b 87       	std	Y+11, r25	; 0x0b
    29ae:	ac 87       	std	Y+12, r26	; 0x0c
    29b0:	bd 87       	std	Y+13, r27	; 0x0d
#endif  // USE_SEPARATE_FAT_CACHE
  static Sd2Card* m_sdCard;            // Sd2Card object for cache
#endif  // USE_MULTIPLE_CARDS

  cache_t *cacheAddress() {return &m_cacheBuffer;}
  uint32_t cacheBlockNumber() {return m_cacheBlockNumber;}
    29b2:	a0 90 c2 08 	lds	r10, 0x08C2
    29b6:	b0 90 c3 08 	lds	r11, 0x08C3
    29ba:	c0 90 c4 08 	lds	r12, 0x08C4
    29be:	d0 90 c5 08 	lds	r13, 0x08C5
    29c2:	22 ec       	ldi	r18, 0xC2	; 194
    29c4:	e2 2e       	mov	r14, r18
    29c6:	26 e0       	ldi	r18, 0x06	; 6
    29c8:	f2 2e       	mov	r15, r18
    29ca:	00 e0       	ldi	r16, 0x00	; 0
    29cc:	10 e0       	ldi	r17, 0x00	; 0
    29ce:	60 2e       	mov	r6, r16

    for (index = 0; index < 16; index++) {
      p = &m_vol->cacheAddress()->dir[index];
      if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    29d0:	f7 01       	movw	r30, r14
    29d2:	80 81       	ld	r24, Z
    29d4:	88 23       	and	r24, r24
    29d6:	11 f0       	breq	.+4      	; 0x29dc <_ZN10SdBaseFile4openEPS_PKhh+0x94>
    29d8:	85 3e       	cpi	r24, 0xE5	; 229
    29da:	79 f4       	brne	.+30     	; 0x29fa <_ZN10SdBaseFile4openEPS_PKhh+0xb2>
        // remember first empty slot
        if (!emptyFound) {
    29dc:	77 20       	and	r7, r7
    29de:	41 f4       	brne	.+16     	; 0x29f0 <_ZN10SdBaseFile4openEPS_PKhh+0xa8>
          m_dirBlock = m_vol->cacheBlockNumber();
    29e0:	f4 01       	movw	r30, r8
    29e2:	a6 86       	std	Z+14, r10	; 0x0e
    29e4:	b7 86       	std	Z+15, r11	; 0x0f
    29e6:	c0 8a       	std	Z+16, r12	; 0x10
    29e8:	d1 8a       	std	Z+17, r13	; 0x11
          m_dirIndex = index;
    29ea:	63 82       	std	Z+3, r6	; 0x03
    29ec:	77 24       	eor	r7, r7
    29ee:	73 94       	inc	r7
          emptyFound = true;
        }
        // done if no entries follow
        if (p->name[0] == DIR_NAME_FREE) {
    29f0:	f7 01       	movw	r30, r14
    29f2:	80 81       	ld	r24, Z
    29f4:	88 23       	and	r24, r24
    29f6:	91 f4       	brne	.+36     	; 0x2a1c <_ZN10SdBaseFile4openEPS_PKhh+0xd4>
    29f8:	28 c0       	rjmp	.+80     	; 0x2a4a <_ZN10SdBaseFile4openEPS_PKhh+0x102>
          goto done;
        }
      } else if (!memcmp(dname, p->name, 11)) {
    29fa:	b8 01       	movw	r22, r16
    29fc:	95 e0       	ldi	r25, 0x05	; 5
    29fe:	66 0f       	add	r22, r22
    2a00:	77 1f       	adc	r23, r23
    2a02:	9a 95       	dec	r25
    2a04:	e1 f7       	brne	.-8      	; 0x29fe <_ZN10SdBaseFile4openEPS_PKhh+0xb6>
    2a06:	6e 53       	subi	r22, 0x3E	; 62
    2a08:	79 4f       	sbci	r23, 0xF9	; 249
    2a0a:	84 2d       	mov	r24, r4
    2a0c:	93 2d       	mov	r25, r3
    2a0e:	4b e0       	ldi	r20, 0x0B	; 11
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	0e 94 07 02 	call	0x40e	; 0x40e <memcmp>
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <_ZN10SdBaseFile4openEPS_PKhh+0xd4>
    2a1a:	7d c0       	rjmp	.+250    	; 0x2b16 <_ZN10SdBaseFile4openEPS_PKhh+0x1ce>
    2a1c:	0f 5f       	subi	r16, 0xFF	; 255
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a20:	80 e2       	ldi	r24, 0x20	; 32
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	e8 0e       	add	r14, r24
    2a26:	f9 1e       	adc	r15, r25
      goto fail;
    }
    // Position to to next block
    dirFile->m_curPosition += 511;

    for (index = 0; index < 16; index++) {
    2a28:	00 31       	cpi	r16, 0x10	; 16
    2a2a:	11 05       	cpc	r17, r1
    2a2c:	81 f6       	brne	.-96     	; 0x29ce <_ZN10SdBaseFile4openEPS_PKhh+0x86>
  m_vol = dirFile->m_vol;

  dirFile->rewind();
  // search for file

  while (dirFile->m_curPosition < dirFile->m_fileSize) {
    2a2e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a30:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a32:	4c 85       	ldd	r20, Y+12	; 0x0c
    2a34:	5d 85       	ldd	r21, Y+13	; 0x0d
    2a36:	8a 89       	ldd	r24, Y+18	; 0x12
    2a38:	9b 89       	ldd	r25, Y+19	; 0x13
    2a3a:	ac 89       	ldd	r26, Y+20	; 0x14
    2a3c:	bd 89       	ldd	r27, Y+21	; 0x15
    2a3e:	28 17       	cp	r18, r24
    2a40:	39 07       	cpc	r19, r25
    2a42:	4a 07       	cpc	r20, r26
    2a44:	5b 07       	cpc	r21, r27
    2a46:	08 f4       	brcc	.+2      	; 0x2a4a <_ZN10SdBaseFile4openEPS_PKhh+0x102>
    2a48:	a3 cf       	rjmp	.-186    	; 0x2990 <_ZN10SdBaseFile4openEPS_PKhh+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create unless O_CREAT and O_WRITE
    if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
    2a4a:	56 fe       	sbrs	r5, 6
    2a4c:	51 c0       	rjmp	.+162    	; 0x2af0 <_ZN10SdBaseFile4openEPS_PKhh+0x1a8>
    2a4e:	51 fe       	sbrs	r5, 1
    2a50:	4f c0       	rjmp	.+158    	; 0x2af0 <_ZN10SdBaseFile4openEPS_PKhh+0x1a8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (emptyFound) {
    2a52:	77 20       	and	r7, r7
    2a54:	51 f0       	breq	.+20     	; 0x2a6a <_ZN10SdBaseFile4openEPS_PKhh+0x122>
      index = m_dirIndex;
    2a56:	f4 01       	movw	r30, r8
    2a58:	63 80       	ldd	r6, Z+3	; 0x03
      p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    2a5a:	c4 01       	movw	r24, r8
    2a5c:	61 e0       	ldi	r22, 0x01	; 1
    2a5e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <_ZN10SdBaseFile13cacheDirEntryEh>
    2a62:	ec 01       	movw	r28, r24
      if (!p) {
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	61 f4       	brne	.+24     	; 0x2a80 <_ZN10SdBaseFile4openEPS_PKhh+0x138>
    2a68:	43 c0       	rjmp	.+134    	; 0x2af0 <_ZN10SdBaseFile4openEPS_PKhh+0x1a8>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (dirFile->m_type == FAT_FILE_TYPE_ROOT_FIXED) {
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	82 30       	cpi	r24, 0x02	; 2
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <_ZN10SdBaseFile4openEPS_PKhh+0x12a>
    2a70:	3f c0       	rjmp	.+126    	; 0x2af0 <_ZN10SdBaseFile4openEPS_PKhh+0x1a8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      // add and zero cluster for dirFile - first cluster is in cache for write
      pc = dirFile->addDirCluster();
    2a72:	ce 01       	movw	r24, r28
    2a74:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN10SdBaseFile13addDirClusterEv>
      if (!pc) {
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	d1 f1       	breq	.+116    	; 0x2af0 <_ZN10SdBaseFile4openEPS_PKhh+0x1a8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      // use first entry in cluster
      p = pc->dir;
    2a7c:	ec 01       	movw	r28, r24
    2a7e:	66 24       	eor	r6, r6
      index = 0;
    }
    // initialize as empty file
    memset(p, 0, sizeof(dir_t));
    2a80:	80 e2       	ldi	r24, 0x20	; 32
    2a82:	fe 01       	movw	r30, r28
    2a84:	11 92       	st	Z+, r1
    2a86:	8a 95       	dec	r24
    2a88:	e9 f7       	brne	.-6      	; 0x2a84 <_ZN10SdBaseFile4openEPS_PKhh+0x13c>
    memcpy(p->name, dname, 11);
    2a8a:	de 01       	movw	r26, r28
    2a8c:	24 2d       	mov	r18, r4
    2a8e:	33 2d       	mov	r19, r3
    2a90:	c9 01       	movw	r24, r18
    2a92:	fc 01       	movw	r30, r24
    2a94:	8b e0       	ldi	r24, 0x0B	; 11
    2a96:	01 90       	ld	r0, Z+
    2a98:	0d 92       	st	X+, r0
    2a9a:	81 50       	subi	r24, 0x01	; 1
    2a9c:	e1 f7       	brne	.-8      	; 0x2a96 <_ZN10SdBaseFile4openEPS_PKhh+0x14e>

    // set timestamps
    if (m_dateTime) {
    2a9e:	e0 91 bb 06 	lds	r30, 0x06BB
    2aa2:	f0 91 bc 06 	lds	r31, 0x06BC
    2aa6:	30 97       	sbiw	r30, 0x00	; 0
    2aa8:	39 f0       	breq	.+14     	; 0x2ab8 <_ZN10SdBaseFile4openEPS_PKhh+0x170>
      // call user date/time function
      m_dateTime(&p->creationDate, &p->creationTime);
    2aaa:	be 01       	movw	r22, r28
    2aac:	62 5f       	subi	r22, 0xF2	; 242
    2aae:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	40 96       	adiw	r24, 0x10	; 16
    2ab4:	19 95       	eicall
    2ab6:	08 c0       	rjmp	.+16     	; 0x2ac8 <_ZN10SdBaseFile4openEPS_PKhh+0x180>
    } else {
      // use default date/time
      p->creationDate = FAT_DEFAULT_DATE;
    2ab8:	81 e2       	ldi	r24, 0x21	; 33
    2aba:	98 e2       	ldi	r25, 0x28	; 40
    2abc:	99 8b       	std	Y+17, r25	; 0x11
    2abe:	88 8b       	std	Y+16, r24	; 0x10
      p->creationTime = FAT_DEFAULT_TIME;
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	98 e0       	ldi	r25, 0x08	; 8
    2ac4:	9f 87       	std	Y+15, r25	; 0x0f
    2ac6:	8e 87       	std	Y+14, r24	; 0x0e
    }
    p->lastAccessDate = p->creationDate;
    2ac8:	88 89       	ldd	r24, Y+16	; 0x10
    2aca:	99 89       	ldd	r25, Y+17	; 0x11
    2acc:	9b 8b       	std	Y+19, r25	; 0x13
    2ace:	8a 8b       	std	Y+18, r24	; 0x12
    p->lastWriteDate = p->creationDate;
    2ad0:	99 8f       	std	Y+25, r25	; 0x19
    2ad2:	88 8f       	std	Y+24, r24	; 0x18
    p->lastWriteTime = p->creationTime;
    2ad4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ad6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ad8:	9f 8b       	std	Y+23, r25	; 0x17
    2ada:	8e 8b       	std	Y+22, r24	; 0x16

    // write entry to SD
    if (!dirFile->m_vol->cacheSync()) {
    2adc:	0e 94 29 18 	call	0x3052	; 0x3052 <_ZN8SdVolume9cacheSyncEv>
    2ae0:	88 23       	and	r24, r24
    2ae2:	31 f0       	breq	.+12     	; 0x2af0 <_ZN10SdBaseFile4openEPS_PKhh+0x1a8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // open entry in cache
  return openCachedEntry(index, oflag);
    2ae4:	c4 01       	movw	r24, r8
    2ae6:	66 2d       	mov	r22, r6
    2ae8:	45 2d       	mov	r20, r5
    2aea:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <_ZN10SdBaseFile15openCachedEntryEhh>
    2aee:	01 c0       	rjmp	.+2      	; 0x2af2 <_ZN10SdBaseFile4openEPS_PKhh+0x1aa>
    2af0:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	1f 91       	pop	r17
    2af8:	0f 91       	pop	r16
    2afa:	ff 90       	pop	r15
    2afc:	ef 90       	pop	r14
    2afe:	df 90       	pop	r13
    2b00:	cf 90       	pop	r12
    2b02:	bf 90       	pop	r11
    2b04:	af 90       	pop	r10
    2b06:	9f 90       	pop	r9
    2b08:	8f 90       	pop	r8
    2b0a:	7f 90       	pop	r7
    2b0c:	6f 90       	pop	r6
    2b0e:	5f 90       	pop	r5
    2b10:	4f 90       	pop	r4
    2b12:	3f 90       	pop	r3
    2b14:	08 95       	ret
  }
 done:

  if (fileFound) {
    // don't open existing file if O_EXCL
    if (oflag & O_EXCL) {
    2b16:	57 fe       	sbrs	r5, 7
    2b18:	e5 cf       	rjmp	.-54     	; 0x2ae4 <_ZN10SdBaseFile4openEPS_PKhh+0x19c>
    2b1a:	ea cf       	rjmp	.-44     	; 0x2af0 <_ZN10SdBaseFile4openEPS_PKhh+0x1a8>

00002b1c <_ZN10SdBaseFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this file is already open, \a dirFile is not
 * a directory, \a path is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
bool SdBaseFile::open(SdBaseFile* dirFile, const char* path, uint8_t oflag) {
    2b1c:	2f 92       	push	r2
    2b1e:	3f 92       	push	r3
    2b20:	4f 92       	push	r4
    2b22:	5f 92       	push	r5
    2b24:	6f 92       	push	r6
    2b26:	7f 92       	push	r7
    2b28:	8f 92       	push	r8
    2b2a:	9f 92       	push	r9
    2b2c:	af 92       	push	r10
    2b2e:	bf 92       	push	r11
    2b30:	cf 92       	push	r12
    2b32:	df 92       	push	r13
    2b34:	ef 92       	push	r14
    2b36:	ff 92       	push	r15
    2b38:	0f 93       	push	r16
    2b3a:	1f 93       	push	r17
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	c4 54       	subi	r28, 0x44	; 68
    2b46:	d0 40       	sbci	r29, 0x00	; 0
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	de bf       	out	0x3e, r29	; 62
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	cd bf       	out	0x3d, r28	; 61
    2b52:	4c 01       	movw	r8, r24
    2b54:	6b 01       	movw	r12, r22
    2b56:	de 01       	movw	r26, r28
    2b58:	a0 5c       	subi	r26, 0xC0	; 192
    2b5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b5c:	11 96       	adiw	r26, 0x01	; 1
    2b5e:	5c 93       	st	X, r21
    2b60:	4e 93       	st	-X, r20
    2b62:	23 96       	adiw	r28, 0x03	; 3
    2b64:	2f af       	std	Y+63, r18	; 0x3f
    2b66:	23 97       	sbiw	r28, 0x03	; 3
  uint8_t dname[11];
  SdBaseFile dir1, dir2;
  SdBaseFile *parent = dirFile;
  SdBaseFile *sub = &dir1;

  if (!dirFile) {
    2b68:	61 15       	cp	r22, r1
    2b6a:	71 05       	cpc	r23, r1
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <_ZN10SdBaseFile4openEPS_PKch+0x54>
    2b6e:	8a c0       	rjmp	.+276    	; 0x2c84 <_ZN10SdBaseFile4openEPS_PKch+0x168>
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), m_type(FAT_FILE_TYPE_CLOSED) {}
    2b70:	1e 86       	std	Y+14, r1	; 0x0e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // error if already open
  if (isOpen()) {
    2b72:	18 a6       	std	Y+40, r1	; 0x28
    2b74:	fc 01       	movw	r30, r24
    2b76:	82 81       	ldd	r24, Z+2	; 0x02
    2b78:	88 23       	and	r24, r24
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <_ZN10SdBaseFile4openEPS_PKch+0x62>
    2b7c:	83 c0       	rjmp	.+262    	; 0x2c84 <_ZN10SdBaseFile4openEPS_PKch+0x168>
    2b7e:	1c 86       	std	Y+12, r1	; 0x0c
    2b80:	1e a2       	std	Y+38, r1	; 0x26
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (*path == '/') {
    2b82:	fa 01       	movw	r30, r20
    2b84:	80 81       	ld	r24, Z
    2b86:	8f 32       	cpi	r24, 0x2F	; 47
    2b88:	f1 f0       	breq	.+60     	; 0x2bc6 <_ZN10SdBaseFile4openEPS_PKch+0xaa>
    2b8a:	86 01       	movw	r16, r12
    2b8c:	5c e0       	ldi	r21, 0x0C	; 12
    2b8e:	e5 2e       	mov	r14, r21
    2b90:	f1 2c       	mov	r15, r1
    2b92:	ec 0e       	add	r14, r28
    2b94:	fd 1e       	adc	r15, r29
      }
      parent = &dir2;
    }
  }
  while (1) {
    if (!make83Name(path, dname, &path)) {
    2b96:	40 e4       	ldi	r20, 0x40	; 64
    2b98:	a4 2e       	mov	r10, r20
    2b9a:	b1 2c       	mov	r11, r1
    2b9c:	ac 0e       	add	r10, r28
    2b9e:	bd 1e       	adc	r11, r29
    2ba0:	3e 01       	movw	r6, r28
    2ba2:	08 94       	sec
    2ba4:	61 1c       	adc	r6, r1
    2ba6:	71 1c       	adc	r7, r1
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (parent != dirFile) parent->close();
    parent = sub;
    sub = parent != &dir1 ? &dir1 : &dir2;
    2ba8:	25 96       	adiw	r28, 0x05	; 5
    2baa:	ff ae       	std	Y+63, r15	; 0x3f
    2bac:	ee ae       	std	Y+62, r14	; 0x3e
    2bae:	25 97       	sbiw	r28, 0x05	; 5
    2bb0:	36 e2       	ldi	r19, 0x26	; 38
    2bb2:	23 2e       	mov	r2, r19
    2bb4:	31 2c       	mov	r3, r1
    2bb6:	2c 0e       	add	r2, r28
    2bb8:	3d 1e       	adc	r3, r29
    while (*path == '/') path++;
    if (*path == 0) return openRoot(dirFile->m_vol);
    if (!dirFile->isRoot()) {
      if (!dir2.openRoot(dirFile->m_vol)) {
        DBG_FAIL_MACRO;
        goto fail;
    2bba:	27 01       	movw	r4, r14
    2bbc:	2b c0       	rjmp	.+86     	; 0x2c14 <_ZN10SdBaseFile4openEPS_PKch+0xf8>
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (*path == '/') {
    while (*path == '/') path++;
    2bbe:	11 96       	adiw	r26, 0x01	; 1
    2bc0:	b1 83       	std	Z+1, r27	; 0x01
    2bc2:	a0 83       	st	Z, r26
    2bc4:	01 c0       	rjmp	.+2      	; 0x2bc8 <_ZN10SdBaseFile4openEPS_PKch+0xac>
    2bc6:	fd 01       	movw	r30, r26
    2bc8:	a0 81       	ld	r26, Z
    2bca:	b1 81       	ldd	r27, Z+1	; 0x01
    2bcc:	8c 91       	ld	r24, X
    2bce:	8f 32       	cpi	r24, 0x2F	; 47
    2bd0:	b1 f3       	breq	.-20     	; 0x2bbe <_ZN10SdBaseFile4openEPS_PKch+0xa2>
    if (*path == 0) return openRoot(dirFile->m_vol);
    2bd2:	88 23       	and	r24, r24
    2bd4:	49 f4       	brne	.+18     	; 0x2be8 <_ZN10SdBaseFile4openEPS_PKch+0xcc>
    2bd6:	d6 01       	movw	r26, r12
    2bd8:	14 96       	adiw	r26, 0x04	; 4
    2bda:	6d 91       	ld	r22, X+
    2bdc:	7c 91       	ld	r23, X
    2bde:	15 97       	sbiw	r26, 0x05	; 5
    2be0:	c4 01       	movw	r24, r8
    2be2:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN10SdBaseFile8openRootEP8SdVolume>
    2be6:	4f c0       	rjmp	.+158    	; 0x2c86 <_ZN10SdBaseFile4openEPS_PKch+0x16a>
    if (!dirFile->isRoot()) {
    2be8:	f6 01       	movw	r30, r12
    2bea:	82 81       	ldd	r24, Z+2	; 0x02
    2bec:	82 50       	subi	r24, 0x02	; 2
    2bee:	82 30       	cpi	r24, 0x02	; 2
    2bf0:	60 f2       	brcs	.-104    	; 0x2b8a <_ZN10SdBaseFile4openEPS_PKch+0x6e>
      if (!dir2.openRoot(dirFile->m_vol)) {
    2bf2:	8e 01       	movw	r16, r28
    2bf4:	0a 5d       	subi	r16, 0xDA	; 218
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	64 81       	ldd	r22, Z+4	; 0x04
    2bfa:	75 81       	ldd	r23, Z+5	; 0x05
    2bfc:	c8 01       	movw	r24, r16
    2bfe:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN10SdBaseFile8openRootEP8SdVolume>
    2c02:	88 23       	and	r24, r24
    2c04:	19 f6       	brne	.-122    	; 0x2b8c <_ZN10SdBaseFile4openEPS_PKch+0x70>
    2c06:	3e c0       	rjmp	.+124    	; 0x2c84 <_ZN10SdBaseFile4openEPS_PKch+0x168>
        DBG_FAIL_MACRO;
        goto fail;
    2c08:	34 2d       	mov	r19, r4
    2c0a:	25 2d       	mov	r18, r5
    2c0c:	87 01       	movw	r16, r14
    2c0e:	83 2f       	mov	r24, r19
    2c10:	92 2f       	mov	r25, r18
    2c12:	7c 01       	movw	r14, r24
      }
      parent = &dir2;
    }
  }
  while (1) {
    if (!make83Name(path, dname, &path)) {
    2c14:	d5 01       	movw	r26, r10
    2c16:	8d 91       	ld	r24, X+
    2c18:	9c 91       	ld	r25, X
    2c1a:	b3 01       	movw	r22, r6
    2c1c:	a5 01       	movw	r20, r10
    2c1e:	0e 94 38 0c 	call	0x1870	; 0x1870 <_ZN10SdBaseFile10make83NameEPKcPhPS1_>
    2c22:	88 23       	and	r24, r24
    2c24:	29 f4       	brne	.+10     	; 0x2c30 <_ZN10SdBaseFile4openEPS_PKch+0x114>
    2c26:	2e c0       	rjmp	.+92     	; 0x2c84 <_ZN10SdBaseFile4openEPS_PKch+0x168>
      DBG_FAIL_MACRO;
      goto fail;
    }
    while (*path == '/') path++;
    2c28:	31 96       	adiw	r30, 0x01	; 1
    2c2a:	d5 01       	movw	r26, r10
    2c2c:	ed 93       	st	X+, r30
    2c2e:	fc 93       	st	X, r31
    2c30:	d5 01       	movw	r26, r10
    2c32:	ed 91       	ld	r30, X+
    2c34:	fc 91       	ld	r31, X
    2c36:	80 81       	ld	r24, Z
    2c38:	8f 32       	cpi	r24, 0x2F	; 47
    2c3a:	b1 f3       	breq	.-20     	; 0x2c28 <_ZN10SdBaseFile4openEPS_PKch+0x10c>
    if (!*path) break;
    2c3c:	88 23       	and	r24, r24
    2c3e:	c9 f0       	breq	.+50     	; 0x2c72 <_ZN10SdBaseFile4openEPS_PKch+0x156>
    if (!sub->open(parent, dname, O_READ)) {
    2c40:	c7 01       	movw	r24, r14
    2c42:	b8 01       	movw	r22, r16
    2c44:	a3 01       	movw	r20, r6
    2c46:	21 e0       	ldi	r18, 0x01	; 1
    2c48:	0e 94 a4 14 	call	0x2948	; 0x2948 <_ZN10SdBaseFile4openEPS_PKhh>
    2c4c:	88 23       	and	r24, r24
    2c4e:	d1 f0       	breq	.+52     	; 0x2c84 <_ZN10SdBaseFile4openEPS_PKch+0x168>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (parent != dirFile) parent->close();
    2c50:	0c 15       	cp	r16, r12
    2c52:	1d 05       	cpc	r17, r13
    2c54:	19 f0       	breq	.+6      	; 0x2c5c <_ZN10SdBaseFile4openEPS_PKch+0x140>
    2c56:	c8 01       	movw	r24, r16
    2c58:	0e 94 34 10 	call	0x2068	; 0x2068 <_ZN10SdBaseFile5closeEv>
    parent = sub;
    sub = parent != &dir1 ? &dir1 : &dir2;
    2c5c:	25 96       	adiw	r28, 0x05	; 5
    2c5e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c60:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c62:	25 97       	sbiw	r28, 0x05	; 5
    2c64:	ee 16       	cp	r14, r30
    2c66:	ff 06       	cpc	r15, r31
    2c68:	79 f6       	brne	.-98     	; 0x2c08 <_ZN10SdBaseFile4openEPS_PKch+0xec>
    2c6a:	c1 01       	movw	r24, r2
    2c6c:	32 2d       	mov	r19, r2
    2c6e:	29 2f       	mov	r18, r25
    2c70:	cd cf       	rjmp	.-102    	; 0x2c0c <_ZN10SdBaseFile4openEPS_PKch+0xf0>
  }
  return open(parent, dname, oflag);
    2c72:	c4 01       	movw	r24, r8
    2c74:	b8 01       	movw	r22, r16
    2c76:	a3 01       	movw	r20, r6
    2c78:	23 96       	adiw	r28, 0x03	; 3
    2c7a:	2f ad       	ldd	r18, Y+63	; 0x3f
    2c7c:	23 97       	sbiw	r28, 0x03	; 3
    2c7e:	0e 94 a4 14 	call	0x2948	; 0x2948 <_ZN10SdBaseFile4openEPS_PKhh>
    2c82:	01 c0       	rjmp	.+2      	; 0x2c86 <_ZN10SdBaseFile4openEPS_PKch+0x16a>
    2c84:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    2c86:	cc 5b       	subi	r28, 0xBC	; 188
    2c88:	df 4f       	sbci	r29, 0xFF	; 255
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	de bf       	out	0x3e, r29	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	cd bf       	out	0x3d, r28	; 61
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	1f 91       	pop	r17
    2c9a:	0f 91       	pop	r16
    2c9c:	ff 90       	pop	r15
    2c9e:	ef 90       	pop	r14
    2ca0:	df 90       	pop	r13
    2ca2:	cf 90       	pop	r12
    2ca4:	bf 90       	pop	r11
    2ca6:	af 90       	pop	r10
    2ca8:	9f 90       	pop	r9
    2caa:	8f 90       	pop	r8
    2cac:	7f 90       	pop	r7
    2cae:	6f 90       	pop	r6
    2cb0:	5f 90       	pop	r5
    2cb2:	4f 90       	pop	r4
    2cb4:	3f 90       	pop	r3
    2cb6:	2f 90       	pop	r2
    2cb8:	08 95       	ret

00002cba <_ZN10SdBaseFile6removeEPS_PKc>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is a directory, is read only,
 * \a dirFile is not a directory, \a path is not found
 * or an I/O error occurred.
 */
bool SdBaseFile::remove(SdBaseFile* dirFile, const char* path) {
    2cba:	0f 93       	push	r16
    2cbc:	1f 93       	push	r17
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	6a 97       	sbiw	r28, 0x1a	; 26
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	9c 01       	movw	r18, r24
    2cd4:	ab 01       	movw	r20, r22
    2cd6:	19 82       	std	Y+1, r1	; 0x01
    2cd8:	1b 82       	std	Y+3, r1	; 0x03
  SdBaseFile file;
  if (!file.open(dirFile, path, O_WRITE)) {
    2cda:	8e 01       	movw	r16, r28
    2cdc:	0f 5f       	subi	r16, 0xFF	; 255
    2cde:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce0:	c8 01       	movw	r24, r16
    2ce2:	b9 01       	movw	r22, r18
    2ce4:	22 e0       	ldi	r18, 0x02	; 2
    2ce6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <_ZN10SdBaseFile4openEPS_PKch>
    2cea:	88 23       	and	r24, r24
    2cec:	19 f0       	breq	.+6      	; 0x2cf4 <_ZN10SdBaseFile6removeEPS_PKc+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
    2cee:	c8 01       	movw	r24, r16
    2cf0:	0e 94 3e 10 	call	0x207c	; 0x207c <_ZN10SdBaseFile6removeEv>

 fail:
  return false;
}
    2cf4:	6a 96       	adiw	r28, 0x1a	; 26
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	1f 91       	pop	r17
    2d06:	0f 91       	pop	r16
    2d08:	08 95       	ret

00002d0a <_ZN10SdBaseFile16createContiguousEPS_PKcm>:
 * a file is already open, the file already exists, the root
 * directory is full or an I/O error.
 *
 */
bool SdBaseFile::createContiguous(SdBaseFile* dirFile,
        const char* path, uint32_t size) {
    2d0a:	ef 92       	push	r14
    2d0c:	ff 92       	push	r15
    2d0e:	0f 93       	push	r16
    2d10:	1f 93       	push	r17
    2d12:	cf 93       	push	r28
    2d14:	df 93       	push	r29
    2d16:	ec 01       	movw	r28, r24
    2d18:	78 01       	movw	r14, r16
    2d1a:	89 01       	movw	r16, r18
  uint32_t count;
  // don't allow zero length file
  if (size == 0) {
    2d1c:	e1 14       	cp	r14, r1
    2d1e:	f1 04       	cpc	r15, r1
    2d20:	01 05       	cpc	r16, r1
    2d22:	11 05       	cpc	r17, r1
    2d24:	91 f1       	breq	.+100    	; 0x2d8a <_ZN10SdBaseFile16createContiguousEPS_PKcm+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!open(dirFile, path, O_CREAT | O_EXCL | O_RDWR)) {
    2d26:	23 ec       	ldi	r18, 0xC3	; 195
    2d28:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <_ZN10SdBaseFile4openEPS_PKch>
    2d2c:	88 23       	and	r24, r24
    2d2e:	69 f1       	breq	.+90     	; 0x2d8a <_ZN10SdBaseFile16createContiguousEPS_PKcm+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate number of clusters needed
  count = ((size - 1) >> (m_vol->clusterSizeShift() + 9)) + 1;
    2d30:	ec 81       	ldd	r30, Y+4	; 0x04
    2d32:	fd 81       	ldd	r31, Y+5	; 0x05

  // allocate clusters
  if (!m_vol->allocContiguous(count, &m_firstCluster)) {
    2d34:	b8 01       	movw	r22, r16
    2d36:	a7 01       	movw	r20, r14
    2d38:	41 50       	subi	r20, 0x01	; 1
    2d3a:	50 40       	sbci	r21, 0x00	; 0
    2d3c:	60 40       	sbci	r22, 0x00	; 0
    2d3e:	70 40       	sbci	r23, 0x00	; 0
    2d40:	82 85       	ldd	r24, Z+10	; 0x0a
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	09 96       	adiw	r24, 0x09	; 9
    2d46:	04 c0       	rjmp	.+8      	; 0x2d50 <_ZN10SdBaseFile16createContiguousEPS_PKcm+0x46>
    2d48:	76 95       	lsr	r23
    2d4a:	67 95       	ror	r22
    2d4c:	57 95       	ror	r21
    2d4e:	47 95       	ror	r20
    2d50:	8a 95       	dec	r24
    2d52:	d2 f7       	brpl	.-12     	; 0x2d48 <_ZN10SdBaseFile16createContiguousEPS_PKcm+0x3e>
    2d54:	4f 5f       	subi	r20, 0xFF	; 255
    2d56:	5f 4f       	sbci	r21, 0xFF	; 255
    2d58:	6f 4f       	sbci	r22, 0xFF	; 255
    2d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5c:	9e 01       	movw	r18, r28
    2d5e:	2a 5e       	subi	r18, 0xEA	; 234
    2d60:	3f 4f       	sbci	r19, 0xFF	; 255
    2d62:	cf 01       	movw	r24, r30
    2d64:	0e 94 34 1b 	call	0x3668	; 0x3668 <_ZN8SdVolume15allocContiguousEmPm>
    2d68:	88 23       	and	r24, r24
    2d6a:	21 f4       	brne	.+8      	; 0x2d74 <_ZN10SdBaseFile16createContiguousEPS_PKcm+0x6a>
    remove();
    2d6c:	ce 01       	movw	r24, r28
    2d6e:	0e 94 3e 10 	call	0x207c	; 0x207c <_ZN10SdBaseFile6removeEv>
    2d72:	0b c0       	rjmp	.+22     	; 0x2d8a <_ZN10SdBaseFile16createContiguousEPS_PKcm+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fileSize = size;
    2d74:	ea 8a       	std	Y+18, r14	; 0x12
    2d76:	fb 8a       	std	Y+19, r15	; 0x13
    2d78:	0c 8b       	std	Y+20, r16	; 0x14
    2d7a:	1d 8b       	std	Y+21, r17	; 0x15

  // insure sync() will update dir entry
  m_flags |= F_FILE_DIR_DIRTY;
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	80 68       	ori	r24, 0x80	; 128
    2d80:	89 83       	std	Y+1, r24	; 0x01

  return sync();
    2d82:	ce 01       	movw	r24, r28
    2d84:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN10SdBaseFile4syncEv>
    2d88:	01 c0       	rjmp	.+2      	; 0x2d8c <_ZN10SdBaseFile16createContiguousEPS_PKcm+0x82>
    2d8a:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	ff 90       	pop	r15
    2d96:	ef 90       	pop	r14
    2d98:	08 95       	ret

00002d9a <_ZN5SdFat6removeEPKc>:
*
* \return The value one, true, is returned for success and
* the value zero, false, is returned for failure.
*/
bool SdFat::remove(const char* path) {
  return SdBaseFile::remove(&m_vwd, path);
    2d9a:	4f 96       	adiw	r24, 0x1f	; 31
    2d9c:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN10SdBaseFile6removeEPS_PKc>
}
    2da0:	08 95       	ret

00002da2 <_ZN5SdFat5chdirEb>:
 *  working directory if true.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdFat::chdir(bool set_cwd) {
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	ec 01       	movw	r28, r24
  if (set_cwd) SdBaseFile::setCwd(&m_vwd);
    2da8:	66 23       	and	r22, r22
    2daa:	31 f0       	breq	.+12     	; 0x2db8 <_ZN5SdFat5chdirEb+0x16>
  static bool make83Name(const char* str, uint8_t* name, const char** ptr);
  bool mkdir(SdBaseFile* parent, const uint8_t dname[11]);
  bool open(SdBaseFile* dirFile, const uint8_t dname[11], uint8_t oflag);
  bool openCachedEntry(uint8_t cacheIndex, uint8_t oflags);
  dir_t* readDirCache();
  static void setCwd(SdBaseFile* cwd) {m_cwd = cwd;}
    2dac:	6f 96       	adiw	r28, 0x1f	; 31
    2dae:	d0 93 ba 06 	sts	0x06BA, r29
    2db2:	c0 93 b9 06 	sts	0x06B9, r28
    2db6:	6f 97       	sbiw	r28, 0x1f	; 31
  if (m_vwd.isOpen()) m_vwd.close();
    2db8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dba:	88 23       	and	r24, r24
    2dbc:	21 f0       	breq	.+8      	; 0x2dc6 <_ZN5SdFat5chdirEb+0x24>
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	4f 96       	adiw	r24, 0x1f	; 31
    2dc2:	0e 94 34 10 	call	0x2068	; 0x2068 <_ZN10SdBaseFile5closeEv>
  return m_vwd.openRoot(&m_vol);
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	4f 96       	adiw	r24, 0x1f	; 31
    2dca:	25 96       	adiw	r28, 0x05	; 5
    2dcc:	be 01       	movw	r22, r28
    2dce:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN10SdBaseFile8openRootEP8SdVolume>
}
    2dd2:	df 91       	pop	r29
    2dd4:	cf 91       	pop	r28
    2dd6:	08 95       	ret

00002dd8 <_ZN5SdFat5beginEhh>:
 * \param[in] sckDivisor value for SPI SCK divisor. See Sd2Card::init().
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdFat::begin(uint8_t chipSelectPin, uint8_t sckDivisor) {
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	ec 01       	movw	r28, r24
  return m_card.begin(chipSelectPin, sckDivisor)
         && m_vol.init(&m_card) && chdir(1);
    2de2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN7Sd2Card5beginEhh>
    2de6:	88 23       	and	r24, r24
    2de8:	c9 f0       	breq	.+50     	; 0x2e1c <_ZN5SdFat5beginEhh+0x44>
    2dea:	8e 01       	movw	r16, r28
    2dec:	0b 5f       	subi	r16, 0xFB	; 251
    2dee:	1f 4f       	sbci	r17, 0xFF	; 255
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  bool init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    2df0:	c8 01       	movw	r24, r16
    2df2:	be 01       	movw	r22, r28
    2df4:	41 e0       	ldi	r20, 0x01	; 1
    2df6:	0e 94 b5 18 	call	0x316a	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh>
    2dfa:	88 23       	and	r24, r24
    2dfc:	39 f4       	brne	.+14     	; 0x2e0c <_ZN5SdFat5beginEhh+0x34>
    2dfe:	c8 01       	movw	r24, r16
    2e00:	be 01       	movw	r22, r28
    2e02:	40 e0       	ldi	r20, 0x00	; 0
    2e04:	0e 94 b5 18 	call	0x316a	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh>
    2e08:	88 23       	and	r24, r24
    2e0a:	41 f0       	breq	.+16     	; 0x2e1c <_ZN5SdFat5beginEhh+0x44>
    2e0c:	ce 01       	movw	r24, r28
    2e0e:	61 e0       	ldi	r22, 0x01	; 1
    2e10:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <_ZN5SdFat5chdirEb>
    2e14:	88 23       	and	r24, r24
    2e16:	19 f0       	breq	.+6      	; 0x2e1e <_ZN5SdFat5beginEhh+0x46>
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	01 c0       	rjmp	.+2      	; 0x2e1e <_ZN5SdFat5beginEhh+0x46>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
}
    2e1e:	df 91       	pop	r29
    2e20:	cf 91       	pop	r28
    2e22:	1f 91       	pop	r17
    2e24:	0f 91       	pop	r16
    2e26:	08 95       	ret

00002e28 <_ZL9pstrPrintPKc>:
#ifndef PSTR
#define PSTR(x) x
#define PGM_P const char*
#endif
//------------------------------------------------------------------------------
static void pstrPrint(PGM_P str) {
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	ec 01       	movw	r28, r24
    2e2e:	0c c0       	rjmp	.+24     	; 0x2e48 <_ZL9pstrPrintPKc+0x20>
   *  Set stdOut Print stream for messages.
   * \param[in] stream The new Print stream.
   */
  static void setStdOut(Print* stream) {m_stdOut = stream;}
  /** \return Print stream for messages. */
  static Print* stdOut() {return m_stdOut;}
    2e30:	e0 91 08 02 	lds	r30, 0x0208
    2e34:	f0 91 09 02 	lds	r31, 0x0209
  for (uint8_t c; (c = pgm_read_byte(str)); str++) SdFat::stdOut()->write(c);
    2e38:	a0 81       	ld	r26, Z
    2e3a:	b1 81       	ldd	r27, Z+1	; 0x01
    2e3c:	2d 91       	ld	r18, X+
    2e3e:	3c 91       	ld	r19, X
    2e40:	cf 01       	movw	r24, r30
    2e42:	f9 01       	movw	r30, r18
    2e44:	19 95       	eicall
    2e46:	21 96       	adiw	r28, 0x01	; 1
    2e48:	fe 01       	movw	r30, r28
    2e4a:	64 91       	lpm	r22, Z+
    2e4c:	66 23       	and	r22, r22
    2e4e:	81 f7       	brne	.-32     	; 0x2e30 <_ZL9pstrPrintPKc+0x8>
}
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	08 95       	ret

00002e56 <_ZL11pstrPrintlnPKc>:
//------------------------------------------------------------------------------
static void pstrPrintln(PGM_P str) {
  pstrPrint(str);
    2e56:	0e 94 14 17 	call	0x2e28	; 0x2e28 <_ZL9pstrPrintPKc>
  SdFat::stdOut()->println();
    2e5a:	80 91 08 02 	lds	r24, 0x0208
    2e5e:	90 91 09 02 	lds	r25, 0x0209
    2e62:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5Print7printlnEv>
}
    2e66:	08 95       	ret

00002e68 <_ZN5SdFat10errorPrintEv>:
  errorPrint_P(msg);
  while (1) {}
}
//------------------------------------------------------------------------------
/** %Print any SD error code. */
void SdFat::errorPrint() {
    2e68:	cf 93       	push	r28
    2e6a:	df 93       	push	r29
    2e6c:	ec 01       	movw	r28, r24
  if (!m_card.errorCode()) return;
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	88 23       	and	r24, r24
    2e72:	e1 f0       	breq	.+56     	; 0x2eac <_ZN5SdFat10errorPrintEv+0x44>
  pstrPrint(PSTR("SD errorCode: 0X"));
    2e74:	86 e7       	ldi	r24, 0x76	; 118
    2e76:	92 e0       	ldi	r25, 0x02	; 2
    2e78:	0e 94 14 17 	call	0x2e28	; 0x2e28 <_ZL9pstrPrintPKc>
  m_stdOut->print(m_card.errorCode(), HEX);
    2e7c:	69 81       	ldd	r22, Y+1	; 0x01
    2e7e:	80 91 08 02 	lds	r24, 0x0208
    2e82:	90 91 09 02 	lds	r25, 0x0209
    2e86:	70 e0       	ldi	r23, 0x00	; 0
    2e88:	40 e1       	ldi	r20, 0x10	; 16
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
    2e8c:	0e 94 dd 22 	call	0x45ba	; 0x45ba <_ZN5Print5printEii>
  pstrPrint(PSTR(",0X"));
    2e90:	82 e7       	ldi	r24, 0x72	; 114
    2e92:	92 e0       	ldi	r25, 0x02	; 2
    2e94:	0e 94 14 17 	call	0x2e28	; 0x2e28 <_ZL9pstrPrintPKc>
  m_stdOut->println(m_card.errorData(), HEX);
    2e98:	6b 81       	ldd	r22, Y+3	; 0x03
    2e9a:	80 91 08 02 	lds	r24, 0x0208
    2e9e:	90 91 09 02 	lds	r25, 0x0209
    2ea2:	70 e0       	ldi	r23, 0x00	; 0
    2ea4:	40 e1       	ldi	r20, 0x10	; 16
    2ea6:	50 e0       	ldi	r21, 0x00	; 0
    2ea8:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <_ZN5Print7printlnEii>
}
    2eac:	df 91       	pop	r29
    2eae:	cf 91       	pop	r28
    2eb0:	08 95       	ret

00002eb2 <_ZN5SdFat14initErrorPrintEv>:
  pstrPrintln(msg);
  initErrorHalt();
}
//------------------------------------------------------------------------------
/** Print error details after SdFat::init() fails. */
void SdFat::initErrorPrint() {
    2eb2:	cf 93       	push	r28
    2eb4:	df 93       	push	r29
    2eb6:	ec 01       	movw	r28, r24
  if (m_card.errorCode()) {
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	88 23       	and	r24, r24
    2ebc:	79 f0       	breq	.+30     	; 0x2edc <_ZN5SdFat14initErrorPrintEv+0x2a>
    pstrPrintln(PSTR("Can't access SD card. Do not reformat."));
    2ebe:	8b e3       	ldi	r24, 0x3B	; 59
    2ec0:	92 e0       	ldi	r25, 0x02	; 2
    2ec2:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZL11pstrPrintlnPKc>
    if (m_card.errorCode() == SD_CARD_ERROR_CMD0) {
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	81 30       	cpi	r24, 0x01	; 1
    2eca:	21 f4       	brne	.+8      	; 0x2ed4 <_ZN5SdFat14initErrorPrintEv+0x22>
      pstrPrintln(PSTR("No card, wrong chip select pin, or SPI problem?"));
    2ecc:	8b e0       	ldi	r24, 0x0B	; 11
    2ece:	92 e0       	ldi	r25, 0x02	; 2
    2ed0:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZL11pstrPrintlnPKc>
    }
    errorPrint();
    2ed4:	ce 01       	movw	r24, r28
    2ed6:	0e 94 34 17 	call	0x2e68	; 0x2e68 <_ZN5SdFat10errorPrintEv>
    2eda:	10 c0       	rjmp	.+32     	; 0x2efc <_ZN5SdFat14initErrorPrintEv+0x4a>
  } else if (m_vol.fatType() == 0) {
    2edc:	88 8d       	ldd	r24, Y+24	; 0x18
    2ede:	88 23       	and	r24, r24
    2ee0:	19 f4       	brne	.+6      	; 0x2ee8 <_ZN5SdFat14initErrorPrintEv+0x36>
    pstrPrintln(PSTR("Invalid format, reformat SD."));
    2ee2:	8e ee       	ldi	r24, 0xEE	; 238
    2ee4:	91 e0       	ldi	r25, 0x01	; 1
    2ee6:	08 c0       	rjmp	.+16     	; 0x2ef8 <_ZN5SdFat14initErrorPrintEv+0x46>
  } else if (!m_vwd.isOpen()) {
    2ee8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eea:	88 23       	and	r24, r24
    2eec:	19 f4       	brne	.+6      	; 0x2ef4 <_ZN5SdFat14initErrorPrintEv+0x42>
    pstrPrintln(PSTR("Can't open root directory."));
    2eee:	83 ed       	ldi	r24, 0xD3	; 211
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	02 c0       	rjmp	.+4      	; 0x2ef8 <_ZN5SdFat14initErrorPrintEv+0x46>
  } else {
    pstrPrintln(PSTR("No error found."));
    2ef4:	83 ec       	ldi	r24, 0xC3	; 195
    2ef6:	91 e0       	ldi	r25, 0x01	; 1
    2ef8:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZL11pstrPrintlnPKc>
  }
}
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	08 95       	ret

00002f02 <_ZN5SdFat13initErrorHaltEv>:
  errorPrint();
}
//------------------------------------------------------------------------------
/** %Print error details and halt after SdFat::init() fails. */
void SdFat::initErrorHalt() {
  initErrorPrint();
    2f02:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN5SdFat14initErrorPrintEv>
    2f06:	ff cf       	rjmp	.-2      	; 0x2f06 <_ZN5SdFat13initErrorHaltEv+0x4>

00002f08 <_ZN5SdFat12errorPrint_PEPKc>:
//------------------------------------------------------------------------------
/** %Print msg, any SD error code.
 *
 * \param[in] msg Message in program space (flash memory) to print.
 */
void SdFat::errorPrint_P(PGM_P msg) {
    2f08:	ef 92       	push	r14
    2f0a:	ff 92       	push	r15
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	7c 01       	movw	r14, r24
    2f12:	8b 01       	movw	r16, r22
  pstrPrint(PSTR("error: "));
    2f14:	82 e6       	ldi	r24, 0x62	; 98
    2f16:	92 e0       	ldi	r25, 0x02	; 2
    2f18:	0e 94 14 17 	call	0x2e28	; 0x2e28 <_ZL9pstrPrintPKc>
  pstrPrintln(msg);
    2f1c:	c8 01       	movw	r24, r16
    2f1e:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZL11pstrPrintlnPKc>
  errorPrint();
    2f22:	c7 01       	movw	r24, r14
    2f24:	0e 94 34 17 	call	0x2e68	; 0x2e68 <_ZN5SdFat10errorPrintEv>
}
    2f28:	1f 91       	pop	r17
    2f2a:	0f 91       	pop	r16
    2f2c:	ff 90       	pop	r15
    2f2e:	ef 90       	pop	r14
    2f30:	08 95       	ret

00002f32 <_ZN5SdFat11errorHalt_PEPKc>:
/** %Print msg, any SD error code, and halt.
 *
 * \param[in] msg Message in program space (flash memory) to print.
 */
void SdFat::errorHalt_P(PGM_P msg) {
  errorPrint_P(msg);
    2f32:	0e 94 84 17 	call	0x2f08	; 0x2f08 <_ZN5SdFat12errorPrint_PEPKc>
    2f36:	ff cf       	rjmp	.-2      	; 0x2f36 <_ZN5SdFat11errorHalt_PEPKc+0x4>

00002f38 <_ZN9SdFatUtil7FreeRamEv>:
#endif  // __arm__
//------------------------------------------------------------------------------
/** Amount of free RAM
 * \return The number of free bytes.
 */
int SdFatUtil::FreeRam() {
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	0f 92       	push	r0
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
  char top;
#ifdef __arm__
  return &top - reinterpret_cast<char*>(sbrk(0));
#else  // __arm__
  return __brkval ? &top - __brkval : &top - &__bss_end;
    2f42:	80 91 6f 09 	lds	r24, 0x096F
    2f46:	90 91 70 09 	lds	r25, 0x0970
    2f4a:	9e 01       	movw	r18, r28
    2f4c:	2f 5f       	subi	r18, 0xFF	; 255
    2f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f50:	00 97       	sbiw	r24, 0x00	; 0
    2f52:	19 f0       	breq	.+6      	; 0x2f5a <_ZN9SdFatUtil7FreeRamEv+0x22>
    2f54:	28 1b       	sub	r18, r24
    2f56:	39 0b       	sbc	r19, r25
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <_ZN9SdFatUtil7FreeRamEv+0x26>
    2f5a:	23 57       	subi	r18, 0x73	; 115
    2f5c:	39 40       	sbci	r19, 0x09	; 9
#endif  // __arm__
}
    2f5e:	c9 01       	movw	r24, r18
    2f60:	0f 90       	pop	r0
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	08 95       	ret

00002f68 <_ZN6SdFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an 
   * I/O error.
   */  
  size_t write(const uint8_t *buf, size_t size) {
    return SdBaseFile::write(buf, size);}
    2f68:	04 96       	adiw	r24, 0x04	; 4
    2f6a:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN10SdBaseFile5writeEPKvj>
    2f6e:	08 95       	ret

00002f70 <_ZN6SdFile5writeEh>:
/** Write a byte to a file. Required by the Arduino Print class.
 * \param[in] b the byte to be written.
 * Use getWriteError to check for errors.
 * \return 1 for success and 0 for failure.
 */
size_t SdFile::write(uint8_t b) {
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	0f 92       	push	r0
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    2f7a:	69 83       	std	Y+1, r22	; 0x01
  return SdBaseFile::write(&b, 1) == 1 ? 1 : 0;
    2f7c:	04 96       	adiw	r24, 0x04	; 4
    2f7e:	be 01       	movw	r22, r28
    2f80:	6f 5f       	subi	r22, 0xFF	; 255
    2f82:	7f 4f       	sbci	r23, 0xFF	; 255
    2f84:	41 e0       	ldi	r20, 0x01	; 1
    2f86:	50 e0       	ldi	r21, 0x00	; 0
    2f88:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN10SdBaseFile5writeEPKvj>
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	11 f4       	brne	.+4      	; 0x2f98 <_ZN6SdFile5writeEh+0x28>
    2f94:	21 e0       	ldi	r18, 0x01	; 1
    2f96:	30 e0       	ldi	r19, 0x00	; 0
}
    2f98:	c9 01       	movw	r24, r18
    2f9a:	0f 90       	pop	r0
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	08 95       	ret

00002fa2 <_ZN5SdSpi4initEh>:
  pinMode(MISO, INPUT);
  pinMode(MOSI, OUTPUT);
  pinMode(SCK, OUTPUT);
}
//------------------------------------------------------------------------------
void SdSpi::init(uint8_t sckDivisor) {
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	82 e0       	ldi	r24, 0x02	; 2
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <_ZN5SdSpi4initEh+0xa>
  uint8_t r = 0;

  for (uint8_t b = 2; sckDivisor > b && r < 6; b <<= 1, r++) {}
    2fa8:	88 0f       	add	r24, r24
    2faa:	4f 5f       	subi	r20, 0xFF	; 255
    2fac:	86 17       	cp	r24, r22
    2fae:	10 f4       	brcc	.+4      	; 0x2fb4 <_ZN5SdSpi4initEh+0x12>
    2fb0:	46 30       	cpi	r20, 0x06	; 6
    2fb2:	d1 f7       	brne	.-12     	; 0x2fa8 <_ZN5SdSpi4initEh+0x6>
  // See avr processor documentation
  SPCR = (1 << SPE) | (1 << MSTR) | (r >> 1);
    2fb4:	24 2f       	mov	r18, r20
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	c9 01       	movw	r24, r18
    2fba:	95 95       	asr	r25
    2fbc:	87 95       	ror	r24
    2fbe:	80 65       	ori	r24, 0x50	; 80
    2fc0:	8c bd       	out	0x2c, r24	; 44
  SPSR = r & 1 || r == 6 ? 0 : 1 << SPI2X;
    2fc2:	40 ff       	sbrs	r20, 0
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <_ZN5SdSpi4initEh+0x28>
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	04 c0       	rjmp	.+8      	; 0x2fd2 <_ZN5SdSpi4initEh+0x30>
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	46 30       	cpi	r20, 0x06	; 6
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <_ZN5SdSpi4initEh+0x30>
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	8d bd       	out	0x2d, r24	; 45
}
    2fd4:	08 95       	ret

00002fd6 <_ZN5SdSpi5beginEv>:
#include <SdSpi.h>
#if USE_NATIVE_AVR_SPI
//------------------------------------------------------------------------------
void SdSpi::begin() {
  // set SS high - may be chip select for another SPI device
  digitalWrite(SS, HIGH);
    2fd6:	85 e3       	ldi	r24, 0x35	; 53
    2fd8:	61 e0       	ldi	r22, 0x01	; 1
    2fda:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <digitalWrite>

  // SS must be in output mode even it is not chip select
  pinMode(SS, OUTPUT);
    2fde:	85 e3       	ldi	r24, 0x35	; 53
    2fe0:	61 e0       	ldi	r22, 0x01	; 1
    2fe2:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <pinMode>
  pinMode(MISO, INPUT);
    2fe6:	82 e3       	ldi	r24, 0x32	; 50
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <pinMode>
  pinMode(MOSI, OUTPUT);
    2fee:	83 e3       	ldi	r24, 0x33	; 51
    2ff0:	61 e0       	ldi	r22, 0x01	; 1
    2ff2:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <pinMode>
  pinMode(SCK, OUTPUT);
    2ff6:	84 e3       	ldi	r24, 0x34	; 52
    2ff8:	61 e0       	ldi	r22, 0x01	; 1
    2ffa:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <pinMode>
}
    2ffe:	08 95       	ret

00003000 <_ZN8SdVolume15cacheInvalidateEv>:
  return cacheSync();
}
#endif  // USE_SEPARATE_FAT_CACHE
//------------------------------------------------------------------------------
void SdVolume::cacheInvalidate() {
    m_cacheBlockNumber = 0XFFFFFFFF;
    3000:	8f ef       	ldi	r24, 0xFF	; 255
    3002:	9f ef       	ldi	r25, 0xFF	; 255
    3004:	af ef       	ldi	r26, 0xFF	; 255
    3006:	bf ef       	ldi	r27, 0xFF	; 255
    3008:	80 93 c2 08 	sts	0x08C2, r24
    300c:	90 93 c3 08 	sts	0x08C3, r25
    3010:	a0 93 c4 08 	sts	0x08C4, r26
    3014:	b0 93 c5 08 	sts	0x08C5, r27
    m_cacheStatus = 0;
    3018:	10 92 c6 08 	sts	0x08C6, r1
}
    301c:	08 95       	ret

0000301e <_ZNK8SdVolume17clusterStartBlockEm>:
//==============================================================================
//------------------------------------------------------------------------------
uint32_t SdVolume::clusterStartBlock(uint32_t cluster) const {
    301e:	fc 01       	movw	r30, r24
    3020:	9a 01       	movw	r18, r20
    3022:	ab 01       	movw	r20, r22
    3024:	22 50       	subi	r18, 0x02	; 2
    3026:	30 40       	sbci	r19, 0x00	; 0
    3028:	40 40       	sbci	r20, 0x00	; 0
    302a:	50 40       	sbci	r21, 0x00	; 0
    302c:	02 84       	ldd	r0, Z+10	; 0x0a
    302e:	04 c0       	rjmp	.+8      	; 0x3038 <_ZNK8SdVolume17clusterStartBlockEm+0x1a>
    3030:	22 0f       	add	r18, r18
    3032:	33 1f       	adc	r19, r19
    3034:	44 1f       	adc	r20, r20
    3036:	55 1f       	adc	r21, r21
    3038:	0a 94       	dec	r0
    303a:	d2 f7       	brpl	.-12     	; 0x3030 <_ZNK8SdVolume17clusterStartBlockEm+0x12>
    303c:	83 85       	ldd	r24, Z+11	; 0x0b
    303e:	94 85       	ldd	r25, Z+12	; 0x0c
    3040:	a5 85       	ldd	r26, Z+13	; 0x0d
    3042:	b6 85       	ldd	r27, Z+14	; 0x0e
    3044:	28 0f       	add	r18, r24
    3046:	39 1f       	adc	r19, r25
    3048:	4a 1f       	adc	r20, r26
    304a:	5b 1f       	adc	r21, r27
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
    304c:	b9 01       	movw	r22, r18
    304e:	ca 01       	movw	r24, r20
    3050:	08 95       	ret

00003052 <_ZN8SdVolume9cacheSyncEv>:
cache_t* SdVolume::cacheFetchFat(uint32_t blockNumber, uint8_t options) {
  return cacheFetch(blockNumber, options | CACHE_STATUS_FAT_BLOCK);
}
//------------------------------------------------------------------------------
bool SdVolume::cacheSync() {
  if (m_cacheStatus & CACHE_STATUS_DIRTY) {
    3052:	80 91 c6 08 	lds	r24, 0x08C6
    3056:	80 ff       	sbrs	r24, 0
    3058:	3d c0       	rjmp	.+122    	; 0x30d4 <_ZN8SdVolume9cacheSyncEv+0x82>
    if (!m_sdCard->writeBlock(m_cacheBlockNumber, m_cacheBuffer.data)) {
    305a:	40 91 c2 08 	lds	r20, 0x08C2
    305e:	50 91 c3 08 	lds	r21, 0x08C3
    3062:	60 91 c4 08 	lds	r22, 0x08C4
    3066:	70 91 c5 08 	lds	r23, 0x08C5
    306a:	80 91 c7 08 	lds	r24, 0x08C7
    306e:	90 91 c8 08 	lds	r25, 0x08C8
    3072:	22 ec       	ldi	r18, 0xC2	; 194
    3074:	36 e0       	ldi	r19, 0x06	; 6
    3076:	0e 94 93 09 	call	0x1326	; 0x1326 <_ZN7Sd2Card10writeBlockEmPKh>
    307a:	88 23       	and	r24, r24
    307c:	69 f1       	breq	.+90     	; 0x30d8 <_ZN8SdVolume9cacheSyncEv+0x86>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if ((m_cacheStatus & CACHE_STATUS_FAT_BLOCK) && m_fatCount > 1) {
    307e:	80 91 c6 08 	lds	r24, 0x08C6
    3082:	81 ff       	sbrs	r24, 1
    3084:	22 c0       	rjmp	.+68     	; 0x30ca <_ZN8SdVolume9cacheSyncEv+0x78>
    3086:	80 91 bd 06 	lds	r24, 0x06BD
    308a:	82 30       	cpi	r24, 0x02	; 2
    308c:	f0 f0       	brcs	.+60     	; 0x30ca <_ZN8SdVolume9cacheSyncEv+0x78>
      uint32_t lbn = m_cacheBlockNumber + m_blocksPerFat;
      if (!m_sdCard->writeBlock(lbn, m_cacheBuffer.data)) {
    308e:	40 91 be 06 	lds	r20, 0x06BE
    3092:	50 91 bf 06 	lds	r21, 0x06BF
    3096:	60 91 c0 06 	lds	r22, 0x06C0
    309a:	70 91 c1 06 	lds	r23, 0x06C1
    309e:	80 91 c2 08 	lds	r24, 0x08C2
    30a2:	90 91 c3 08 	lds	r25, 0x08C3
    30a6:	a0 91 c4 08 	lds	r26, 0x08C4
    30aa:	b0 91 c5 08 	lds	r27, 0x08C5
    30ae:	48 0f       	add	r20, r24
    30b0:	59 1f       	adc	r21, r25
    30b2:	6a 1f       	adc	r22, r26
    30b4:	7b 1f       	adc	r23, r27
    30b6:	80 91 c7 08 	lds	r24, 0x08C7
    30ba:	90 91 c8 08 	lds	r25, 0x08C8
    30be:	22 ec       	ldi	r18, 0xC2	; 194
    30c0:	36 e0       	ldi	r19, 0x06	; 6
    30c2:	0e 94 93 09 	call	0x1326	; 0x1326 <_ZN7Sd2Card10writeBlockEmPKh>
    30c6:	88 23       	and	r24, r24
    30c8:	39 f0       	breq	.+14     	; 0x30d8 <_ZN8SdVolume9cacheSyncEv+0x86>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_cacheStatus &= ~CACHE_STATUS_DIRTY;
    30ca:	80 91 c6 08 	lds	r24, 0x08C6
    30ce:	8e 7f       	andi	r24, 0xFE	; 254
    30d0:	80 93 c6 08 	sts	0x08C6, r24
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	08 95       	ret
    30d8:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;

 fail:
  return false;
}
    30da:	08 95       	ret

000030dc <_ZN8SdVolume14cacheWriteDataEv>:
//------------------------------------------------------------------------------
bool SdVolume::cacheWriteData() {
  return cacheSync();
    30dc:	0e 94 29 18 	call	0x3052	; 0x3052 <_ZN8SdVolume9cacheSyncEv>
}
    30e0:	08 95       	ret

000030e2 <_ZN8SdVolume10cacheFetchEmh>:
 fail:
  return false;
}
#else  // USE_SEPARATE_FAT_CACHE
//------------------------------------------------------------------------------
cache_t* SdVolume::cacheFetch(uint32_t blockNumber, uint8_t options) {
    30e2:	df 92       	push	r13
    30e4:	ef 92       	push	r14
    30e6:	ff 92       	push	r15
    30e8:	0f 93       	push	r16
    30ea:	1f 93       	push	r17
    30ec:	7b 01       	movw	r14, r22
    30ee:	8c 01       	movw	r16, r24
    30f0:	d4 2e       	mov	r13, r20
  if (m_cacheBlockNumber != blockNumber) {
    30f2:	80 91 c2 08 	lds	r24, 0x08C2
    30f6:	90 91 c3 08 	lds	r25, 0x08C3
    30fa:	a0 91 c4 08 	lds	r26, 0x08C4
    30fe:	b0 91 c5 08 	lds	r27, 0x08C5
    3102:	8e 15       	cp	r24, r14
    3104:	9f 05       	cpc	r25, r15
    3106:	a0 07       	cpc	r26, r16
    3108:	b1 07       	cpc	r27, r17
    310a:	e1 f0       	breq	.+56     	; 0x3144 <_ZN8SdVolume10cacheFetchEmh+0x62>
    if (!cacheSync()) {
    310c:	0e 94 29 18 	call	0x3052	; 0x3052 <_ZN8SdVolume9cacheSyncEv>
    3110:	88 23       	and	r24, r24
    3112:	11 f1       	breq	.+68     	; 0x3158 <_ZN8SdVolume10cacheFetchEmh+0x76>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(options & CACHE_OPTION_NO_READ)) {
    3114:	d2 fc       	sbrc	r13, 2
    3116:	0c c0       	rjmp	.+24     	; 0x3130 <_ZN8SdVolume10cacheFetchEmh+0x4e>
      if (!m_sdCard->readBlock(blockNumber, m_cacheBuffer.data)) {
    3118:	80 91 c7 08 	lds	r24, 0x08C7
    311c:	90 91 c8 08 	lds	r25, 0x08C8
    3120:	b8 01       	movw	r22, r16
    3122:	a7 01       	movw	r20, r14
    3124:	22 ec       	ldi	r18, 0xC2	; 194
    3126:	36 e0       	ldi	r19, 0x06	; 6
    3128:	0e 94 a3 0a 	call	0x1546	; 0x1546 <_ZN7Sd2Card9readBlockEmPh>
    312c:	88 23       	and	r24, r24
    312e:	a1 f0       	breq	.+40     	; 0x3158 <_ZN8SdVolume10cacheFetchEmh+0x76>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_cacheStatus = 0;
    3130:	10 92 c6 08 	sts	0x08C6, r1
    m_cacheBlockNumber = blockNumber;
    3134:	e0 92 c2 08 	sts	0x08C2, r14
    3138:	f0 92 c3 08 	sts	0x08C3, r15
    313c:	00 93 c4 08 	sts	0x08C4, r16
    3140:	10 93 c5 08 	sts	0x08C5, r17
  }
  m_cacheStatus |= options & CACHE_STATUS_MASK;
    3144:	83 e0       	ldi	r24, 0x03	; 3
    3146:	d8 22       	and	r13, r24
    3148:	80 91 c6 08 	lds	r24, 0x08C6
    314c:	8d 29       	or	r24, r13
    314e:	80 93 c6 08 	sts	0x08C6, r24
    3152:	22 ec       	ldi	r18, 0xC2	; 194
    3154:	36 e0       	ldi	r19, 0x06	; 6
    3156:	02 c0       	rjmp	.+4      	; 0x315c <_ZN8SdVolume10cacheFetchEmh+0x7a>
  return &m_cacheBuffer;
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0

 fail:
  return 0;
}
    315c:	c9 01       	movw	r24, r18
    315e:	1f 91       	pop	r17
    3160:	0f 91       	pop	r16
    3162:	ff 90       	pop	r15
    3164:	ef 90       	pop	r14
    3166:	df 90       	pop	r13
    3168:	08 95       	ret

0000316a <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
bool SdVolume::init(Sd2Card* dev, uint8_t part) {
    316a:	6f 92       	push	r6
    316c:	7f 92       	push	r7
    316e:	8f 92       	push	r8
    3170:	9f 92       	push	r9
    3172:	af 92       	push	r10
    3174:	bf 92       	push	r11
    3176:	cf 92       	push	r12
    3178:	df 92       	push	r13
    317a:	ef 92       	push	r14
    317c:	ff 92       	push	r15
    317e:	0f 93       	push	r16
    3180:	1f 93       	push	r17
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	ec 01       	movw	r28, r24
    3188:	14 2f       	mov	r17, r20
  uint8_t tmp;
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  m_sdCard = dev;
    318a:	70 93 c8 08 	sts	0x08C8, r23
    318e:	60 93 c7 08 	sts	0x08C7, r22
  m_fatType = 0;
    3192:	1b 8a       	std	Y+19, r1	; 0x13
  m_allocSearchStart = 2;
    3194:	82 e0       	ldi	r24, 0x02	; 2
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	a0 e0       	ldi	r26, 0x00	; 0
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	88 83       	st	Y, r24
    319e:	99 83       	std	Y+1, r25	; 0x01
    31a0:	aa 83       	std	Y+2, r26	; 0x02
    31a2:	bb 83       	std	Y+3, r27	; 0x03
  m_cacheStatus = 0;  // cacheSync() will write block if true
    31a4:	10 92 c6 08 	sts	0x08C6, r1
  m_cacheBlockNumber = 0XFFFFFFFF;
    31a8:	8f ef       	ldi	r24, 0xFF	; 255
    31aa:	9f ef       	ldi	r25, 0xFF	; 255
    31ac:	af ef       	ldi	r26, 0xFF	; 255
    31ae:	bf ef       	ldi	r27, 0xFF	; 255
    31b0:	80 93 c2 08 	sts	0x08C2, r24
    31b4:	90 93 c3 08 	sts	0x08C3, r25
    31b8:	a0 93 c4 08 	sts	0x08C4, r26
    31bc:	b0 93 c5 08 	sts	0x08C5, r27
  m_cacheFatStatus = 0;  // cacheSync() will write block if true
  m_cacheFatBlockNumber = 0XFFFFFFFF;
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    31c0:	44 23       	and	r20, r20
    31c2:	21 f4       	brne	.+8      	; 0x31cc <_ZN8SdVolume4initEP7Sd2Cardh+0x62>
    31c4:	66 24       	eor	r6, r6
    31c6:	77 24       	eor	r7, r7
    31c8:	43 01       	movw	r8, r6
    31ca:	36 c0       	rjmp	.+108    	; 0x3238 <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    if (part > 4) {
    31cc:	45 30       	cpi	r20, 0x05	; 5
    31ce:	08 f0       	brcs	.+2      	; 0x31d2 <_ZN8SdVolume4initEP7Sd2Cardh+0x68>
    31d0:	f1 c0       	rjmp	.+482    	; 0x33b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x24a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetch(volumeStartBlock, CACHE_FOR_READ);
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	70 e0       	ldi	r23, 0x00	; 0
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN8SdVolume10cacheFetchEmh>
    31e0:	dc 01       	movw	r26, r24
    if (!pc) {
    31e2:	00 97       	sbiw	r24, 0x00	; 0
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x7e>
    31e6:	e6 c0       	rjmp	.+460    	; 0x33b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x24a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part-1];
    31e8:	41 2f       	mov	r20, r17
    31ea:	50 e0       	ldi	r21, 0x00	; 0
    31ec:	41 50       	subi	r20, 0x01	; 1
    31ee:	50 40       	sbci	r21, 0x00	; 0
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
    31f0:	fa 01       	movw	r30, r20
    31f2:	74 e0       	ldi	r23, 0x04	; 4
    31f4:	ee 0f       	add	r30, r30
    31f6:	ff 1f       	adc	r31, r31
    31f8:	7a 95       	dec	r23
    31fa:	e1 f7       	brne	.-8      	; 0x31f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x8a>
    31fc:	e8 0f       	add	r30, r24
    31fe:	f9 1f       	adc	r31, r25
    3200:	e2 54       	subi	r30, 0x42	; 66
    3202:	fe 4f       	sbci	r31, 0xFE	; 254
    3204:	80 81       	ld	r24, Z
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	8f 77       	andi	r24, 0x7F	; 127
    320a:	90 70       	andi	r25, 0x00	; 0
    320c:	89 2b       	or	r24, r25
    320e:	09 f0       	breq	.+2      	; 0x3212 <_ZN8SdVolume4initEP7Sd2Cardh+0xa8>
    3210:	d1 c0       	rjmp	.+418    	; 0x33b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x24a>
    3212:	64 e0       	ldi	r22, 0x04	; 4
    3214:	44 0f       	add	r20, r20
    3216:	55 1f       	adc	r21, r21
    3218:	6a 95       	dec	r22
    321a:	e1 f7       	brne	.-8      	; 0x3214 <_ZN8SdVolume4initEP7Sd2Cardh+0xaa>
    321c:	a4 0f       	add	r26, r20
    321e:	b5 1f       	adc	r27, r21
    3220:	aa 53       	subi	r26, 0x3A	; 58
    3222:	be 4f       	sbci	r27, 0xFE	; 254
    3224:	6d 90       	ld	r6, X+
    3226:	7d 90       	ld	r7, X+
    3228:	8d 90       	ld	r8, X+
    322a:	9c 90       	ld	r9, X
    322c:	61 14       	cp	r6, r1
    322e:	71 04       	cpc	r7, r1
    3230:	81 04       	cpc	r8, r1
    3232:	91 04       	cpc	r9, r1
    3234:	09 f4       	brne	.+2      	; 0x3238 <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    3236:	be c0       	rjmp	.+380    	; 0x33b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x24a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetch(volumeStartBlock, CACHE_FOR_READ);
    3238:	c4 01       	movw	r24, r8
    323a:	b3 01       	movw	r22, r6
    323c:	40 e0       	ldi	r20, 0x00	; 0
    323e:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN8SdVolume10cacheFetchEmh>
    3242:	5c 01       	movw	r10, r24
  if (!pc) {
    3244:	00 97       	sbiw	r24, 0x00	; 0
    3246:	09 f4       	brne	.+2      	; 0x324a <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    3248:	b5 c0       	rjmp	.+362    	; 0x33b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x24a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
    324a:	fc 01       	movw	r30, r24
    324c:	83 85       	ldd	r24, Z+11	; 0x0b
    324e:	94 85       	ldd	r25, Z+12	; 0x0c
    3250:	80 50       	subi	r24, 0x00	; 0
    3252:	92 40       	sbci	r25, 0x02	; 2
    3254:	09 f0       	breq	.+2      	; 0x3258 <_ZN8SdVolume4initEP7Sd2Cardh+0xee>
    3256:	ae c0       	rjmp	.+348    	; 0x33b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x24a>
    3258:	f5 01       	movw	r30, r10
    325a:	20 89       	ldd	r18, Z+16	; 0x10
    325c:	22 23       	and	r18, r18
    325e:	09 f4       	brne	.+2      	; 0x3262 <_ZN8SdVolume4initEP7Sd2Cardh+0xf8>
    3260:	a9 c0       	rjmp	.+338    	; 0x33b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x24a>
    3262:	46 85       	ldd	r20, Z+14	; 0x0e
    3264:	57 85       	ldd	r21, Z+15	; 0x0f
    3266:	41 15       	cp	r20, r1
    3268:	51 05       	cpc	r21, r1
    326a:	09 f4       	brne	.+2      	; 0x326e <_ZN8SdVolume4initEP7Sd2Cardh+0x104>
    326c:	a3 c0       	rjmp	.+326    	; 0x33b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x24a>
    fbs->reservedSectorCount == 0) {
       // not valid FAT volume
      DBG_FAIL_MACRO;
      goto fail;
  }
  m_fatCount = fbs->fatCount;
    326e:	20 93 bd 06 	sts	0x06BD, r18
  m_blocksPerCluster = fbs->sectorsPerCluster;
    3272:	85 85       	ldd	r24, Z+13	; 0x0d
    3274:	8c 83       	std	Y+4, r24	; 0x04

  m_clusterBlockMask = m_blocksPerCluster - 1;
    3276:	81 50       	subi	r24, 0x01	; 1
    3278:	8d 83       	std	Y+5, r24	; 0x05

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
    327a:	1a 86       	std	Y+10, r1	; 0x0a
    327c:	91 e0       	ldi	r25, 0x01	; 1
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	70 e0       	ldi	r23, 0x00	; 0
    3282:	0a c0       	rjmp	.+20     	; 0x3298 <_ZN8SdVolume4initEP7Sd2Cardh+0x12e>
  for (tmp = 1; m_blocksPerCluster != tmp; m_clusterSizeShift++) {
    tmp <<= 1;
    3284:	99 0f       	add	r25, r25
    3286:	6f 5f       	subi	r22, 0xFF	; 255
    3288:	7f 4f       	sbci	r23, 0xFF	; 255
    if (tmp == 0) {
    328a:	68 30       	cpi	r22, 0x08	; 8
    328c:	71 05       	cpc	r23, r1
    328e:	09 f4       	brne	.+2      	; 0x3292 <_ZN8SdVolume4initEP7Sd2Cardh+0x128>
    3290:	91 c0       	rjmp	.+290    	; 0x33b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x24a>

  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; m_clusterSizeShift++) {
    3292:	8a 85       	ldd	r24, Y+10	; 0x0a
    3294:	8f 5f       	subi	r24, 0xFF	; 255
    3296:	8a 87       	std	Y+10, r24	; 0x0a
    3298:	8c 81       	ldd	r24, Y+4	; 0x04
    329a:	89 17       	cp	r24, r25
    329c:	99 f7       	brne	.-26     	; 0x3284 <_ZN8SdVolume4initEP7Sd2Cardh+0x11a>
      goto fail;
    }
  }

  m_blocksPerFat = fbs->sectorsPerFat16 ?
                    fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
    329e:	f5 01       	movw	r30, r10
    32a0:	66 89       	ldd	r22, Z+22	; 0x16
    32a2:	77 89       	ldd	r23, Z+23	; 0x17
    32a4:	61 15       	cp	r22, r1
    32a6:	71 05       	cpc	r23, r1
    32a8:	19 f0       	breq	.+6      	; 0x32b0 <_ZN8SdVolume4initEP7Sd2Cardh+0x146>
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	05 c0       	rjmp	.+10     	; 0x32ba <_ZN8SdVolume4initEP7Sd2Cardh+0x150>
    32b0:	f5 01       	movw	r30, r10
    32b2:	64 a1       	ldd	r22, Z+36	; 0x24
    32b4:	75 a1       	ldd	r23, Z+37	; 0x25
    32b6:	86 a1       	ldd	r24, Z+38	; 0x26
    32b8:	97 a1       	ldd	r25, Z+39	; 0x27
    32ba:	60 93 be 06 	sts	0x06BE, r22
    32be:	70 93 bf 06 	sts	0x06BF, r23
    32c2:	80 93 c0 06 	sts	0x06C0, r24
    32c6:	90 93 c1 06 	sts	0x06C1, r25

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
    32ca:	6a 01       	movw	r12, r20
    32cc:	ee 24       	eor	r14, r14
    32ce:	ff 24       	eor	r15, r15
    32d0:	c6 0c       	add	r12, r6
    32d2:	d7 1c       	adc	r13, r7
    32d4:	e8 1c       	adc	r14, r8
    32d6:	f9 1c       	adc	r15, r9
    32d8:	cf 86       	std	Y+15, r12	; 0x0f
    32da:	d8 8a       	std	Y+16, r13	; 0x10
    32dc:	e9 8a       	std	Y+17, r14	; 0x11
    32de:	fa 8a       	std	Y+18, r15	; 0x12

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
    32e0:	f5 01       	movw	r30, r10
    32e2:	01 89       	ldd	r16, Z+17	; 0x11
    32e4:	12 89       	ldd	r17, Z+18	; 0x12
    32e6:	1d 8b       	std	Y+21, r17	; 0x15
    32e8:	0c 8b       	std	Y+20, r16	; 0x14

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + fbs->fatCount * m_blocksPerFat;
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	40 e0       	ldi	r20, 0x00	; 0
    32ee:	50 e0       	ldi	r21, 0x00	; 0
    32f0:	0e 94 c3 24 	call	0x4986	; 0x4986 <__mulsi3>
    32f4:	6c 0d       	add	r22, r12
    32f6:	7d 1d       	adc	r23, r13
    32f8:	8e 1d       	adc	r24, r14
    32fa:	9f 1d       	adc	r25, r15
    32fc:	6e 8b       	std	Y+22, r22	; 0x16
    32fe:	7f 8b       	std	Y+23, r23	; 0x17
    3300:	88 8f       	std	Y+24, r24	; 0x18
    3302:	99 8f       	std	Y+25, r25	; 0x19

  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
    3304:	35 e0       	ldi	r19, 0x05	; 5
    3306:	00 0f       	add	r16, r16
    3308:	11 1f       	adc	r17, r17
    330a:	3a 95       	dec	r19
    330c:	e1 f7       	brne	.-8      	; 0x3306 <_ZN8SdVolume4initEP7Sd2Cardh+0x19c>
    330e:	01 50       	subi	r16, 0x01	; 1
    3310:	1e 4f       	sbci	r17, 0xFE	; 254
    3312:	01 2f       	mov	r16, r17
    3314:	11 27       	eor	r17, r17
    3316:	06 95       	lsr	r16
    3318:	98 01       	movw	r18, r16
    331a:	40 e0       	ldi	r20, 0x00	; 0
    331c:	50 e0       	ldi	r21, 0x00	; 0
    331e:	26 0f       	add	r18, r22
    3320:	37 1f       	adc	r19, r23
    3322:	48 1f       	adc	r20, r24
    3324:	59 1f       	adc	r21, r25
    3326:	2b 87       	std	Y+11, r18	; 0x0b
    3328:	3c 87       	std	Y+12, r19	; 0x0c
    332a:	4d 87       	std	Y+13, r20	; 0x0d
    332c:	5e 87       	std	Y+14, r21	; 0x0e

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
                           fbs->totalSectors16 : fbs->totalSectors32;
    332e:	f5 01       	movw	r30, r10
    3330:	83 89       	ldd	r24, Z+19	; 0x13
    3332:	94 89       	ldd	r25, Z+20	; 0x14
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	21 f0       	breq	.+8      	; 0x3340 <_ZN8SdVolume4initEP7Sd2Cardh+0x1d6>
    3338:	7c 01       	movw	r14, r24
    333a:	00 e0       	ldi	r16, 0x00	; 0
    333c:	10 e0       	ldi	r17, 0x00	; 0
    333e:	05 c0       	rjmp	.+10     	; 0x334a <_ZN8SdVolume4initEP7Sd2Cardh+0x1e0>
    3340:	f5 01       	movw	r30, r10
    3342:	e0 a0       	ldd	r14, Z+32	; 0x20
    3344:	f1 a0       	ldd	r15, Z+33	; 0x21
    3346:	02 a1       	ldd	r16, Z+34	; 0x22
    3348:	13 a1       	ldd	r17, Z+35	; 0x23
  // total data blocks
  m_clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
    334a:	c4 01       	movw	r24, r8
    334c:	b3 01       	movw	r22, r6
    334e:	62 1b       	sub	r22, r18
    3350:	73 0b       	sbc	r23, r19
    3352:	84 0b       	sbc	r24, r20
    3354:	95 0b       	sbc	r25, r21
    3356:	6e 0d       	add	r22, r14
    3358:	7f 1d       	adc	r23, r15
    335a:	80 1f       	adc	r24, r16
    335c:	91 1f       	adc	r25, r17

  // divide by cluster size to get cluster count
  m_clusterCount >>= m_clusterSizeShift;
    335e:	0a 84       	ldd	r0, Y+10	; 0x0a
    3360:	04 c0       	rjmp	.+8      	; 0x336a <_ZN8SdVolume4initEP7Sd2Cardh+0x200>
    3362:	96 95       	lsr	r25
    3364:	87 95       	ror	r24
    3366:	77 95       	ror	r23
    3368:	67 95       	ror	r22
    336a:	0a 94       	dec	r0
    336c:	d2 f7       	brpl	.-12     	; 0x3362 <_ZN8SdVolume4initEP7Sd2Cardh+0x1f8>
    336e:	6e 83       	std	Y+6, r22	; 0x06
    3370:	7f 83       	std	Y+7, r23	; 0x07
    3372:	88 87       	std	Y+8, r24	; 0x08
    3374:	99 87       	std	Y+9, r25	; 0x09

  // FAT type is determined by cluster count
  if (m_clusterCount < 4085) {
    3376:	65 3f       	cpi	r22, 0xF5	; 245
    3378:	ff e0       	ldi	r31, 0x0F	; 15
    337a:	7f 07       	cpc	r23, r31
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	8f 07       	cpc	r24, r31
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	9f 07       	cpc	r25, r31
    3384:	18 f4       	brcc	.+6      	; 0x338c <_ZN8SdVolume4initEP7Sd2Cardh+0x222>
    m_fatType = 12;
    3386:	8c e0       	ldi	r24, 0x0C	; 12
    3388:	8b 8b       	std	Y+19, r24	; 0x13
    338a:	14 c0       	rjmp	.+40     	; 0x33b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x24a>
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (m_clusterCount < 65525) {
    338c:	65 5f       	subi	r22, 0xF5	; 245
    338e:	7f 4f       	sbci	r23, 0xFF	; 255
    3390:	80 40       	sbci	r24, 0x00	; 0
    3392:	90 40       	sbci	r25, 0x00	; 0
    3394:	10 f4       	brcc	.+4      	; 0x339a <_ZN8SdVolume4initEP7Sd2Cardh+0x230>
    m_fatType = 16;
    3396:	80 e1       	ldi	r24, 0x10	; 16
    3398:	0a c0       	rjmp	.+20     	; 0x33ae <_ZN8SdVolume4initEP7Sd2Cardh+0x244>
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    339a:	f5 01       	movw	r30, r10
    339c:	84 a5       	ldd	r24, Z+44	; 0x2c
    339e:	95 a5       	ldd	r25, Z+45	; 0x2d
    33a0:	a6 a5       	ldd	r26, Z+46	; 0x2e
    33a2:	b7 a5       	ldd	r27, Z+47	; 0x2f
    33a4:	8e 8b       	std	Y+22, r24	; 0x16
    33a6:	9f 8b       	std	Y+23, r25	; 0x17
    33a8:	a8 8f       	std	Y+24, r26	; 0x18
    33aa:	b9 8f       	std	Y+25, r27	; 0x19
    m_fatType = 32;
    33ac:	80 e2       	ldi	r24, 0x20	; 32
    33ae:	8b 8b       	std	Y+19, r24	; 0x13
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	01 c0       	rjmp	.+2      	; 0x33b6 <_ZN8SdVolume4initEP7Sd2Cardh+0x24c>
    33b4:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;

 fail:
  return false;
}
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	1f 91       	pop	r17
    33bc:	0f 91       	pop	r16
    33be:	ff 90       	pop	r15
    33c0:	ef 90       	pop	r14
    33c2:	df 90       	pop	r13
    33c4:	cf 90       	pop	r12
    33c6:	bf 90       	pop	r11
    33c8:	af 90       	pop	r10
    33ca:	9f 90       	pop	r9
    33cc:	8f 90       	pop	r8
    33ce:	7f 90       	pop	r7
    33d0:	6f 90       	pop	r6
    33d2:	08 95       	ret

000033d4 <_ZN8SdVolume13cacheFetchFatEmh>:
 fail:
  return 0;
}
//------------------------------------------------------------------------------
cache_t* SdVolume::cacheFetchFat(uint32_t blockNumber, uint8_t options) {
  return cacheFetch(blockNumber, options | CACHE_STATUS_FAT_BLOCK);
    33d4:	42 60       	ori	r20, 0x02	; 2
    33d6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN8SdVolume10cacheFetchEmh>
}
    33da:	08 95       	ret

000033dc <_ZN8SdVolume6fatPutEmm>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    33dc:	8f 92       	push	r8
    33de:	9f 92       	push	r9
    33e0:	af 92       	push	r10
    33e2:	bf 92       	push	r11
    33e4:	cf 92       	push	r12
    33e6:	df 92       	push	r13
    33e8:	ef 92       	push	r14
    33ea:	ff 92       	push	r15
    33ec:	0f 93       	push	r16
    33ee:	1f 93       	push	r17
    33f0:	cf 93       	push	r28
    33f2:	df 93       	push	r29
    33f4:	ec 01       	movw	r28, r24
    33f6:	6a 01       	movw	r12, r20
    33f8:	7b 01       	movw	r14, r22
    33fa:	48 01       	movw	r8, r16
    33fc:	59 01       	movw	r10, r18
  uint32_t lba;
  cache_t* pc;
  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    33fe:	42 30       	cpi	r20, 0x02	; 2
    3400:	51 05       	cpc	r21, r1
    3402:	61 05       	cpc	r22, r1
    3404:	71 05       	cpc	r23, r1
    3406:	08 f4       	brcc	.+2      	; 0x340a <_ZN8SdVolume6fatPutEmm+0x2e>
    3408:	4b c0       	rjmp	.+150    	; 0x34a0 <_ZN8SdVolume6fatPutEmm+0xc4>
    340a:	8e 81       	ldd	r24, Y+6	; 0x06
    340c:	9f 81       	ldd	r25, Y+7	; 0x07
    340e:	a8 85       	ldd	r26, Y+8	; 0x08
    3410:	b9 85       	ldd	r27, Y+9	; 0x09
    3412:	01 96       	adiw	r24, 0x01	; 1
    3414:	a1 1d       	adc	r26, r1
    3416:	b1 1d       	adc	r27, r1
    3418:	84 17       	cp	r24, r20
    341a:	95 07       	cpc	r25, r21
    341c:	a6 07       	cpc	r26, r22
    341e:	b7 07       	cpc	r27, r23
    3420:	08 f4       	brcc	.+2      	; 0x3424 <_ZN8SdVolume6fatPutEmm+0x48>
    3422:	3e c0       	rjmp	.+124    	; 0x34a0 <_ZN8SdVolume6fatPutEmm+0xc4>
      tmp = ((pc->data[index] & 0XF0)) | tmp >> 4;
    }
    pc->data[index] = tmp;
    return true;
  }
  if (m_fatType == 16) {
    3424:	8b 89       	ldd	r24, Y+19	; 0x13
    3426:	80 31       	cpi	r24, 0x10	; 16
    3428:	29 f4       	brne	.+10     	; 0x3434 <_ZN8SdVolume6fatPutEmm+0x58>
    lba = m_fatStartBlock + (cluster >> 8);
    342a:	25 2f       	mov	r18, r21
    342c:	36 2f       	mov	r19, r22
    342e:	47 2f       	mov	r20, r23
    3430:	55 27       	eor	r21, r21
    3432:	0b c0       	rjmp	.+22     	; 0x344a <_ZN8SdVolume6fatPutEmm+0x6e>
  } else if (m_fatType == 32) {
    3434:	80 32       	cpi	r24, 0x20	; 32
    3436:	a1 f5       	brne	.+104    	; 0x34a0 <_ZN8SdVolume6fatPutEmm+0xc4>
    lba = m_fatStartBlock + (cluster >> 7);
    3438:	9a 01       	movw	r18, r20
    343a:	ab 01       	movw	r20, r22
    343c:	17 e0       	ldi	r17, 0x07	; 7
    343e:	56 95       	lsr	r21
    3440:	47 95       	ror	r20
    3442:	37 95       	ror	r19
    3444:	27 95       	ror	r18
    3446:	1a 95       	dec	r17
    3448:	d1 f7       	brne	.-12     	; 0x343e <_ZN8SdVolume6fatPutEmm+0x62>
    344a:	8f 85       	ldd	r24, Y+15	; 0x0f
    344c:	98 89       	ldd	r25, Y+16	; 0x10
    344e:	a9 89       	ldd	r26, Y+17	; 0x11
    3450:	ba 89       	ldd	r27, Y+18	; 0x12
    3452:	28 0f       	add	r18, r24
    3454:	39 1f       	adc	r19, r25
    3456:	4a 1f       	adc	r20, r26
    3458:	5b 1f       	adc	r21, r27
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  pc = cacheFetchFat(lba, CACHE_FOR_WRITE);
    345a:	ca 01       	movw	r24, r20
    345c:	b9 01       	movw	r22, r18
    345e:	41 e0       	ldi	r20, 0x01	; 1
    3460:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <_ZN8SdVolume13cacheFetchFatEmh>
    3464:	9c 01       	movw	r18, r24
  if (!pc) {
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	d9 f0       	breq	.+54     	; 0x34a0 <_ZN8SdVolume6fatPutEmm+0xc4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // store entry
  if (m_fatType == 16) {
    346a:	8b 89       	ldd	r24, Y+19	; 0x13
    346c:	80 31       	cpi	r24, 0x10	; 16
    346e:	49 f4       	brne	.+18     	; 0x3482 <_ZN8SdVolume6fatPutEmm+0xa6>
    pc->fat16[cluster & 0XFF] = value;
    3470:	f6 01       	movw	r30, r12
    3472:	f0 70       	andi	r31, 0x00	; 0
    3474:	ee 0f       	add	r30, r30
    3476:	ff 1f       	adc	r31, r31
    3478:	e2 0f       	add	r30, r18
    347a:	f3 1f       	adc	r31, r19
    347c:	91 82       	std	Z+1, r9	; 0x01
    347e:	80 82       	st	Z, r8
    3480:	0d c0       	rjmp	.+26     	; 0x349c <_ZN8SdVolume6fatPutEmm+0xc0>
  } else {
    pc->fat32[cluster & 0X7F] = value;
    3482:	f6 01       	movw	r30, r12
    3484:	ef 77       	andi	r30, 0x7F	; 127
    3486:	f0 70       	andi	r31, 0x00	; 0
    3488:	ee 0f       	add	r30, r30
    348a:	ff 1f       	adc	r31, r31
    348c:	ee 0f       	add	r30, r30
    348e:	ff 1f       	adc	r31, r31
    3490:	e2 0f       	add	r30, r18
    3492:	f3 1f       	adc	r31, r19
    3494:	80 82       	st	Z, r8
    3496:	91 82       	std	Z+1, r9	; 0x01
    3498:	a2 82       	std	Z+2, r10	; 0x02
    349a:	b3 82       	std	Z+3, r11	; 0x03
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	01 c0       	rjmp	.+2      	; 0x34a2 <_ZN8SdVolume6fatPutEmm+0xc6>
    34a0:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;

 fail:
  return false;
}
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	ff 90       	pop	r15
    34ac:	ef 90       	pop	r14
    34ae:	df 90       	pop	r13
    34b0:	cf 90       	pop	r12
    34b2:	bf 90       	pop	r11
    34b4:	af 90       	pop	r10
    34b6:	9f 90       	pop	r9
    34b8:	8f 90       	pop	r8
    34ba:	08 95       	ret

000034bc <_ZN8SdVolume6fatGetEmPm>:
uint32_t SdVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
bool SdVolume::fatGet(uint32_t cluster, uint32_t* value) {
    34bc:	cf 92       	push	r12
    34be:	df 92       	push	r13
    34c0:	ef 92       	push	r14
    34c2:	ff 92       	push	r15
    34c4:	0f 93       	push	r16
    34c6:	1f 93       	push	r17
    34c8:	cf 93       	push	r28
    34ca:	df 93       	push	r29
    34cc:	ec 01       	movw	r28, r24
    34ce:	7a 01       	movw	r14, r20
    34d0:	8b 01       	movw	r16, r22
    34d2:	69 01       	movw	r12, r18
  uint32_t lba;
  cache_t* pc;
  // error if reserved cluster of beyond FAT
  if (cluster < 2  || cluster > (m_clusterCount + 1)) {
    34d4:	42 30       	cpi	r20, 0x02	; 2
    34d6:	51 05       	cpc	r21, r1
    34d8:	61 05       	cpc	r22, r1
    34da:	71 05       	cpc	r23, r1
    34dc:	08 f4       	brcc	.+2      	; 0x34e0 <_ZN8SdVolume6fatGetEmPm+0x24>
    34de:	53 c0       	rjmp	.+166    	; 0x3586 <_ZN8SdVolume6fatGetEmPm+0xca>
    34e0:	8e 81       	ldd	r24, Y+6	; 0x06
    34e2:	9f 81       	ldd	r25, Y+7	; 0x07
    34e4:	a8 85       	ldd	r26, Y+8	; 0x08
    34e6:	b9 85       	ldd	r27, Y+9	; 0x09
    34e8:	01 96       	adiw	r24, 0x01	; 1
    34ea:	a1 1d       	adc	r26, r1
    34ec:	b1 1d       	adc	r27, r1
    34ee:	84 17       	cp	r24, r20
    34f0:	95 07       	cpc	r25, r21
    34f2:	a6 07       	cpc	r26, r22
    34f4:	b7 07       	cpc	r27, r23
    34f6:	08 f4       	brcc	.+2      	; 0x34fa <_ZN8SdVolume6fatGetEmPm+0x3e>
    34f8:	46 c0       	rjmp	.+140    	; 0x3586 <_ZN8SdVolume6fatGetEmPm+0xca>
    }
    tmp |= pc->data[index] << 8;
    *value = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    return true;
  }
  if (m_fatType == 16) {
    34fa:	8b 89       	ldd	r24, Y+19	; 0x13
    34fc:	80 31       	cpi	r24, 0x10	; 16
    34fe:	29 f4       	brne	.+10     	; 0x350a <_ZN8SdVolume6fatGetEmPm+0x4e>
    lba = m_fatStartBlock + (cluster >> 8);
    3500:	55 27       	eor	r21, r21
    3502:	41 2f       	mov	r20, r17
    3504:	30 2f       	mov	r19, r16
    3506:	2f 2d       	mov	r18, r15
    3508:	0b c0       	rjmp	.+22     	; 0x3520 <_ZN8SdVolume6fatGetEmPm+0x64>
  } else if (m_fatType == 32) {
    350a:	80 32       	cpi	r24, 0x20	; 32
    350c:	e1 f5       	brne	.+120    	; 0x3586 <_ZN8SdVolume6fatGetEmPm+0xca>
    lba = m_fatStartBlock + (cluster >> 7);
    350e:	9a 01       	movw	r18, r20
    3510:	ab 01       	movw	r20, r22
    3512:	67 e0       	ldi	r22, 0x07	; 7
    3514:	56 95       	lsr	r21
    3516:	47 95       	ror	r20
    3518:	37 95       	ror	r19
    351a:	27 95       	ror	r18
    351c:	6a 95       	dec	r22
    351e:	d1 f7       	brne	.-12     	; 0x3514 <_ZN8SdVolume6fatGetEmPm+0x58>
    3520:	8f 85       	ldd	r24, Y+15	; 0x0f
    3522:	98 89       	ldd	r25, Y+16	; 0x10
    3524:	a9 89       	ldd	r26, Y+17	; 0x11
    3526:	ba 89       	ldd	r27, Y+18	; 0x12
    3528:	28 0f       	add	r18, r24
    352a:	39 1f       	adc	r19, r25
    352c:	4a 1f       	adc	r20, r26
    352e:	5b 1f       	adc	r21, r27
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  pc = cacheFetchFat(lba, CACHE_FOR_READ);
    3530:	ca 01       	movw	r24, r20
    3532:	b9 01       	movw	r22, r18
    3534:	40 e0       	ldi	r20, 0x00	; 0
    3536:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <_ZN8SdVolume13cacheFetchFatEmh>
    353a:	9c 01       	movw	r18, r24
  if (!pc) {
    353c:	00 97       	sbiw	r24, 0x00	; 0
    353e:	19 f1       	breq	.+70     	; 0x3586 <_ZN8SdVolume6fatGetEmPm+0xca>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_fatType == 16) {
    3540:	8b 89       	ldd	r24, Y+19	; 0x13
    3542:	80 31       	cpi	r24, 0x10	; 16
    3544:	59 f4       	brne	.+22     	; 0x355c <_ZN8SdVolume6fatGetEmPm+0xa0>
    *value = pc->fat16[cluster & 0XFF];
    3546:	f7 01       	movw	r30, r14
    3548:	f0 70       	andi	r31, 0x00	; 0
    354a:	ee 0f       	add	r30, r30
    354c:	ff 1f       	adc	r31, r31
    354e:	e2 0f       	add	r30, r18
    3550:	f3 1f       	adc	r31, r19
    3552:	80 81       	ld	r24, Z
    3554:	91 81       	ldd	r25, Z+1	; 0x01
    3556:	a0 e0       	ldi	r26, 0x00	; 0
    3558:	b0 e0       	ldi	r27, 0x00	; 0
    355a:	0e c0       	rjmp	.+28     	; 0x3578 <_ZN8SdVolume6fatGetEmPm+0xbc>
  } else {
    *value = pc->fat32[cluster & 0X7F] & FAT32MASK;
    355c:	f7 01       	movw	r30, r14
    355e:	ef 77       	andi	r30, 0x7F	; 127
    3560:	f0 70       	andi	r31, 0x00	; 0
    3562:	ee 0f       	add	r30, r30
    3564:	ff 1f       	adc	r31, r31
    3566:	ee 0f       	add	r30, r30
    3568:	ff 1f       	adc	r31, r31
    356a:	e2 0f       	add	r30, r18
    356c:	f3 1f       	adc	r31, r19
    356e:	80 81       	ld	r24, Z
    3570:	91 81       	ldd	r25, Z+1	; 0x01
    3572:	a2 81       	ldd	r26, Z+2	; 0x02
    3574:	b3 81       	ldd	r27, Z+3	; 0x03
    3576:	bf 70       	andi	r27, 0x0F	; 15
    3578:	f6 01       	movw	r30, r12
    357a:	80 83       	st	Z, r24
    357c:	91 83       	std	Z+1, r25	; 0x01
    357e:	a2 83       	std	Z+2, r26	; 0x02
    3580:	b3 83       	std	Z+3, r27	; 0x03
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	01 c0       	rjmp	.+2      	; 0x3588 <_ZN8SdVolume6fatGetEmPm+0xcc>
    3586:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;

 fail:
  return false;
}
    3588:	df 91       	pop	r29
    358a:	cf 91       	pop	r28
    358c:	1f 91       	pop	r17
    358e:	0f 91       	pop	r16
    3590:	ff 90       	pop	r15
    3592:	ef 90       	pop	r14
    3594:	df 90       	pop	r13
    3596:	cf 90       	pop	r12
    3598:	08 95       	ret

0000359a <_ZN8SdVolume9freeChainEm>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool SdVolume::freeChain(uint32_t cluster) {
    359a:	8f 92       	push	r8
    359c:	9f 92       	push	r9
    359e:	af 92       	push	r10
    35a0:	bf 92       	push	r11
    35a2:	cf 92       	push	r12
    35a4:	df 92       	push	r13
    35a6:	ef 92       	push	r14
    35a8:	ff 92       	push	r15
    35aa:	0f 93       	push	r16
    35ac:	1f 93       	push	r17
    35ae:	df 93       	push	r29
    35b0:	cf 93       	push	r28
    35b2:	00 d0       	rcall	.+0      	; 0x35b4 <_ZN8SdVolume9freeChainEm+0x1a>
    35b4:	0f 92       	push	r0
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	5c 01       	movw	r10, r24
    35bc:	6a 01       	movw	r12, r20
    35be:	7b 01       	movw	r14, r22
  uint32_t next;

  do {
    if (!fatGet(cluster, &next)) {
    35c0:	4e 01       	movw	r8, r28
    35c2:	08 94       	sec
    35c4:	81 1c       	adc	r8, r1
    35c6:	91 1c       	adc	r9, r1
    35c8:	c5 01       	movw	r24, r10
    35ca:	b7 01       	movw	r22, r14
    35cc:	a6 01       	movw	r20, r12
    35ce:	94 01       	movw	r18, r8
    35d0:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN8SdVolume6fatGetEmPm>
    35d4:	88 23       	and	r24, r24
    35d6:	b1 f1       	breq	.+108    	; 0x3644 <_ZN8SdVolume9freeChainEm+0xaa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    35d8:	c5 01       	movw	r24, r10
    35da:	b7 01       	movw	r22, r14
    35dc:	a6 01       	movw	r20, r12
    35de:	00 e0       	ldi	r16, 0x00	; 0
    35e0:	10 e0       	ldi	r17, 0x00	; 0
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8SdVolume6fatPutEmm>
    35ea:	88 23       	and	r24, r24
    35ec:	59 f1       	breq	.+86     	; 0x3644 <_ZN8SdVolume9freeChainEm+0xaa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (cluster < m_allocSearchStart) m_allocSearchStart = cluster;
    35ee:	f5 01       	movw	r30, r10
    35f0:	80 81       	ld	r24, Z
    35f2:	91 81       	ldd	r25, Z+1	; 0x01
    35f4:	a2 81       	ldd	r26, Z+2	; 0x02
    35f6:	b3 81       	ldd	r27, Z+3	; 0x03
    35f8:	c8 16       	cp	r12, r24
    35fa:	d9 06       	cpc	r13, r25
    35fc:	ea 06       	cpc	r14, r26
    35fe:	fb 06       	cpc	r15, r27
    3600:	20 f4       	brcc	.+8      	; 0x360a <_ZN8SdVolume9freeChainEm+0x70>
    3602:	c0 82       	st	Z, r12
    3604:	d1 82       	std	Z+1, r13	; 0x01
    3606:	e2 82       	std	Z+2, r14	; 0x02
    3608:	f3 82       	std	Z+3, r15	; 0x03
    cluster = next;
    360a:	c9 80       	ldd	r12, Y+1	; 0x01
    360c:	da 80       	ldd	r13, Y+2	; 0x02
    360e:	eb 80       	ldd	r14, Y+3	; 0x03
    3610:	fc 80       	ldd	r15, Y+4	; 0x04
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && m_fatType == 12) return  cluster >= FAT12EOC_MIN;
    if (m_fatType == 16) return cluster >= FAT16EOC_MIN;
    3612:	f5 01       	movw	r30, r10
    3614:	83 89       	ldd	r24, Z+19	; 0x13
    3616:	80 31       	cpi	r24, 0x10	; 16
    3618:	51 f4       	brne	.+20     	; 0x362e <_ZN8SdVolume9freeChainEm+0x94>
    361a:	f8 ef       	ldi	r31, 0xF8	; 248
    361c:	cf 16       	cp	r12, r31
    361e:	ff ef       	ldi	r31, 0xFF	; 255
    3620:	df 06       	cpc	r13, r31
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	ef 06       	cpc	r14, r31
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	ff 06       	cpc	r15, r31
    362a:	70 f2       	brcs	.-100    	; 0x35c8 <_ZN8SdVolume9freeChainEm+0x2e>
    362c:	09 c0       	rjmp	.+18     	; 0x3640 <_ZN8SdVolume9freeChainEm+0xa6>
    return  cluster >= FAT32EOC_MIN;
    362e:	88 ef       	ldi	r24, 0xF8	; 248
    3630:	c8 16       	cp	r12, r24
    3632:	8f ef       	ldi	r24, 0xFF	; 255
    3634:	d8 06       	cpc	r13, r24
    3636:	8f ef       	ldi	r24, 0xFF	; 255
    3638:	e8 06       	cpc	r14, r24
    363a:	8f e0       	ldi	r24, 0x0F	; 15
    363c:	f8 06       	cpc	r15, r24
    363e:	20 f2       	brcs	.-120    	; 0x35c8 <_ZN8SdVolume9freeChainEm+0x2e>
//------------------------------------------------------------------------------
// free a cluster chain
bool SdVolume::freeChain(uint32_t cluster) {
  uint32_t next;

  do {
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	01 c0       	rjmp	.+2      	; 0x3646 <_ZN8SdVolume9freeChainEm+0xac>
    3644:	80 e0       	ldi	r24, 0x00	; 0

  return true;

 fail:
  return false;
}
    3646:	0f 90       	pop	r0
    3648:	0f 90       	pop	r0
    364a:	0f 90       	pop	r0
    364c:	0f 90       	pop	r0
    364e:	cf 91       	pop	r28
    3650:	df 91       	pop	r29
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	ff 90       	pop	r15
    3658:	ef 90       	pop	r14
    365a:	df 90       	pop	r13
    365c:	cf 90       	pop	r12
    365e:	bf 90       	pop	r11
    3660:	af 90       	pop	r10
    3662:	9f 90       	pop	r9
    3664:	8f 90       	pop	r8
    3666:	08 95       	ret

00003668 <_ZN8SdVolume15allocContiguousEmPm>:
#endif  // USE_SEPARATE_FAT_CACHE
Sd2Card* SdVolume::m_sdCard;            // pointer to SD card object
#endif  // USE_MULTIPLE_CARDS
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3668:	2f 92       	push	r2
    366a:	3f 92       	push	r3
    366c:	4f 92       	push	r4
    366e:	5f 92       	push	r5
    3670:	6f 92       	push	r6
    3672:	7f 92       	push	r7
    3674:	8f 92       	push	r8
    3676:	9f 92       	push	r9
    3678:	af 92       	push	r10
    367a:	bf 92       	push	r11
    367c:	cf 92       	push	r12
    367e:	df 92       	push	r13
    3680:	ef 92       	push	r14
    3682:	ff 92       	push	r15
    3684:	0f 93       	push	r16
    3686:	1f 93       	push	r17
    3688:	df 93       	push	r29
    368a:	cf 93       	push	r28
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    3690:	66 97       	sbiw	r28, 0x16	; 22
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	1c 01       	movw	r2, r24
    369e:	49 87       	std	Y+9, r20	; 0x09
    36a0:	5a 87       	std	Y+10, r21	; 0x0a
    36a2:	6b 87       	std	Y+11, r22	; 0x0b
    36a4:	7c 87       	std	Y+12, r23	; 0x0c
    36a6:	3e 87       	std	Y+14, r19	; 0x0e
    36a8:	2d 87       	std	Y+13, r18	; 0x0d
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // last cluster of FAT
  uint32_t fatEnd = m_clusterCount + 1;
    36aa:	dc 01       	movw	r26, r24
    36ac:	16 96       	adiw	r26, 0x06	; 6
    36ae:	2d 91       	ld	r18, X+
    36b0:	3d 91       	ld	r19, X+
    36b2:	4d 91       	ld	r20, X+
    36b4:	5c 91       	ld	r21, X
    36b6:	19 97       	sbiw	r26, 0x09	; 9
    36b8:	2f 5f       	subi	r18, 0xFF	; 255
    36ba:	3f 4f       	sbci	r19, 0xFF	; 255
    36bc:	4f 4f       	sbci	r20, 0xFF	; 255
    36be:	5f 4f       	sbci	r21, 0xFF	; 255
    36c0:	2d 83       	std	Y+5, r18	; 0x05
    36c2:	3e 83       	std	Y+6, r19	; 0x06
    36c4:	4f 83       	std	Y+7, r20	; 0x07
    36c6:	58 87       	std	Y+8, r21	; 0x08

  // flag to save place to start next search
  bool setStart;

  // set search start cluster
  if (*curCluster) {
    36c8:	ed 85       	ldd	r30, Y+13	; 0x0d
    36ca:	fe 85       	ldd	r31, Y+14	; 0x0e
    36cc:	00 81       	ld	r16, Z
    36ce:	11 81       	ldd	r17, Z+1	; 0x01
    36d0:	22 81       	ldd	r18, Z+2	; 0x02
    36d2:	33 81       	ldd	r19, Z+3	; 0x03
    36d4:	01 15       	cp	r16, r1
    36d6:	11 05       	cpc	r17, r1
    36d8:	21 05       	cpc	r18, r1
    36da:	31 05       	cpc	r19, r1
    36dc:	49 f0       	breq	.+18     	; 0x36f0 <_ZN8SdVolume15allocContiguousEmPm+0x88>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    36de:	48 01       	movw	r8, r16
    36e0:	59 01       	movw	r10, r18
    36e2:	08 94       	sec
    36e4:	81 1c       	adc	r8, r1
    36e6:	91 1c       	adc	r9, r1
    36e8:	a1 1c       	adc	r10, r1
    36ea:	b1 1c       	adc	r11, r1
    36ec:	10 e0       	ldi	r17, 0x00	; 0
    36ee:	06 c0       	rjmp	.+12     	; 0x36fc <_ZN8SdVolume15allocContiguousEmPm+0x94>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = m_allocSearchStart;
    36f0:	dc 01       	movw	r26, r24
    36f2:	8d 90       	ld	r8, X+
    36f4:	9d 90       	ld	r9, X+
    36f6:	ad 90       	ld	r10, X+
    36f8:	bc 90       	ld	r11, X
    36fa:	11 e0       	ldi	r17, 0x01	; 1
    36fc:	75 01       	movw	r14, r10
    36fe:	64 01       	movw	r12, r8
    3700:	44 24       	eor	r4, r4
    3702:	55 24       	eor	r5, r5
    3704:	32 01       	movw	r6, r4
  endCluster = bgnCluster;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= m_clusterCount) {
    3706:	f1 01       	movw	r30, r2
    3708:	86 81       	ldd	r24, Z+6	; 0x06
    370a:	97 81       	ldd	r25, Z+7	; 0x07
    370c:	a0 85       	ldd	r26, Z+8	; 0x08
    370e:	b1 85       	ldd	r27, Z+9	; 0x09
    3710:	48 16       	cp	r4, r24
    3712:	59 06       	cpc	r5, r25
    3714:	6a 06       	cpc	r6, r26
    3716:	7b 06       	cpc	r7, r27
    3718:	08 f0       	brcs	.+2      	; 0x371c <_ZN8SdVolume15allocContiguousEmPm+0xb4>
    371a:	9d c0       	rjmp	.+314    	; 0x3856 <_ZN8SdVolume15allocContiguousEmPm+0x1ee>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    371c:	2d 81       	ldd	r18, Y+5	; 0x05
    371e:	3e 81       	ldd	r19, Y+6	; 0x06
    3720:	4f 81       	ldd	r20, Y+7	; 0x07
    3722:	58 85       	ldd	r21, Y+8	; 0x08
    3724:	2c 15       	cp	r18, r12
    3726:	3d 05       	cpc	r19, r13
    3728:	4e 05       	cpc	r20, r14
    372a:	5f 05       	cpc	r21, r15
    372c:	50 f4       	brcc	.+20     	; 0x3742 <_ZN8SdVolume15allocContiguousEmPm+0xda>
    372e:	f2 e0       	ldi	r31, 0x02	; 2
    3730:	8f 2e       	mov	r8, r31
    3732:	91 2c       	mov	r9, r1
    3734:	a1 2c       	mov	r10, r1
    3736:	b1 2c       	mov	r11, r1
    3738:	e2 e0       	ldi	r30, 0x02	; 2
    373a:	ce 2e       	mov	r12, r30
    373c:	d1 2c       	mov	r13, r1
    373e:	e1 2c       	mov	r14, r1
    3740:	f1 2c       	mov	r15, r1
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) {
    3742:	c1 01       	movw	r24, r2
    3744:	b7 01       	movw	r22, r14
    3746:	a6 01       	movw	r20, r12
    3748:	9e 01       	movw	r18, r28
    374a:	2f 5f       	subi	r18, 0xFF	; 255
    374c:	3f 4f       	sbci	r19, 0xFF	; 255
    374e:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN8SdVolume6fatGetEmPm>
    3752:	88 23       	and	r24, r24
    3754:	09 f4       	brne	.+2      	; 0x3758 <_ZN8SdVolume15allocContiguousEmPm+0xf0>
    3756:	7f c0       	rjmp	.+254    	; 0x3856 <_ZN8SdVolume15allocContiguousEmPm+0x1ee>
      DBG_FAIL_MACRO;
      goto fail;
    }

    if (f != 0) {
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	9a 81       	ldd	r25, Y+2	; 0x02
    375c:	ab 81       	ldd	r26, Y+3	; 0x03
    375e:	bc 81       	ldd	r27, Y+4	; 0x04
    3760:	00 97       	sbiw	r24, 0x00	; 0
    3762:	a1 05       	cpc	r26, r1
    3764:	b1 05       	cpc	r27, r1
    3766:	71 f0       	breq	.+28     	; 0x3784 <_ZN8SdVolume15allocContiguousEmPm+0x11c>
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) setStart = false;
    3768:	8c 14       	cp	r8, r12
    376a:	9d 04       	cpc	r9, r13
    376c:	ae 04       	cpc	r10, r14
    376e:	bf 04       	cpc	r11, r15
    3770:	09 f0       	breq	.+2      	; 0x3774 <_ZN8SdVolume15allocContiguousEmPm+0x10c>
    3772:	10 e0       	ldi	r17, 0x00	; 0
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    3774:	46 01       	movw	r8, r12
    3776:	57 01       	movw	r10, r14
    3778:	08 94       	sec
    377a:	81 1c       	adc	r8, r1
    377c:	91 1c       	adc	r9, r1
    377e:	a1 1c       	adc	r10, r1
    3780:	b1 1c       	adc	r11, r1
    3782:	16 c0       	rjmp	.+44     	; 0x37b0 <_ZN8SdVolume15allocContiguousEmPm+0x148>
    } else if ((endCluster - bgnCluster + 1) == count) {
    3784:	d7 01       	movw	r26, r14
    3786:	c6 01       	movw	r24, r12
    3788:	01 96       	adiw	r24, 0x01	; 1
    378a:	a1 1d       	adc	r26, r1
    378c:	b1 1d       	adc	r27, r1
    378e:	8b 8b       	std	Y+19, r24	; 0x13
    3790:	9c 8b       	std	Y+20, r25	; 0x14
    3792:	ad 8b       	std	Y+21, r26	; 0x15
    3794:	be 8b       	std	Y+22, r27	; 0x16
    3796:	88 19       	sub	r24, r8
    3798:	99 09       	sbc	r25, r9
    379a:	aa 09       	sbc	r26, r10
    379c:	bb 09       	sbc	r27, r11
    379e:	29 85       	ldd	r18, Y+9	; 0x09
    37a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    37a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    37a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    37a6:	82 17       	cp	r24, r18
    37a8:	93 07       	cpc	r25, r19
    37aa:	a4 07       	cpc	r26, r20
    37ac:	b5 07       	cpc	r27, r21
    37ae:	59 f0       	breq	.+22     	; 0x37c6 <_ZN8SdVolume15allocContiguousEmPm+0x15e>
  }
  // end of group
  endCluster = bgnCluster;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    37b0:	08 94       	sec
    37b2:	41 1c       	adc	r4, r1
    37b4:	51 1c       	adc	r5, r1
    37b6:	61 1c       	adc	r6, r1
    37b8:	71 1c       	adc	r7, r1
    37ba:	08 94       	sec
    37bc:	c1 1c       	adc	r12, r1
    37be:	d1 1c       	adc	r13, r1
    37c0:	e1 1c       	adc	r14, r1
    37c2:	f1 1c       	adc	r15, r1
    37c4:	a0 cf       	rjmp	.-192    	; 0x3706 <_ZN8SdVolume15allocContiguousEmPm+0x9e>
      // done - found space
      break;
    }
  }
  // remember possible next free cluster
  if (setStart) m_allocSearchStart = endCluster + 1;
    37c6:	11 23       	and	r17, r17
    37c8:	49 f0       	breq	.+18     	; 0x37dc <_ZN8SdVolume15allocContiguousEmPm+0x174>
    37ca:	8b 89       	ldd	r24, Y+19	; 0x13
    37cc:	9c 89       	ldd	r25, Y+20	; 0x14
    37ce:	ad 89       	ldd	r26, Y+21	; 0x15
    37d0:	be 89       	ldd	r27, Y+22	; 0x16
    37d2:	f1 01       	movw	r30, r2
    37d4:	80 83       	st	Z, r24
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	a2 83       	std	Z+2, r26	; 0x02
    37da:	b3 83       	std	Z+3, r27	; 0x03
    return (position >> 9) & m_clusterBlockMask;}
  uint32_t clusterStartBlock(uint32_t cluster) const;
  bool fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    37dc:	c1 01       	movw	r24, r2
    37de:	b7 01       	movw	r22, r14
    37e0:	a6 01       	movw	r20, r12
    37e2:	0f ef       	ldi	r16, 0xFF	; 255
    37e4:	1f ef       	ldi	r17, 0xFF	; 255
    37e6:	2f ef       	ldi	r18, 0xFF	; 255
    37e8:	3f e0       	ldi	r19, 0x0F	; 15
    37ea:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8SdVolume6fatPutEmm>

  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    37ee:	88 23       	and	r24, r24
    37f0:	99 f4       	brne	.+38     	; 0x3818 <_ZN8SdVolume15allocContiguousEmPm+0x1b0>
    37f2:	31 c0       	rjmp	.+98     	; 0x3856 <_ZN8SdVolume15allocContiguousEmPm+0x1ee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) {
    37f4:	26 01       	movw	r4, r12
    37f6:	37 01       	movw	r6, r14
    37f8:	08 94       	sec
    37fa:	41 08       	sbc	r4, r1
    37fc:	51 08       	sbc	r5, r1
    37fe:	61 08       	sbc	r6, r1
    3800:	71 08       	sbc	r7, r1
    3802:	c1 01       	movw	r24, r2
    3804:	b3 01       	movw	r22, r6
    3806:	a2 01       	movw	r20, r4
    3808:	97 01       	movw	r18, r14
    380a:	86 01       	movw	r16, r12
    380c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8SdVolume6fatPutEmm>
    3810:	88 23       	and	r24, r24
    3812:	09 f1       	breq	.+66     	; 0x3856 <_ZN8SdVolume15allocContiguousEmPm+0x1ee>
      DBG_FAIL_MACRO;
      goto fail;
    3814:	73 01       	movw	r14, r6
    3816:	62 01       	movw	r12, r4
  if (!fatPutEOC(endCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    3818:	8c 14       	cp	r8, r12
    381a:	9d 04       	cpc	r9, r13
    381c:	ae 04       	cpc	r10, r14
    381e:	bf 04       	cpc	r11, r15
    3820:	48 f3       	brcs	.-46     	; 0x37f4 <_ZN8SdVolume15allocContiguousEmPm+0x18c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    endCluster--;
  }
  if (*curCluster != 0) {
    3822:	ad 85       	ldd	r26, Y+13	; 0x0d
    3824:	be 85       	ldd	r27, Y+14	; 0x0e
    3826:	4d 91       	ld	r20, X+
    3828:	5d 91       	ld	r21, X+
    382a:	6d 91       	ld	r22, X+
    382c:	7c 91       	ld	r23, X
    382e:	41 15       	cp	r20, r1
    3830:	51 05       	cpc	r21, r1
    3832:	61 05       	cpc	r22, r1
    3834:	71 05       	cpc	r23, r1
    3836:	39 f0       	breq	.+14     	; 0x3846 <_ZN8SdVolume15allocContiguousEmPm+0x1de>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) {
    3838:	c1 01       	movw	r24, r2
    383a:	95 01       	movw	r18, r10
    383c:	84 01       	movw	r16, r8
    383e:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN8SdVolume6fatPutEmm>
    3842:	88 23       	and	r24, r24
    3844:	41 f0       	breq	.+16     	; 0x3856 <_ZN8SdVolume15allocContiguousEmPm+0x1ee>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    3846:	ed 85       	ldd	r30, Y+13	; 0x0d
    3848:	fe 85       	ldd	r31, Y+14	; 0x0e
    384a:	80 82       	st	Z, r8
    384c:	91 82       	std	Z+1, r9	; 0x01
    384e:	a2 82       	std	Z+2, r10	; 0x02
    3850:	b3 82       	std	Z+3, r11	; 0x03
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	01 c0       	rjmp	.+2      	; 0x3858 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
  return true;
    3856:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    3858:	66 96       	adiw	r28, 0x16	; 22
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	f8 94       	cli
    385e:	de bf       	out	0x3e, r29	; 62
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	cd bf       	out	0x3d, r28	; 61
    3864:	cf 91       	pop	r28
    3866:	df 91       	pop	r29
    3868:	1f 91       	pop	r17
    386a:	0f 91       	pop	r16
    386c:	ff 90       	pop	r15
    386e:	ef 90       	pop	r14
    3870:	df 90       	pop	r13
    3872:	cf 90       	pop	r12
    3874:	bf 90       	pop	r11
    3876:	af 90       	pop	r10
    3878:	9f 90       	pop	r9
    387a:	8f 90       	pop	r8
    387c:	7f 90       	pop	r7
    387e:	6f 90       	pop	r6
    3880:	5f 90       	pop	r5
    3882:	4f 90       	pop	r4
    3884:	3f 90       	pop	r3
    3886:	2f 90       	pop	r2
    3888:	08 95       	ret

0000388a <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    388a:	1f 92       	push	r1
    388c:	0f 92       	push	r0
    388e:	0f b6       	in	r0, 0x3f	; 63
    3890:	0f 92       	push	r0
    3892:	11 24       	eor	r1, r1
    3894:	2f 93       	push	r18
    3896:	3f 93       	push	r19
    3898:	8f 93       	push	r24
    389a:	9f 93       	push	r25
    389c:	af 93       	push	r26
    389e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    38a0:	80 91 cd 08 	lds	r24, 0x08CD
    38a4:	90 91 ce 08 	lds	r25, 0x08CE
    38a8:	a0 91 cf 08 	lds	r26, 0x08CF
    38ac:	b0 91 d0 08 	lds	r27, 0x08D0
	unsigned char f = timer0_fract;
    38b0:	30 91 d1 08 	lds	r19, 0x08D1

	m += MILLIS_INC;
    38b4:	01 96       	adiw	r24, 0x01	; 1
    38b6:	a1 1d       	adc	r26, r1
    38b8:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    38ba:	23 2f       	mov	r18, r19
    38bc:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    38be:	2d 37       	cpi	r18, 0x7D	; 125
    38c0:	20 f0       	brcs	.+8      	; 0x38ca <__vector_23+0x40>
		f -= FRACT_MAX;
    38c2:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    38c4:	01 96       	adiw	r24, 0x01	; 1
    38c6:	a1 1d       	adc	r26, r1
    38c8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    38ca:	20 93 d1 08 	sts	0x08D1, r18
	timer0_millis = m;
    38ce:	80 93 cd 08 	sts	0x08CD, r24
    38d2:	90 93 ce 08 	sts	0x08CE, r25
    38d6:	a0 93 cf 08 	sts	0x08CF, r26
    38da:	b0 93 d0 08 	sts	0x08D0, r27
	timer0_overflow_count++;
    38de:	80 91 c9 08 	lds	r24, 0x08C9
    38e2:	90 91 ca 08 	lds	r25, 0x08CA
    38e6:	a0 91 cb 08 	lds	r26, 0x08CB
    38ea:	b0 91 cc 08 	lds	r27, 0x08CC
    38ee:	01 96       	adiw	r24, 0x01	; 1
    38f0:	a1 1d       	adc	r26, r1
    38f2:	b1 1d       	adc	r27, r1
    38f4:	80 93 c9 08 	sts	0x08C9, r24
    38f8:	90 93 ca 08 	sts	0x08CA, r25
    38fc:	a0 93 cb 08 	sts	0x08CB, r26
    3900:	b0 93 cc 08 	sts	0x08CC, r27
}
    3904:	bf 91       	pop	r27
    3906:	af 91       	pop	r26
    3908:	9f 91       	pop	r25
    390a:	8f 91       	pop	r24
    390c:	3f 91       	pop	r19
    390e:	2f 91       	pop	r18
    3910:	0f 90       	pop	r0
    3912:	0f be       	out	0x3f, r0	; 63
    3914:	0f 90       	pop	r0
    3916:	1f 90       	pop	r1
    3918:	18 95       	reti

0000391a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    391a:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    391c:	f8 94       	cli
	m = timer0_millis;
    391e:	20 91 cd 08 	lds	r18, 0x08CD
    3922:	30 91 ce 08 	lds	r19, 0x08CE
    3926:	40 91 cf 08 	lds	r20, 0x08CF
    392a:	50 91 d0 08 	lds	r21, 0x08D0
	SREG = oldSREG;
    392e:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    3930:	b9 01       	movw	r22, r18
    3932:	ca 01       	movw	r24, r20
    3934:	08 95       	ret

00003936 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3936:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    3938:	f8 94       	cli
	m = timer0_overflow_count;
    393a:	20 91 c9 08 	lds	r18, 0x08C9
    393e:	30 91 ca 08 	lds	r19, 0x08CA
    3942:	40 91 cb 08 	lds	r20, 0x08CB
    3946:	50 91 cc 08 	lds	r21, 0x08CC
#if defined(TCNT0)
	t = TCNT0;
    394a:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    394c:	a8 9b       	sbis	0x15, 0	; 21
    394e:	06 c0       	rjmp	.+12     	; 0x395c <micros+0x26>
    3950:	8f 3f       	cpi	r24, 0xFF	; 255
    3952:	21 f0       	breq	.+8      	; 0x395c <micros+0x26>
		m++;
    3954:	2f 5f       	subi	r18, 0xFF	; 255
    3956:	3f 4f       	sbci	r19, 0xFF	; 255
    3958:	4f 4f       	sbci	r20, 0xFF	; 255
    395a:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    395c:	9f bf       	out	0x3f, r25	; 63
    395e:	54 2f       	mov	r21, r20
    3960:	43 2f       	mov	r20, r19
    3962:	32 2f       	mov	r19, r18
    3964:	22 27       	eor	r18, r18
    3966:	28 0f       	add	r18, r24
    3968:	31 1d       	adc	r19, r1
    396a:	41 1d       	adc	r20, r1
    396c:	51 1d       	adc	r21, r1
    396e:	82 e0       	ldi	r24, 0x02	; 2
    3970:	22 0f       	add	r18, r18
    3972:	33 1f       	adc	r19, r19
    3974:	44 1f       	adc	r20, r20
    3976:	55 1f       	adc	r21, r21
    3978:	8a 95       	dec	r24
    397a:	d1 f7       	brne	.-12     	; 0x3970 <micros+0x3a>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
    397c:	b9 01       	movw	r22, r18
    397e:	ca 01       	movw	r24, r20
    3980:	08 95       	ret

00003982 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3982:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3984:	84 b5       	in	r24, 0x24	; 36
    3986:	82 60       	ori	r24, 0x02	; 2
    3988:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    398a:	84 b5       	in	r24, 0x24	; 36
    398c:	81 60       	ori	r24, 0x01	; 1
    398e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3990:	85 b5       	in	r24, 0x25	; 37
    3992:	82 60       	ori	r24, 0x02	; 2
    3994:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3996:	85 b5       	in	r24, 0x25	; 37
    3998:	81 60       	ori	r24, 0x01	; 1
    399a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    399c:	ee e6       	ldi	r30, 0x6E	; 110
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	80 81       	ld	r24, Z
    39a2:	81 60       	ori	r24, 0x01	; 1
    39a4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    39a6:	e1 e8       	ldi	r30, 0x81	; 129
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    39ac:	80 81       	ld	r24, Z
    39ae:	82 60       	ori	r24, 0x02	; 2
    39b0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    39b2:	80 81       	ld	r24, Z
    39b4:	81 60       	ori	r24, 0x01	; 1
    39b6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    39b8:	e0 e8       	ldi	r30, 0x80	; 128
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	81 60       	ori	r24, 0x01	; 1
    39c0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    39c2:	e1 eb       	ldi	r30, 0xB1	; 177
    39c4:	f0 e0       	ldi	r31, 0x00	; 0
    39c6:	80 81       	ld	r24, Z
    39c8:	84 60       	ori	r24, 0x04	; 4
    39ca:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    39cc:	e0 eb       	ldi	r30, 0xB0	; 176
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	80 81       	ld	r24, Z
    39d2:	81 60       	ori	r24, 0x01	; 1
    39d4:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    39d6:	e1 e9       	ldi	r30, 0x91	; 145
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	80 81       	ld	r24, Z
    39dc:	82 60       	ori	r24, 0x02	; 2
    39de:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    39e0:	80 81       	ld	r24, Z
    39e2:	81 60       	ori	r24, 0x01	; 1
    39e4:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    39e6:	e0 e9       	ldi	r30, 0x90	; 144
    39e8:	f0 e0       	ldi	r31, 0x00	; 0
    39ea:	80 81       	ld	r24, Z
    39ec:	81 60       	ori	r24, 0x01	; 1
    39ee:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    39f0:	e1 ea       	ldi	r30, 0xA1	; 161
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	80 81       	ld	r24, Z
    39f6:	82 60       	ori	r24, 0x02	; 2
    39f8:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    39fa:	80 81       	ld	r24, Z
    39fc:	81 60       	ori	r24, 0x01	; 1
    39fe:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    3a00:	e0 ea       	ldi	r30, 0xA0	; 160
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	80 81       	ld	r24, Z
    3a06:	81 60       	ori	r24, 0x01	; 1
    3a08:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    3a0a:	e1 e2       	ldi	r30, 0x21	; 33
    3a0c:	f1 e0       	ldi	r31, 0x01	; 1
    3a0e:	80 81       	ld	r24, Z
    3a10:	82 60       	ori	r24, 0x02	; 2
    3a12:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    3a14:	80 81       	ld	r24, Z
    3a16:	81 60       	ori	r24, 0x01	; 1
    3a18:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    3a1a:	e0 e2       	ldi	r30, 0x20	; 32
    3a1c:	f1 e0       	ldi	r31, 0x01	; 1
    3a1e:	80 81       	ld	r24, Z
    3a20:	81 60       	ori	r24, 0x01	; 1
    3a22:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    3a24:	ea e7       	ldi	r30, 0x7A	; 122
    3a26:	f0 e0       	ldi	r31, 0x00	; 0
    3a28:	80 81       	ld	r24, Z
    3a2a:	84 60       	ori	r24, 0x04	; 4
    3a2c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    3a2e:	80 81       	ld	r24, Z
    3a30:	82 60       	ori	r24, 0x02	; 2
    3a32:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    3a34:	80 81       	ld	r24, Z
    3a36:	81 60       	ori	r24, 0x01	; 1
    3a38:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3a3a:	80 81       	ld	r24, Z
    3a3c:	80 68       	ori	r24, 0x80	; 128
    3a3e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3a40:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    3a44:	08 95       	ret

00003a46 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    3a46:	ef 92       	push	r14
    3a48:	ff 92       	push	r15
    3a4a:	0f 93       	push	r16
    3a4c:	1f 93       	push	r17
    3a4e:	cf 93       	push	r28
    3a50:	df 93       	push	r29
    3a52:	7b 01       	movw	r14, r22
    3a54:	8c 01       	movw	r16, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3a56:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    3a58:	f8 94       	cli
	m = timer0_overflow_count;
    3a5a:	80 91 c9 08 	lds	r24, 0x08C9
    3a5e:	90 91 ca 08 	lds	r25, 0x08CA
    3a62:	a0 91 cb 08 	lds	r26, 0x08CB
    3a66:	b0 91 cc 08 	lds	r27, 0x08CC
#if defined(TCNT0)
	t = TCNT0;
    3a6a:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3a6c:	a8 9b       	sbis	0x15, 0	; 21
    3a6e:	05 c0       	rjmp	.+10     	; 0x3a7a <delay+0x34>
    3a70:	2f 3f       	cpi	r18, 0xFF	; 255
    3a72:	19 f0       	breq	.+6      	; 0x3a7a <delay+0x34>
		m++;
    3a74:	01 96       	adiw	r24, 0x01	; 1
    3a76:	a1 1d       	adc	r26, r1
    3a78:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3a7a:	3f bf       	out	0x3f, r19	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    3a7c:	ba 2f       	mov	r27, r26
    3a7e:	a9 2f       	mov	r26, r25
    3a80:	98 2f       	mov	r25, r24
    3a82:	88 27       	eor	r24, r24
    3a84:	82 0f       	add	r24, r18
    3a86:	91 1d       	adc	r25, r1
    3a88:	a1 1d       	adc	r26, r1
    3a8a:	b1 1d       	adc	r27, r1
    3a8c:	52 e0       	ldi	r21, 0x02	; 2
    3a8e:	88 0f       	add	r24, r24
    3a90:	99 1f       	adc	r25, r25
    3a92:	aa 1f       	adc	r26, r26
    3a94:	bb 1f       	adc	r27, r27
    3a96:	5a 95       	dec	r21
    3a98:	d1 f7       	brne	.-12     	; 0x3a8e <delay+0x48>
    3a9a:	ec 01       	movw	r28, r24
    3a9c:	30 c0       	rjmp	.+96     	; 0x3afe <delay+0xb8>

	while (ms > 0) {
		yield();
    3a9e:	0e 94 0f 23 	call	0x461e	; 0x461e <yield>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3aa2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    3aa4:	f8 94       	cli
	m = timer0_overflow_count;
    3aa6:	80 91 c9 08 	lds	r24, 0x08C9
    3aaa:	90 91 ca 08 	lds	r25, 0x08CA
    3aae:	a0 91 cb 08 	lds	r26, 0x08CB
    3ab2:	b0 91 cc 08 	lds	r27, 0x08CC
#if defined(TCNT0)
	t = TCNT0;
    3ab6:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3ab8:	a8 9b       	sbis	0x15, 0	; 21
    3aba:	05 c0       	rjmp	.+10     	; 0x3ac6 <delay+0x80>
    3abc:	2f 3f       	cpi	r18, 0xFF	; 255
    3abe:	19 f0       	breq	.+6      	; 0x3ac6 <delay+0x80>
		m++;
    3ac0:	01 96       	adiw	r24, 0x01	; 1
    3ac2:	a1 1d       	adc	r26, r1
    3ac4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3ac6:	3f bf       	out	0x3f, r19	; 63
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		yield();
		if (((uint16_t)micros() - start) >= 1000) {
    3ac8:	ba 2f       	mov	r27, r26
    3aca:	a9 2f       	mov	r26, r25
    3acc:	98 2f       	mov	r25, r24
    3ace:	88 27       	eor	r24, r24
    3ad0:	82 0f       	add	r24, r18
    3ad2:	91 1d       	adc	r25, r1
    3ad4:	a1 1d       	adc	r26, r1
    3ad6:	b1 1d       	adc	r27, r1
    3ad8:	32 e0       	ldi	r19, 0x02	; 2
    3ada:	88 0f       	add	r24, r24
    3adc:	99 1f       	adc	r25, r25
    3ade:	aa 1f       	adc	r26, r26
    3ae0:	bb 1f       	adc	r27, r27
    3ae2:	3a 95       	dec	r19
    3ae4:	d1 f7       	brne	.-12     	; 0x3ada <delay+0x94>
    3ae6:	8c 1b       	sub	r24, r28
    3ae8:	9d 0b       	sbc	r25, r29
    3aea:	88 5e       	subi	r24, 0xE8	; 232
    3aec:	93 40       	sbci	r25, 0x03	; 3
    3aee:	b8 f2       	brcs	.-82     	; 0x3a9e <delay+0x58>
			ms--;
    3af0:	08 94       	sec
    3af2:	e1 08       	sbc	r14, r1
    3af4:	f1 08       	sbc	r15, r1
    3af6:	01 09       	sbc	r16, r1
    3af8:	11 09       	sbc	r17, r1
			start += 1000;
    3afa:	c8 51       	subi	r28, 0x18	; 24
    3afc:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    3afe:	e1 14       	cp	r14, r1
    3b00:	f1 04       	cpc	r15, r1
    3b02:	01 05       	cpc	r16, r1
    3b04:	11 05       	cpc	r17, r1
    3b06:	59 f6       	brne	.-106    	; 0x3a9e <delay+0x58>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    3b08:	df 91       	pop	r29
    3b0a:	cf 91       	pop	r28
    3b0c:	1f 91       	pop	r17
    3b0e:	0f 91       	pop	r16
    3b10:	ff 90       	pop	r15
    3b12:	ef 90       	pop	r14
    3b14:	08 95       	ret

00003b16 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3b16:	cf 93       	push	r28
    3b18:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3b1a:	48 2f       	mov	r20, r24
    3b1c:	50 e0       	ldi	r21, 0x00	; 0
    3b1e:	ca 01       	movw	r24, r20
    3b20:	85 5e       	subi	r24, 0xE5	; 229
    3b22:	9c 4f       	sbci	r25, 0xFC	; 252
    3b24:	fc 01       	movw	r30, r24
    3b26:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    3b28:	4b 52       	subi	r20, 0x2B	; 43
    3b2a:	5d 4f       	sbci	r21, 0xFD	; 253
    3b2c:	fa 01       	movw	r30, r20
    3b2e:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3b30:	88 23       	and	r24, r24
    3b32:	69 f1       	breq	.+90     	; 0x3b8e <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	88 0f       	add	r24, r24
    3b38:	99 1f       	adc	r25, r25
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	e9 57       	subi	r30, 0x79	; 121
    3b3e:	fd 4f       	sbci	r31, 0xFD	; 253
    3b40:	a5 91       	lpm	r26, Z+
    3b42:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    3b44:	fc 01       	movw	r30, r24
    3b46:	ef 55       	subi	r30, 0x5F	; 95
    3b48:	fd 4f       	sbci	r31, 0xFD	; 253
    3b4a:	c5 91       	lpm	r28, Z+
    3b4c:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    3b4e:	66 23       	and	r22, r22
    3b50:	51 f4       	brne	.+20     	; 0x3b66 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    3b52:	2f b7       	in	r18, 0x3f	; 63
                cli();
    3b54:	f8 94       	cli
		*reg &= ~bit;
    3b56:	8c 91       	ld	r24, X
    3b58:	93 2f       	mov	r25, r19
    3b5a:	90 95       	com	r25
    3b5c:	89 23       	and	r24, r25
    3b5e:	8c 93       	st	X, r24
		*out &= ~bit;
    3b60:	88 81       	ld	r24, Y
    3b62:	89 23       	and	r24, r25
    3b64:	0b c0       	rjmp	.+22     	; 0x3b7c <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3b66:	62 30       	cpi	r22, 0x02	; 2
    3b68:	61 f4       	brne	.+24     	; 0x3b82 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    3b6a:	2f b7       	in	r18, 0x3f	; 63
                cli();
    3b6c:	f8 94       	cli
		*reg &= ~bit;
    3b6e:	8c 91       	ld	r24, X
    3b70:	93 2f       	mov	r25, r19
    3b72:	90 95       	com	r25
    3b74:	89 23       	and	r24, r25
    3b76:	8c 93       	st	X, r24
		*out |= bit;
    3b78:	88 81       	ld	r24, Y
    3b7a:	83 2b       	or	r24, r19
    3b7c:	88 83       	st	Y, r24
		SREG = oldSREG;
    3b7e:	2f bf       	out	0x3f, r18	; 63
    3b80:	06 c0       	rjmp	.+12     	; 0x3b8e <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    3b82:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3b84:	f8 94       	cli
		*reg |= bit;
    3b86:	8c 91       	ld	r24, X
    3b88:	83 2b       	or	r24, r19
    3b8a:	8c 93       	st	X, r24
		SREG = oldSREG;
    3b8c:	9f bf       	out	0x3f, r25	; 63
	}
}
    3b8e:	df 91       	pop	r29
    3b90:	cf 91       	pop	r28
    3b92:	08 95       	ret

00003b94 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3b94:	89 30       	cpi	r24, 0x09	; 9
    3b96:	09 f4       	brne	.+2      	; 0x3b9a <turnOffPWM+0x6>
    3b98:	49 c0       	rjmp	.+146    	; 0x3c2c <turnOffPWM+0x98>
    3b9a:	8a 30       	cpi	r24, 0x0A	; 10
    3b9c:	a0 f4       	brcc	.+40     	; 0x3bc6 <turnOffPWM+0x32>
    3b9e:	84 30       	cpi	r24, 0x04	; 4
    3ba0:	51 f1       	breq	.+84     	; 0x3bf6 <turnOffPWM+0x62>
    3ba2:	85 30       	cpi	r24, 0x05	; 5
    3ba4:	40 f4       	brcc	.+16     	; 0x3bb6 <turnOffPWM+0x22>
    3ba6:	82 30       	cpi	r24, 0x02	; 2
    3ba8:	79 f1       	breq	.+94     	; 0x3c08 <turnOffPWM+0x74>
    3baa:	83 30       	cpi	r24, 0x03	; 3
    3bac:	00 f5       	brcc	.+64     	; 0x3bee <turnOffPWM+0x5a>
    3bae:	81 30       	cpi	r24, 0x01	; 1
    3bb0:	09 f0       	breq	.+2      	; 0x3bb4 <turnOffPWM+0x20>
    3bb2:	63 c0       	rjmp	.+198    	; 0x3c7a <turnOffPWM+0xe6>
    3bb4:	26 c0       	rjmp	.+76     	; 0x3c02 <turnOffPWM+0x6e>
    3bb6:	87 30       	cpi	r24, 0x07	; 7
    3bb8:	79 f1       	breq	.+94     	; 0x3c18 <turnOffPWM+0x84>
    3bba:	88 30       	cpi	r24, 0x08	; 8
    3bbc:	98 f5       	brcc	.+102    	; 0x3c24 <turnOffPWM+0x90>
    3bbe:	86 30       	cpi	r24, 0x06	; 6
    3bc0:	09 f0       	breq	.+2      	; 0x3bc4 <turnOffPWM+0x30>
    3bc2:	5b c0       	rjmp	.+182    	; 0x3c7a <turnOffPWM+0xe6>
    3bc4:	25 c0       	rjmp	.+74     	; 0x3c10 <turnOffPWM+0x7c>
    3bc6:	8d 30       	cpi	r24, 0x0D	; 13
    3bc8:	09 f4       	brne	.+2      	; 0x3bcc <turnOffPWM+0x38>
    3bca:	42 c0       	rjmp	.+132    	; 0x3c50 <turnOffPWM+0xbc>
    3bcc:	8e 30       	cpi	r24, 0x0E	; 14
    3bce:	28 f4       	brcc	.+10     	; 0x3bda <turnOffPWM+0x46>
    3bd0:	8b 30       	cpi	r24, 0x0B	; 11
    3bd2:	b1 f1       	breq	.+108    	; 0x3c40 <turnOffPWM+0xac>
    3bd4:	8c 30       	cpi	r24, 0x0C	; 12
    3bd6:	c0 f5       	brcc	.+112    	; 0x3c48 <turnOffPWM+0xb4>
    3bd8:	2d c0       	rjmp	.+90     	; 0x3c34 <turnOffPWM+0xa0>
    3bda:	80 31       	cpi	r24, 0x10	; 16
    3bdc:	09 f4       	brne	.+2      	; 0x3be0 <turnOffPWM+0x4c>
    3bde:	42 c0       	rjmp	.+132    	; 0x3c64 <turnOffPWM+0xd0>
    3be0:	81 31       	cpi	r24, 0x11	; 17
    3be2:	09 f4       	brne	.+2      	; 0x3be6 <turnOffPWM+0x52>
    3be4:	45 c0       	rjmp	.+138    	; 0x3c70 <turnOffPWM+0xdc>
    3be6:	8f 30       	cpi	r24, 0x0F	; 15
    3be8:	09 f0       	breq	.+2      	; 0x3bec <turnOffPWM+0x58>
    3bea:	47 c0       	rjmp	.+142    	; 0x3c7a <turnOffPWM+0xe6>
    3bec:	37 c0       	rjmp	.+110    	; 0x3c5c <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3bee:	80 91 80 00 	lds	r24, 0x0080
    3bf2:	8f 77       	andi	r24, 0x7F	; 127
    3bf4:	03 c0       	rjmp	.+6      	; 0x3bfc <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3bf6:	80 91 80 00 	lds	r24, 0x0080
    3bfa:	8f 7d       	andi	r24, 0xDF	; 223
    3bfc:	80 93 80 00 	sts	0x0080, r24
    3c00:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3c02:	84 b5       	in	r24, 0x24	; 36
    3c04:	8f 77       	andi	r24, 0x7F	; 127
    3c06:	02 c0       	rjmp	.+4      	; 0x3c0c <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3c08:	84 b5       	in	r24, 0x24	; 36
    3c0a:	8f 7d       	andi	r24, 0xDF	; 223
    3c0c:	84 bd       	out	0x24, r24	; 36
    3c0e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3c10:	80 91 b0 00 	lds	r24, 0x00B0
    3c14:	8f 77       	andi	r24, 0x7F	; 127
    3c16:	03 c0       	rjmp	.+6      	; 0x3c1e <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3c18:	80 91 b0 00 	lds	r24, 0x00B0
    3c1c:	8f 7d       	andi	r24, 0xDF	; 223
    3c1e:	80 93 b0 00 	sts	0x00B0, r24
    3c22:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3c24:	80 91 90 00 	lds	r24, 0x0090
    3c28:	8f 77       	andi	r24, 0x7F	; 127
    3c2a:	07 c0       	rjmp	.+14     	; 0x3c3a <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    3c2c:	80 91 90 00 	lds	r24, 0x0090
    3c30:	8f 7d       	andi	r24, 0xDF	; 223
    3c32:	03 c0       	rjmp	.+6      	; 0x3c3a <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3c34:	80 91 90 00 	lds	r24, 0x0090
    3c38:	87 7f       	andi	r24, 0xF7	; 247
    3c3a:	80 93 90 00 	sts	0x0090, r24
    3c3e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    3c40:	80 91 a0 00 	lds	r24, 0x00A0
    3c44:	8f 77       	andi	r24, 0x7F	; 127
    3c46:	07 c0       	rjmp	.+14     	; 0x3c56 <turnOffPWM+0xc2>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    3c48:	80 91 a0 00 	lds	r24, 0x00A0
    3c4c:	8f 7d       	andi	r24, 0xDF	; 223
    3c4e:	03 c0       	rjmp	.+6      	; 0x3c56 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    3c50:	80 91 a0 00 	lds	r24, 0x00A0
    3c54:	87 7f       	andi	r24, 0xF7	; 247
    3c56:	80 93 a0 00 	sts	0x00A0, r24
    3c5a:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    3c5c:	80 91 20 01 	lds	r24, 0x0120
    3c60:	8f 77       	andi	r24, 0x7F	; 127
    3c62:	03 c0       	rjmp	.+6      	; 0x3c6a <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    3c64:	80 91 20 01 	lds	r24, 0x0120
    3c68:	8f 7d       	andi	r24, 0xDF	; 223
    3c6a:	80 93 20 01 	sts	0x0120, r24
    3c6e:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    3c70:	80 91 20 01 	lds	r24, 0x0120
    3c74:	87 7f       	andi	r24, 0xF7	; 247
    3c76:	80 93 20 01 	sts	0x0120, r24
    3c7a:	08 95       	ret

00003c7c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3c7c:	ff 92       	push	r15
    3c7e:	0f 93       	push	r16
    3c80:	1f 93       	push	r17
    3c82:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
    3c84:	48 2f       	mov	r20, r24
    3c86:	50 e0       	ldi	r21, 0x00	; 0
    3c88:	ca 01       	movw	r24, r20
    3c8a:	8f 59       	subi	r24, 0x9F	; 159
    3c8c:	9c 4f       	sbci	r25, 0xFC	; 252
    3c8e:	fc 01       	movw	r30, r24
    3c90:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    3c92:	ca 01       	movw	r24, r20
    3c94:	85 5e       	subi	r24, 0xE5	; 229
    3c96:	9c 4f       	sbci	r25, 0xFC	; 252
    3c98:	fc 01       	movw	r30, r24
    3c9a:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    3c9c:	4b 52       	subi	r20, 0x2B	; 43
    3c9e:	5d 4f       	sbci	r21, 0xFD	; 253
    3ca0:	fa 01       	movw	r30, r20
    3ca2:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3ca4:	00 23       	and	r16, r16
    3ca6:	c9 f0       	breq	.+50     	; 0x3cda <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3ca8:	22 23       	and	r18, r18
    3caa:	19 f0       	breq	.+6      	; 0x3cb2 <digitalWrite+0x36>
    3cac:	82 2f       	mov	r24, r18
    3cae:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <turnOffPWM>

	out = portOutputRegister(port);
    3cb2:	e0 2f       	mov	r30, r16
    3cb4:	f0 e0       	ldi	r31, 0x00	; 0
    3cb6:	ee 0f       	add	r30, r30
    3cb8:	ff 1f       	adc	r31, r31
    3cba:	ef 55       	subi	r30, 0x5F	; 95
    3cbc:	fd 4f       	sbci	r31, 0xFD	; 253
    3cbe:	a5 91       	lpm	r26, Z+
    3cc0:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    3cc2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3cc4:	f8 94       	cli

	if (val == LOW) {
    3cc6:	ff 20       	and	r15, r15
    3cc8:	21 f4       	brne	.+8      	; 0x3cd2 <digitalWrite+0x56>
		*out &= ~bit;
    3cca:	8c 91       	ld	r24, X
    3ccc:	10 95       	com	r17
    3cce:	81 23       	and	r24, r17
    3cd0:	02 c0       	rjmp	.+4      	; 0x3cd6 <digitalWrite+0x5a>
	} else {
		*out |= bit;
    3cd2:	8c 91       	ld	r24, X
    3cd4:	81 2b       	or	r24, r17
    3cd6:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    3cd8:	9f bf       	out	0x3f, r25	; 63
}
    3cda:	1f 91       	pop	r17
    3cdc:	0f 91       	pop	r16
    3cde:	ff 90       	pop	r15
    3ce0:	08 95       	ret

00003ce2 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    3ce2:	0f 93       	push	r16
    3ce4:	1f 93       	push	r17
    3ce6:	cf 93       	push	r28
    3ce8:	df 93       	push	r29
    3cea:	bc 01       	movw	r22, r24
    3cec:	82 30       	cpi	r24, 0x02	; 2
    3cee:	91 05       	cpc	r25, r1
    3cf0:	10 f4       	brcc	.+4      	; 0x3cf6 <malloc+0x14>
    3cf2:	62 e0       	ldi	r22, 0x02	; 2
    3cf4:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    3cf6:	e0 91 71 09 	lds	r30, 0x0971
    3cfa:	f0 91 72 09 	lds	r31, 0x0972
    3cfe:	40 e0       	ldi	r20, 0x00	; 0
    3d00:	50 e0       	ldi	r21, 0x00	; 0
    3d02:	a0 e0       	ldi	r26, 0x00	; 0
    3d04:	b0 e0       	ldi	r27, 0x00	; 0
    3d06:	24 c0       	rjmp	.+72     	; 0x3d50 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    3d08:	80 81       	ld	r24, Z
    3d0a:	91 81       	ldd	r25, Z+1	; 0x01
    3d0c:	86 17       	cp	r24, r22
    3d0e:	97 07       	cpc	r25, r23
    3d10:	d0 f0       	brcs	.+52     	; 0x3d46 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    3d12:	86 17       	cp	r24, r22
    3d14:	97 07       	cpc	r25, r23
    3d16:	71 f4       	brne	.+28     	; 0x3d34 <malloc+0x52>
    3d18:	82 81       	ldd	r24, Z+2	; 0x02
    3d1a:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    3d1c:	10 97       	sbiw	r26, 0x00	; 0
    3d1e:	29 f0       	breq	.+10     	; 0x3d2a <malloc+0x48>
				fp2->nx = fp1->nx;
    3d20:	13 96       	adiw	r26, 0x03	; 3
    3d22:	9c 93       	st	X, r25
    3d24:	8e 93       	st	-X, r24
    3d26:	12 97       	sbiw	r26, 0x02	; 2
    3d28:	2c c0       	rjmp	.+88     	; 0x3d82 <malloc+0xa0>
			else
				__flp = fp1->nx;
    3d2a:	90 93 72 09 	sts	0x0972, r25
    3d2e:	80 93 71 09 	sts	0x0971, r24
    3d32:	27 c0       	rjmp	.+78     	; 0x3d82 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    3d34:	41 15       	cp	r20, r1
    3d36:	51 05       	cpc	r21, r1
    3d38:	19 f0       	breq	.+6      	; 0x3d40 <malloc+0x5e>
    3d3a:	84 17       	cp	r24, r20
    3d3c:	95 07       	cpc	r25, r21
    3d3e:	18 f4       	brcc	.+6      	; 0x3d46 <malloc+0x64>
    3d40:	8d 01       	movw	r16, r26
    3d42:	ac 01       	movw	r20, r24
    3d44:	ef 01       	movw	r28, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    3d46:	df 01       	movw	r26, r30
    3d48:	82 81       	ldd	r24, Z+2	; 0x02
    3d4a:	93 81       	ldd	r25, Z+3	; 0x03
    3d4c:	9c 01       	movw	r18, r24
    3d4e:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    3d50:	30 97       	sbiw	r30, 0x00	; 0
    3d52:	d1 f6       	brne	.-76     	; 0x3d08 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    3d54:	41 15       	cp	r20, r1
    3d56:	51 05       	cpc	r21, r1
    3d58:	f9 f0       	breq	.+62     	; 0x3d98 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    3d5a:	ca 01       	movw	r24, r20
    3d5c:	86 1b       	sub	r24, r22
    3d5e:	97 0b       	sbc	r25, r23
    3d60:	84 30       	cpi	r24, 0x04	; 4
    3d62:	91 05       	cpc	r25, r1
    3d64:	80 f4       	brcc	.+32     	; 0x3d86 <malloc+0xa4>
    3d66:	8a 81       	ldd	r24, Y+2	; 0x02
    3d68:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    3d6a:	01 15       	cp	r16, r1
    3d6c:	11 05       	cpc	r17, r1
    3d6e:	21 f0       	breq	.+8      	; 0x3d78 <malloc+0x96>
				sfp2->nx = sfp1->nx;
    3d70:	f8 01       	movw	r30, r16
    3d72:	93 83       	std	Z+3, r25	; 0x03
    3d74:	82 83       	std	Z+2, r24	; 0x02
    3d76:	04 c0       	rjmp	.+8      	; 0x3d80 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    3d78:	90 93 72 09 	sts	0x0972, r25
    3d7c:	80 93 71 09 	sts	0x0971, r24
			return &(sfp1->nx);
    3d80:	fe 01       	movw	r30, r28
    3d82:	32 96       	adiw	r30, 0x02	; 2
    3d84:	45 c0       	rjmp	.+138    	; 0x3e10 <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    3d86:	fe 01       	movw	r30, r28
    3d88:	e8 0f       	add	r30, r24
    3d8a:	f9 1f       	adc	r31, r25
    3d8c:	61 93       	st	Z+, r22
    3d8e:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    3d90:	02 97       	sbiw	r24, 0x02	; 2
    3d92:	99 83       	std	Y+1, r25	; 0x01
    3d94:	88 83       	st	Y, r24
    3d96:	3c c0       	rjmp	.+120    	; 0x3e10 <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    3d98:	80 91 6f 09 	lds	r24, 0x096F
    3d9c:	90 91 70 09 	lds	r25, 0x0970
    3da0:	89 2b       	or	r24, r25
    3da2:	41 f4       	brne	.+16     	; 0x3db4 <malloc+0xd2>
		__brkval = __malloc_heap_start;
    3da4:	80 91 0c 02 	lds	r24, 0x020C
    3da8:	90 91 0d 02 	lds	r25, 0x020D
    3dac:	90 93 70 09 	sts	0x0970, r25
    3db0:	80 93 6f 09 	sts	0x096F, r24
	cp = __malloc_heap_end;
    3db4:	40 91 0e 02 	lds	r20, 0x020E
    3db8:	50 91 0f 02 	lds	r21, 0x020F
	if (cp == 0)
    3dbc:	41 15       	cp	r20, r1
    3dbe:	51 05       	cpc	r21, r1
    3dc0:	41 f4       	brne	.+16     	; 0x3dd2 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    3dc2:	4d b7       	in	r20, 0x3d	; 61
    3dc4:	5e b7       	in	r21, 0x3e	; 62
    3dc6:	80 91 0a 02 	lds	r24, 0x020A
    3dca:	90 91 0b 02 	lds	r25, 0x020B
    3dce:	48 1b       	sub	r20, r24
    3dd0:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    3dd2:	20 91 6f 09 	lds	r18, 0x096F
    3dd6:	30 91 70 09 	lds	r19, 0x0970
    3dda:	24 17       	cp	r18, r20
    3ddc:	35 07       	cpc	r19, r21
    3dde:	b0 f4       	brcc	.+44     	; 0x3e0c <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    3de0:	ca 01       	movw	r24, r20
    3de2:	82 1b       	sub	r24, r18
    3de4:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    3de6:	86 17       	cp	r24, r22
    3de8:	97 07       	cpc	r25, r23
    3dea:	80 f0       	brcs	.+32     	; 0x3e0c <malloc+0x12a>
    3dec:	ab 01       	movw	r20, r22
    3dee:	4e 5f       	subi	r20, 0xFE	; 254
    3df0:	5f 4f       	sbci	r21, 0xFF	; 255
    3df2:	84 17       	cp	r24, r20
    3df4:	95 07       	cpc	r25, r21
    3df6:	50 f0       	brcs	.+20     	; 0x3e0c <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    3df8:	42 0f       	add	r20, r18
    3dfa:	53 1f       	adc	r21, r19
    3dfc:	50 93 70 09 	sts	0x0970, r21
    3e00:	40 93 6f 09 	sts	0x096F, r20
		fp1->sz = len;
    3e04:	f9 01       	movw	r30, r18
    3e06:	61 93       	st	Z+, r22
    3e08:	71 93       	st	Z+, r23
    3e0a:	02 c0       	rjmp	.+4      	; 0x3e10 <malloc+0x12e>
		return &(fp1->nx);
    3e0c:	e0 e0       	ldi	r30, 0x00	; 0
    3e0e:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    3e10:	cf 01       	movw	r24, r30
    3e12:	df 91       	pop	r29
    3e14:	cf 91       	pop	r28
    3e16:	1f 91       	pop	r17
    3e18:	0f 91       	pop	r16
    3e1a:	08 95       	ret

00003e1c <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    3e1c:	cf 93       	push	r28
    3e1e:	df 93       	push	r29
    3e20:	9c 01       	movw	r18, r24
    3e22:	00 97       	sbiw	r24, 0x00	; 0
    3e24:	09 f4       	brne	.+2      	; 0x3e28 <free+0xc>
    3e26:	8f c0       	rjmp	.+286    	; 0x3f46 <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    3e28:	ec 01       	movw	r28, r24
    3e2a:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    3e2c:	1b 82       	std	Y+3, r1	; 0x03
    3e2e:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    3e30:	60 91 71 09 	lds	r22, 0x0971
    3e34:	70 91 72 09 	lds	r23, 0x0972
    3e38:	61 15       	cp	r22, r1
    3e3a:	71 05       	cpc	r23, r1
    3e3c:	81 f4       	brne	.+32     	; 0x3e5e <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    3e3e:	88 81       	ld	r24, Y
    3e40:	99 81       	ldd	r25, Y+1	; 0x01
    3e42:	82 0f       	add	r24, r18
    3e44:	93 1f       	adc	r25, r19
    3e46:	20 91 6f 09 	lds	r18, 0x096F
    3e4a:	30 91 70 09 	lds	r19, 0x0970
    3e4e:	28 17       	cp	r18, r24
    3e50:	39 07       	cpc	r19, r25
    3e52:	39 f5       	brne	.+78     	; 0x3ea2 <free+0x86>
			__brkval = cpnew;
    3e54:	d0 93 70 09 	sts	0x0970, r29
    3e58:	c0 93 6f 09 	sts	0x096F, r28
    3e5c:	74 c0       	rjmp	.+232    	; 0x3f46 <free+0x12a>
		else
			__flp = fpnew;
    3e5e:	db 01       	movw	r26, r22
    3e60:	40 e0       	ldi	r20, 0x00	; 0
    3e62:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    3e64:	ac 17       	cp	r26, r28
    3e66:	bd 07       	cpc	r27, r29
    3e68:	08 f1       	brcs	.+66     	; 0x3eac <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    3e6a:	bb 83       	std	Y+3, r27	; 0x03
    3e6c:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    3e6e:	fe 01       	movw	r30, r28
    3e70:	21 91       	ld	r18, Z+
    3e72:	31 91       	ld	r19, Z+
    3e74:	e2 0f       	add	r30, r18
    3e76:	f3 1f       	adc	r31, r19
    3e78:	ae 17       	cp	r26, r30
    3e7a:	bf 07       	cpc	r27, r31
    3e7c:	79 f4       	brne	.+30     	; 0x3e9c <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    3e7e:	8d 91       	ld	r24, X+
    3e80:	9c 91       	ld	r25, X
    3e82:	11 97       	sbiw	r26, 0x01	; 1
    3e84:	28 0f       	add	r18, r24
    3e86:	39 1f       	adc	r19, r25
    3e88:	2e 5f       	subi	r18, 0xFE	; 254
    3e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8c:	39 83       	std	Y+1, r19	; 0x01
    3e8e:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    3e90:	12 96       	adiw	r26, 0x02	; 2
    3e92:	8d 91       	ld	r24, X+
    3e94:	9c 91       	ld	r25, X
    3e96:	13 97       	sbiw	r26, 0x03	; 3
    3e98:	9b 83       	std	Y+3, r25	; 0x03
    3e9a:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    3e9c:	41 15       	cp	r20, r1
    3e9e:	51 05       	cpc	r21, r1
    3ea0:	71 f4       	brne	.+28     	; 0x3ebe <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    3ea2:	d0 93 72 09 	sts	0x0972, r29
    3ea6:	c0 93 71 09 	sts	0x0971, r28
    3eaa:	4d c0       	rjmp	.+154    	; 0x3f46 <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    3eac:	12 96       	adiw	r26, 0x02	; 2
    3eae:	8d 91       	ld	r24, X+
    3eb0:	9c 91       	ld	r25, X
    3eb2:	13 97       	sbiw	r26, 0x03	; 3
    3eb4:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    3eb6:	00 97       	sbiw	r24, 0x00	; 0
    3eb8:	11 f0       	breq	.+4      	; 0x3ebe <free+0xa2>
    3eba:	dc 01       	movw	r26, r24
    3ebc:	d3 cf       	rjmp	.-90     	; 0x3e64 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    3ebe:	da 01       	movw	r26, r20
    3ec0:	13 96       	adiw	r26, 0x03	; 3
    3ec2:	dc 93       	st	X, r29
    3ec4:	ce 93       	st	-X, r28
    3ec6:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    3ec8:	fa 01       	movw	r30, r20
    3eca:	21 91       	ld	r18, Z+
    3ecc:	31 91       	ld	r19, Z+
    3ece:	e2 0f       	add	r30, r18
    3ed0:	f3 1f       	adc	r31, r19
    3ed2:	ce 17       	cp	r28, r30
    3ed4:	df 07       	cpc	r29, r31
    3ed6:	69 f4       	brne	.+26     	; 0x3ef2 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    3ed8:	88 81       	ld	r24, Y
    3eda:	99 81       	ldd	r25, Y+1	; 0x01
    3edc:	28 0f       	add	r18, r24
    3ede:	39 1f       	adc	r19, r25
    3ee0:	2e 5f       	subi	r18, 0xFE	; 254
    3ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee4:	fa 01       	movw	r30, r20
    3ee6:	31 83       	std	Z+1, r19	; 0x01
    3ee8:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    3eea:	8a 81       	ldd	r24, Y+2	; 0x02
    3eec:	9b 81       	ldd	r25, Y+3	; 0x03
    3eee:	93 83       	std	Z+3, r25	; 0x03
    3ef0:	82 83       	std	Z+2, r24	; 0x02
    3ef2:	e0 e0       	ldi	r30, 0x00	; 0
    3ef4:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    3ef6:	db 01       	movw	r26, r22
    3ef8:	12 96       	adiw	r26, 0x02	; 2
    3efa:	8d 91       	ld	r24, X+
    3efc:	9c 91       	ld	r25, X
    3efe:	13 97       	sbiw	r26, 0x03	; 3
    3f00:	00 97       	sbiw	r24, 0x00	; 0
    3f02:	19 f0       	breq	.+6      	; 0x3f0a <free+0xee>
    3f04:	bc 01       	movw	r22, r24
    3f06:	fd 01       	movw	r30, r26
    3f08:	f6 cf       	rjmp	.-20     	; 0x3ef6 <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    3f0a:	ab 01       	movw	r20, r22
    3f0c:	4e 5f       	subi	r20, 0xFE	; 254
    3f0e:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    3f10:	db 01       	movw	r26, r22
    3f12:	8d 91       	ld	r24, X+
    3f14:	9c 91       	ld	r25, X
    3f16:	84 0f       	add	r24, r20
    3f18:	95 1f       	adc	r25, r21
    3f1a:	20 91 6f 09 	lds	r18, 0x096F
    3f1e:	30 91 70 09 	lds	r19, 0x0970
    3f22:	28 17       	cp	r18, r24
    3f24:	39 07       	cpc	r19, r25
    3f26:	79 f4       	brne	.+30     	; 0x3f46 <free+0x12a>
		if (fp2 == NULL)
    3f28:	30 97       	sbiw	r30, 0x00	; 0
    3f2a:	29 f4       	brne	.+10     	; 0x3f36 <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    3f2c:	10 92 72 09 	sts	0x0972, r1
    3f30:	10 92 71 09 	sts	0x0971, r1
    3f34:	02 c0       	rjmp	.+4      	; 0x3f3a <free+0x11e>
		else
			fp2->nx = NULL;
    3f36:	13 82       	std	Z+3, r1	; 0x03
    3f38:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    3f3a:	42 50       	subi	r20, 0x02	; 2
    3f3c:	50 40       	sbci	r21, 0x00	; 0
    3f3e:	50 93 70 09 	sts	0x0970, r21
    3f42:	40 93 6f 09 	sts	0x096F, r20
	}
}
    3f46:	df 91       	pop	r29
    3f48:	cf 91       	pop	r28
    3f4a:	08 95       	ret

00003f4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
    3f4c:	dc 01       	movw	r26, r24
{
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3f4e:	5c 96       	adiw	r26, 0x1c	; 28
    3f50:	8c 91       	ld	r24, X
    3f52:	5c 97       	sbiw	r26, 0x1c	; 28
    3f54:	fd 01       	movw	r30, r26
    3f56:	e8 0f       	add	r30, r24
    3f58:	f1 1d       	adc	r31, r1
    3f5a:	e3 5a       	subi	r30, 0xA3	; 163
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	20 81       	ld	r18, Z
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_BUFFER_SIZE;
    3f60:	5c 96       	adiw	r26, 0x1c	; 28
    3f62:	8c 91       	ld	r24, X
    3f64:	5c 97       	sbiw	r26, 0x1c	; 28
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	01 96       	adiw	r24, 0x01	; 1
    3f6a:	8f 73       	andi	r24, 0x3F	; 63
    3f6c:	90 70       	andi	r25, 0x00	; 0
    3f6e:	5c 96       	adiw	r26, 0x1c	; 28
    3f70:	8c 93       	st	X, r24
    3f72:	5c 97       	sbiw	r26, 0x1c	; 28

  *_udr = c;
    3f74:	56 96       	adiw	r26, 0x16	; 22
    3f76:	ed 91       	ld	r30, X+
    3f78:	fc 91       	ld	r31, X
    3f7a:	57 97       	sbiw	r26, 0x17	; 23
    3f7c:	20 83       	st	Z, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3f7e:	50 96       	adiw	r26, 0x10	; 16
    3f80:	ed 91       	ld	r30, X+
    3f82:	fc 91       	ld	r31, X
    3f84:	51 97       	sbiw	r26, 0x11	; 17
    3f86:	80 81       	ld	r24, Z
    3f88:	80 64       	ori	r24, 0x40	; 64
    3f8a:	80 83       	st	Z, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3f8c:	5b 96       	adiw	r26, 0x1b	; 27
    3f8e:	9c 91       	ld	r25, X
    3f90:	5b 97       	sbiw	r26, 0x1b	; 27
    3f92:	5c 96       	adiw	r26, 0x1c	; 28
    3f94:	8c 91       	ld	r24, X
    3f96:	5c 97       	sbiw	r26, 0x1c	; 28
    3f98:	98 17       	cp	r25, r24
    3f9a:	39 f4       	brne	.+14     	; 0x3faa <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x5e>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3f9c:	52 96       	adiw	r26, 0x12	; 18
    3f9e:	ed 91       	ld	r30, X+
    3fa0:	fc 91       	ld	r31, X
    3fa2:	53 97       	sbiw	r26, 0x13	; 19
    3fa4:	80 81       	ld	r24, Z
    3fa6:	8f 7d       	andi	r24, 0xDF	; 223
    3fa8:	80 83       	st	Z, r24
    3faa:	08 95       	ret

00003fac <_ZN14HardwareSerial5beginEmh>:
  }
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
    3fac:	df 92       	push	r13
    3fae:	ef 92       	push	r14
    3fb0:	ff 92       	push	r15
    3fb2:	0f 93       	push	r16
    3fb4:	1f 93       	push	r17
    3fb6:	cf 93       	push	r28
    3fb8:	df 93       	push	r29
    3fba:	ec 01       	movw	r28, r24
    3fbc:	7a 01       	movw	r14, r20
    3fbe:	8b 01       	movw	r16, r22
    3fc0:	d2 2e       	mov	r13, r18
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3fc2:	e8 89       	ldd	r30, Y+16	; 0x10
    3fc4:	f9 89       	ldd	r31, Y+17	; 0x11
    3fc6:	82 e0       	ldi	r24, 0x02	; 2
    3fc8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3fca:	40 30       	cpi	r20, 0x00	; 0
    3fcc:	81 ee       	ldi	r24, 0xE1	; 225
    3fce:	58 07       	cpc	r21, r24
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	68 07       	cpc	r22, r24
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	78 07       	cpc	r23, r24
    3fd8:	a1 f0       	breq	.+40     	; 0x4002 <_ZN14HardwareSerial5beginEmh+0x56>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3fda:	60 e0       	ldi	r22, 0x00	; 0
    3fdc:	79 e0       	ldi	r23, 0x09	; 9
    3fde:	8d e3       	ldi	r24, 0x3D	; 61
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	a8 01       	movw	r20, r16
    3fe4:	97 01       	movw	r18, r14
    3fe6:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodsi4>
    3fea:	21 50       	subi	r18, 0x01	; 1
    3fec:	30 40       	sbci	r19, 0x00	; 0
    3fee:	40 40       	sbci	r20, 0x00	; 0
    3ff0:	50 40       	sbci	r21, 0x00	; 0
    3ff2:	56 95       	lsr	r21
    3ff4:	47 95       	ror	r20
    3ff6:	37 95       	ror	r19
    3ff8:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3ffa:	80 e1       	ldi	r24, 0x10	; 16
    3ffc:	20 30       	cpi	r18, 0x00	; 0
    3ffe:	38 07       	cpc	r19, r24
    4000:	98 f0       	brcs	.+38     	; 0x4028 <_ZN14HardwareSerial5beginEmh+0x7c>
  {
    *_ucsra = 0;
    4002:	e8 89       	ldd	r30, Y+16	; 0x10
    4004:	f9 89       	ldd	r31, Y+17	; 0x11
    4006:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4008:	60 e8       	ldi	r22, 0x80	; 128
    400a:	74 e8       	ldi	r23, 0x84	; 132
    400c:	8e e1       	ldi	r24, 0x1E	; 30
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	a8 01       	movw	r20, r16
    4012:	97 01       	movw	r18, r14
    4014:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodsi4>
    4018:	21 50       	subi	r18, 0x01	; 1
    401a:	30 40       	sbci	r19, 0x00	; 0
    401c:	40 40       	sbci	r20, 0x00	; 0
    401e:	50 40       	sbci	r21, 0x00	; 0
    4020:	56 95       	lsr	r21
    4022:	47 95       	ror	r20
    4024:	37 95       	ror	r19
    4026:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4028:	ec 85       	ldd	r30, Y+12	; 0x0c
    402a:	fd 85       	ldd	r31, Y+13	; 0x0d
    402c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    402e:	ee 85       	ldd	r30, Y+14	; 0x0e
    4030:	ff 85       	ldd	r31, Y+15	; 0x0f
    4032:	20 83       	st	Z, r18

  _written = false;
    4034:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4036:	ec 89       	ldd	r30, Y+20	; 0x14
    4038:	fd 89       	ldd	r31, Y+21	; 0x15
    403a:	d0 82       	st	Z, r13
  
  sbi(*_ucsrb, RXEN0);
    403c:	ea 89       	ldd	r30, Y+18	; 0x12
    403e:	fb 89       	ldd	r31, Y+19	; 0x13
    4040:	80 81       	ld	r24, Z
    4042:	80 61       	ori	r24, 0x10	; 16
    4044:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    4046:	ea 89       	ldd	r30, Y+18	; 0x12
    4048:	fb 89       	ldd	r31, Y+19	; 0x13
    404a:	80 81       	ld	r24, Z
    404c:	88 60       	ori	r24, 0x08	; 8
    404e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    4050:	ea 89       	ldd	r30, Y+18	; 0x12
    4052:	fb 89       	ldd	r31, Y+19	; 0x13
    4054:	80 81       	ld	r24, Z
    4056:	80 68       	ori	r24, 0x80	; 128
    4058:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    405a:	ea 89       	ldd	r30, Y+18	; 0x12
    405c:	fb 89       	ldd	r31, Y+19	; 0x13
    405e:	80 81       	ld	r24, Z
    4060:	8f 7d       	andi	r24, 0xDF	; 223
    4062:	80 83       	st	Z, r24
}
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	1f 91       	pop	r17
    406a:	0f 91       	pop	r16
    406c:	ff 90       	pop	r15
    406e:	ef 90       	pop	r14
    4070:	df 90       	pop	r13
    4072:	08 95       	ret

00004074 <_ZN14HardwareSerial9availableEv>:
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
    4074:	fc 01       	movw	r30, r24
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail) % SERIAL_BUFFER_SIZE;
    4076:	21 8d       	ldd	r18, Z+25	; 0x19
    4078:	82 8d       	ldd	r24, Z+26	; 0x1a
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	20 5c       	subi	r18, 0xC0	; 192
    407e:	3f 4f       	sbci	r19, 0xFF	; 255
    4080:	28 1b       	sub	r18, r24
    4082:	31 09       	sbc	r19, r1
    4084:	2f 73       	andi	r18, 0x3F	; 63
    4086:	30 70       	andi	r19, 0x00	; 0
}
    4088:	c9 01       	movw	r24, r18
    408a:	08 95       	ret

0000408c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
    408c:	fc 01       	movw	r30, r24
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    408e:	91 8d       	ldd	r25, Z+25	; 0x19
    4090:	82 8d       	ldd	r24, Z+26	; 0x1a
    4092:	98 17       	cp	r25, r24
    4094:	19 f4       	brne	.+6      	; 0x409c <_ZN14HardwareSerial4peekEv+0x10>
    4096:	2f ef       	ldi	r18, 0xFF	; 255
    4098:	3f ef       	ldi	r19, 0xFF	; 255
    409a:	06 c0       	rjmp	.+12     	; 0x40a8 <_ZN14HardwareSerial4peekEv+0x1c>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    409c:	82 8d       	ldd	r24, Z+26	; 0x1a
    409e:	e8 0f       	add	r30, r24
    40a0:	f1 1d       	adc	r31, r1
    40a2:	85 8d       	ldd	r24, Z+29	; 0x1d
    40a4:	28 2f       	mov	r18, r24
    40a6:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    40a8:	c9 01       	movw	r24, r18
    40aa:	08 95       	ret

000040ac <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
    40ac:	dc 01       	movw	r26, r24
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    40ae:	59 96       	adiw	r26, 0x19	; 25
    40b0:	9c 91       	ld	r25, X
    40b2:	59 97       	sbiw	r26, 0x19	; 25
    40b4:	5a 96       	adiw	r26, 0x1a	; 26
    40b6:	8c 91       	ld	r24, X
    40b8:	5a 97       	sbiw	r26, 0x1a	; 26
    40ba:	98 17       	cp	r25, r24
    40bc:	19 f4       	brne	.+6      	; 0x40c4 <_ZN14HardwareSerial4readEv+0x18>
    40be:	2f ef       	ldi	r18, 0xFF	; 255
    40c0:	3f ef       	ldi	r19, 0xFF	; 255
    40c2:	10 c0       	rjmp	.+32     	; 0x40e4 <_ZN14HardwareSerial4readEv+0x38>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    40c4:	5a 96       	adiw	r26, 0x1a	; 26
    40c6:	8c 91       	ld	r24, X
    40c8:	5a 97       	sbiw	r26, 0x1a	; 26
    40ca:	fd 01       	movw	r30, r26
    40cc:	e8 0f       	add	r30, r24
    40ce:	f1 1d       	adc	r31, r1
    40d0:	95 8d       	ldd	r25, Z+29	; 0x1d
    _rx_buffer_tail = (uint8_t)(_rx_buffer_tail + 1) % SERIAL_BUFFER_SIZE;
    40d2:	5a 96       	adiw	r26, 0x1a	; 26
    40d4:	8c 91       	ld	r24, X
    40d6:	5a 97       	sbiw	r26, 0x1a	; 26
    40d8:	8f 5f       	subi	r24, 0xFF	; 255
    40da:	8f 73       	andi	r24, 0x3F	; 63
    40dc:	5a 96       	adiw	r26, 0x1a	; 26
    40de:	8c 93       	st	X, r24
    return c;
    40e0:	29 2f       	mov	r18, r25
    40e2:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    40e4:	c9 01       	movw	r24, r18
    40e6:	08 95       	ret

000040e8 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    40e8:	cf 93       	push	r28
    40ea:	df 93       	push	r29
    40ec:	ec 01       	movw	r28, r24
{
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    40ee:	88 8d       	ldd	r24, Y+24	; 0x18
    40f0:	88 23       	and	r24, r24
    40f2:	61 f4       	brne	.+24     	; 0x410c <_ZN14HardwareSerial5flushEv+0x24>
    40f4:	19 c0       	rjmp	.+50     	; 0x4128 <_ZN14HardwareSerial5flushEv+0x40>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    40f6:	8c 91       	ld	r24, X
    40f8:	85 ff       	sbrs	r24, 5
    40fa:	0a c0       	rjmp	.+20     	; 0x4110 <_ZN14HardwareSerial5flushEv+0x28>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    40fc:	e8 89       	ldd	r30, Y+16	; 0x10
    40fe:	f9 89       	ldd	r31, Y+17	; 0x11
    4100:	80 81       	ld	r24, Z
    4102:	85 ff       	sbrs	r24, 5
    4104:	05 c0       	rjmp	.+10     	; 0x4110 <_ZN14HardwareSerial5flushEv+0x28>
	  _tx_udr_empty_irq();
    4106:	ce 01       	movw	r24, r28
    4108:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    410c:	aa 89       	ldd	r26, Y+18	; 0x12
    410e:	bb 89       	ldd	r27, Y+19	; 0x13
    4110:	8c 91       	ld	r24, X
    4112:	85 fd       	sbrc	r24, 5
    4114:	05 c0       	rjmp	.+10     	; 0x4120 <_ZN14HardwareSerial5flushEv+0x38>
    4116:	e8 89       	ldd	r30, Y+16	; 0x10
    4118:	f9 89       	ldd	r31, Y+17	; 0x11
    411a:	80 81       	ld	r24, Z
    411c:	86 fd       	sbrc	r24, 6
    411e:	04 c0       	rjmp	.+8      	; 0x4128 <_ZN14HardwareSerial5flushEv+0x40>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    4120:	0f b6       	in	r0, 0x3f	; 63
    4122:	07 fe       	sbrs	r0, 7
    4124:	e8 cf       	rjmp	.-48     	; 0x40f6 <_ZN14HardwareSerial5flushEv+0xe>
    4126:	f4 cf       	rjmp	.-24     	; 0x4110 <_ZN14HardwareSerial5flushEv+0x28>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    4128:	df 91       	pop	r29
    412a:	cf 91       	pop	r28
    412c:	08 95       	ret

0000412e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    412e:	0f 93       	push	r16
    4130:	1f 93       	push	r17
    4132:	cf 93       	push	r28
    4134:	df 93       	push	r29
    4136:	ec 01       	movw	r28, r24
    4138:	06 2f       	mov	r16, r22
{
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    413a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    413c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    413e:	98 17       	cp	r25, r24
    4140:	91 f5       	brne	.+100    	; 0x41a6 <_ZN14HardwareSerial5writeEh+0x78>
    4142:	e8 89       	ldd	r30, Y+16	; 0x10
    4144:	f9 89       	ldd	r31, Y+17	; 0x11
    4146:	80 81       	ld	r24, Z
    4148:	85 ff       	sbrs	r24, 5
    414a:	2d c0       	rjmp	.+90     	; 0x41a6 <_ZN14HardwareSerial5writeEh+0x78>
    *_udr = c;
    414c:	ee 89       	ldd	r30, Y+22	; 0x16
    414e:	ff 89       	ldd	r31, Y+23	; 0x17
    4150:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    4152:	e8 89       	ldd	r30, Y+16	; 0x10
    4154:	f9 89       	ldd	r31, Y+17	; 0x11
    4156:	80 81       	ld	r24, Z
    4158:	80 64       	ori	r24, 0x40	; 64
    415a:	80 83       	st	Z, r24
    415c:	1d c0       	rjmp	.+58     	; 0x4198 <_ZN14HardwareSerial5writeEh+0x6a>
  uint8_t i = (_tx_buffer_head + 1) % SERIAL_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	07 fc       	sbrc	r0, 7
    4162:	08 c0       	rjmp	.+16     	; 0x4174 <_ZN14HardwareSerial5writeEh+0x46>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    4164:	e8 89       	ldd	r30, Y+16	; 0x10
    4166:	f9 89       	ldd	r31, Y+17	; 0x11
    4168:	80 81       	ld	r24, Z
    416a:	85 ff       	sbrs	r24, 5
    416c:	03 c0       	rjmp	.+6      	; 0x4174 <_ZN14HardwareSerial5writeEh+0x46>
	_tx_udr_empty_irq();
    416e:	ce 01       	movw	r24, r28
    4170:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  uint8_t i = (_tx_buffer_head + 1) % SERIAL_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    4174:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4176:	18 17       	cp	r17, r24
    4178:	91 f3       	breq	.-28     	; 0x415e <_ZN14HardwareSerial5writeEh+0x30>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    417a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    417c:	fe 01       	movw	r30, r28
    417e:	e8 0f       	add	r30, r24
    4180:	f1 1d       	adc	r31, r1
    4182:	e3 5a       	subi	r30, 0xA3	; 163
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	00 83       	st	Z, r16
  _tx_buffer_head = i;
    4188:	1b 8f       	std	Y+27, r17	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    418a:	ea 89       	ldd	r30, Y+18	; 0x12
    418c:	fb 89       	ldd	r31, Y+19	; 0x13
    418e:	80 81       	ld	r24, Z
    4190:	80 62       	ori	r24, 0x20	; 32
    4192:	80 83       	st	Z, r24
  _written = true;
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
}
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	df 91       	pop	r29
    419e:	cf 91       	pop	r28
    41a0:	1f 91       	pop	r17
    41a2:	0f 91       	pop	r16
    41a4:	08 95       	ret
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  uint8_t i = (_tx_buffer_head + 1) % SERIAL_BUFFER_SIZE;
    41a6:	1b 8d       	ldd	r17, Y+27	; 0x1b
    41a8:	1f 5f       	subi	r17, 0xFF	; 255
    41aa:	1f 73       	andi	r17, 0x3F	; 63
    41ac:	e3 cf       	rjmp	.-58     	; 0x4174 <_ZN14HardwareSerial5writeEh+0x46>

000041ae <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    41ae:	8d e8       	ldi	r24, 0x8D	; 141
    41b0:	91 e2       	ldi	r25, 0x21	; 33
    41b2:	89 2b       	or	r24, r25
    41b4:	51 f0       	breq	.+20     	; 0x41ca <_Z14serialEventRunv+0x1c>
    41b6:	80 e0       	ldi	r24, 0x00	; 0
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	89 2b       	or	r24, r25
    41bc:	31 f0       	breq	.+12     	; 0x41ca <_Z14serialEventRunv+0x1c>
    41be:	0e 94 8d 21 	call	0x431a	; 0x431a <_Z17Serial0_availablev>
    41c2:	88 23       	and	r24, r24
    41c4:	11 f0       	breq	.+4      	; 0x41ca <_Z14serialEventRunv+0x1c>
    41c6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    41ca:	80 e0       	ldi	r24, 0x00	; 0
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	89 2b       	or	r24, r25
    41d0:	51 f0       	breq	.+20     	; 0x41e6 <_Z14serialEventRunv+0x38>
    41d2:	80 e0       	ldi	r24, 0x00	; 0
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	89 2b       	or	r24, r25
    41d8:	31 f0       	breq	.+12     	; 0x41e6 <_Z14serialEventRunv+0x38>
    41da:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    41de:	88 23       	and	r24, r24
    41e0:	11 f0       	breq	.+4      	; 0x41e6 <_Z14serialEventRunv+0x38>
    41e2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    41e6:	80 e0       	ldi	r24, 0x00	; 0
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	89 2b       	or	r24, r25
    41ec:	51 f0       	breq	.+20     	; 0x4202 <_Z14serialEventRunv+0x54>
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	89 2b       	or	r24, r25
    41f4:	31 f0       	breq	.+12     	; 0x4202 <_Z14serialEventRunv+0x54>
    41f6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    41fa:	88 23       	and	r24, r24
    41fc:	11 f0       	breq	.+4      	; 0x4202 <_Z14serialEventRunv+0x54>
    41fe:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent2 && Serial3_available()) serialEvent3();
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	89 2b       	or	r24, r25
    4208:	51 f0       	breq	.+20     	; 0x421e <_Z14serialEventRunv+0x70>
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	89 2b       	or	r24, r25
    4210:	31 f0       	breq	.+12     	; 0x421e <_Z14serialEventRunv+0x70>
    4212:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    4216:	88 23       	and	r24, r24
    4218:	11 f0       	breq	.+4      	; 0x421e <_Z14serialEventRunv+0x70>
    421a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    421e:	08 95       	ret

00004220 <__vector_25>:
#if defined(HAVE_HWSERIAL0)

#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
#elif defined(USART0_RX_vect)
  ISR(USART0_RX_vect)
    4220:	1f 92       	push	r1
    4222:	0f 92       	push	r0
    4224:	0f b6       	in	r0, 0x3f	; 63
    4226:	0f 92       	push	r0
    4228:	0b b6       	in	r0, 0x3b	; 59
    422a:	0f 92       	push	r0
    422c:	11 24       	eor	r1, r1
    422e:	2f 93       	push	r18
    4230:	8f 93       	push	r24
    4232:	9f 93       	push	r25
    4234:	ef 93       	push	r30
    4236:	ff 93       	push	r31
    4238:	e0 91 e2 08 	lds	r30, 0x08E2
    423c:	f0 91 e3 08 	lds	r31, 0x08E3
    4240:	80 81       	ld	r24, Z
    4242:	82 fd       	sbrc	r24, 2
    4244:	16 c0       	rjmp	.+44     	; 0x4272 <__vector_25+0x52>
    4246:	e0 91 e8 08 	lds	r30, 0x08E8
    424a:	f0 91 e9 08 	lds	r31, 0x08E9
    424e:	20 81       	ld	r18, Z
    4250:	90 91 eb 08 	lds	r25, 0x08EB
    4254:	9f 5f       	subi	r25, 0xFF	; 255
    4256:	9f 73       	andi	r25, 0x3F	; 63
    4258:	80 91 ec 08 	lds	r24, 0x08EC
    425c:	98 17       	cp	r25, r24
    425e:	71 f0       	breq	.+28     	; 0x427c <__vector_25+0x5c>
    4260:	e0 91 eb 08 	lds	r30, 0x08EB
    4264:	f0 e0       	ldi	r31, 0x00	; 0
    4266:	ee 52       	subi	r30, 0x2E	; 46
    4268:	f7 4f       	sbci	r31, 0xF7	; 247
    426a:	25 8f       	std	Z+29, r18	; 0x1d
    426c:	90 93 eb 08 	sts	0x08EB, r25
    4270:	05 c0       	rjmp	.+10     	; 0x427c <__vector_25+0x5c>
    4272:	e0 91 e8 08 	lds	r30, 0x08E8
    4276:	f0 91 e9 08 	lds	r31, 0x08E9
    427a:	e0 81       	ld	r30, Z
#else
  #error "Don't know what the Data Received vector is called for the first UART"
#endif
  {
    Serial._rx_complete_irq();
  }
    427c:	ff 91       	pop	r31
    427e:	ef 91       	pop	r30
    4280:	9f 91       	pop	r25
    4282:	8f 91       	pop	r24
    4284:	2f 91       	pop	r18
    4286:	0f 90       	pop	r0
    4288:	0b be       	out	0x3b, r0	; 59
    428a:	0f 90       	pop	r0
    428c:	0f be       	out	0x3f, r0	; 63
    428e:	0f 90       	pop	r0
    4290:	1f 90       	pop	r1
    4292:	18 95       	reti

00004294 <_GLOBAL__I___vector_25>:
    4294:	10 92 d5 08 	sts	0x08D5, r1
    4298:	10 92 d4 08 	sts	0x08D4, r1
    429c:	88 ee       	ldi	r24, 0xE8	; 232
    429e:	93 e0       	ldi	r25, 0x03	; 3
    42a0:	a0 e0       	ldi	r26, 0x00	; 0
    42a2:	b0 e0       	ldi	r27, 0x00	; 0
    42a4:	80 93 d6 08 	sts	0x08D6, r24
    42a8:	90 93 d7 08 	sts	0x08D7, r25
    42ac:	a0 93 d8 08 	sts	0x08D8, r26
    42b0:	b0 93 d9 08 	sts	0x08D9, r27
    42b4:	86 e3       	ldi	r24, 0x36	; 54
    42b6:	92 e0       	ldi	r25, 0x02	; 2
    42b8:	90 93 d3 08 	sts	0x08D3, r25
    42bc:	80 93 d2 08 	sts	0x08D2, r24
    42c0:	85 ec       	ldi	r24, 0xC5	; 197
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	90 93 df 08 	sts	0x08DF, r25
    42c8:	80 93 de 08 	sts	0x08DE, r24
    42cc:	84 ec       	ldi	r24, 0xC4	; 196
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	90 93 e1 08 	sts	0x08E1, r25
    42d4:	80 93 e0 08 	sts	0x08E0, r24
    42d8:	80 ec       	ldi	r24, 0xC0	; 192
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	90 93 e3 08 	sts	0x08E3, r25
    42e0:	80 93 e2 08 	sts	0x08E2, r24
    42e4:	81 ec       	ldi	r24, 0xC1	; 193
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	90 93 e5 08 	sts	0x08E5, r25
    42ec:	80 93 e4 08 	sts	0x08E4, r24
    42f0:	82 ec       	ldi	r24, 0xC2	; 194
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	90 93 e7 08 	sts	0x08E7, r25
    42f8:	80 93 e6 08 	sts	0x08E6, r24
    42fc:	86 ec       	ldi	r24, 0xC6	; 198
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	90 93 e9 08 	sts	0x08E9, r25
    4304:	80 93 e8 08 	sts	0x08E8, r24
    4308:	10 92 eb 08 	sts	0x08EB, r1
    430c:	10 92 ec 08 	sts	0x08EC, r1
    4310:	10 92 ed 08 	sts	0x08ED, r1
    4314:	10 92 ee 08 	sts	0x08EE, r1

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    4318:	08 95       	ret

0000431a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    431a:	82 ed       	ldi	r24, 0xD2	; 210
    431c:	98 e0       	ldi	r25, 0x08	; 8
    431e:	0e 94 3a 20 	call	0x4074	; 0x4074 <_ZN14HardwareSerial9availableEv>
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	89 2b       	or	r24, r25
    4326:	09 f0       	breq	.+2      	; 0x432a <_Z17Serial0_availablev+0x10>
    4328:	21 e0       	ldi	r18, 0x01	; 1
}
    432a:	82 2f       	mov	r24, r18
    432c:	08 95       	ret

0000432e <__vector_26>:
#if defined(UART0_UDRE_vect)
ISR(UART0_UDRE_vect)
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
    432e:	1f 92       	push	r1
    4330:	0f 92       	push	r0
    4332:	0f b6       	in	r0, 0x3f	; 63
    4334:	0f 92       	push	r0
    4336:	0b b6       	in	r0, 0x3b	; 59
    4338:	0f 92       	push	r0
    433a:	11 24       	eor	r1, r1
    433c:	2f 93       	push	r18
    433e:	3f 93       	push	r19
    4340:	4f 93       	push	r20
    4342:	5f 93       	push	r21
    4344:	6f 93       	push	r22
    4346:	7f 93       	push	r23
    4348:	8f 93       	push	r24
    434a:	9f 93       	push	r25
    434c:	af 93       	push	r26
    434e:	bf 93       	push	r27
    4350:	ef 93       	push	r30
    4352:	ff 93       	push	r31
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for the first UART"
#endif
{
  Serial._tx_udr_empty_irq();
    4354:	82 ed       	ldi	r24, 0xD2	; 210
    4356:	98 e0       	ldi	r25, 0x08	; 8
    4358:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    435c:	ff 91       	pop	r31
    435e:	ef 91       	pop	r30
    4360:	bf 91       	pop	r27
    4362:	af 91       	pop	r26
    4364:	9f 91       	pop	r25
    4366:	8f 91       	pop	r24
    4368:	7f 91       	pop	r23
    436a:	6f 91       	pop	r22
    436c:	5f 91       	pop	r21
    436e:	4f 91       	pop	r20
    4370:	3f 91       	pop	r19
    4372:	2f 91       	pop	r18
    4374:	0f 90       	pop	r0
    4376:	0b be       	out	0x3b, r0	; 59
    4378:	0f 90       	pop	r0
    437a:	0f be       	out	0x3f, r0	; 63
    437c:	0f 90       	pop	r0
    437e:	1f 90       	pop	r1
    4380:	18 95       	reti

00004382 <main>:
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <Arduino.h>

int main(void)
    4382:	cf 93       	push	r28
    4384:	df 93       	push	r29
{
	init();
    4386:	0e 94 c1 1c 	call	0x3982	; 0x3982 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    438a:	0e 94 14 05 	call	0xa28	; 0xa28 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    438e:	c7 ed       	ldi	r28, 0xD7	; 215
    4390:	d0 e2       	ldi	r29, 0x20	; 32
#endif
	
	setup();
    
	for (;;) {
		loop();
    4392:	0e 94 ae 03 	call	0x75c	; 0x75c <loop>
		if (serialEventRun) serialEventRun();
    4396:	20 97       	sbiw	r28, 0x00	; 0
    4398:	e1 f3       	breq	.-8      	; 0x4392 <main+0x10>
    439a:	0e 94 d7 20 	call	0x41ae	; 0x41ae <_Z14serialEventRunv>
    439e:	f9 cf       	rjmp	.-14     	; 0x4392 <main+0x10>

000043a0 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    43a0:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <free>
}
    43a4:	08 95       	ret

000043a6 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    43a6:	cf 92       	push	r12
    43a8:	df 92       	push	r13
    43aa:	ef 92       	push	r14
    43ac:	ff 92       	push	r15
    43ae:	0f 93       	push	r16
    43b0:	1f 93       	push	r17
    43b2:	cf 93       	push	r28
    43b4:	df 93       	push	r29
    43b6:	7c 01       	movw	r14, r24
    43b8:	6b 01       	movw	r12, r22
    43ba:	8a 01       	movw	r16, r20
    43bc:	c0 e0       	ldi	r28, 0x00	; 0
    43be:	d0 e0       	ldi	r29, 0x00	; 0
    43c0:	0f c0       	rjmp	.+30     	; 0x43e0 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    43c2:	d6 01       	movw	r26, r12
    43c4:	6d 91       	ld	r22, X+
    43c6:	6d 01       	movw	r12, r26
    43c8:	d7 01       	movw	r26, r14
    43ca:	ed 91       	ld	r30, X+
    43cc:	fc 91       	ld	r31, X
    43ce:	01 90       	ld	r0, Z+
    43d0:	f0 81       	ld	r31, Z
    43d2:	e0 2d       	mov	r30, r0
    43d4:	c7 01       	movw	r24, r14
    43d6:	19 95       	eicall
    43d8:	c8 0f       	add	r28, r24
    43da:	d9 1f       	adc	r29, r25
    43dc:	01 50       	subi	r16, 0x01	; 1
    43de:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    43e0:	01 15       	cp	r16, r1
    43e2:	11 05       	cpc	r17, r1
    43e4:	71 f7       	brne	.-36     	; 0x43c2 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    43e6:	ce 01       	movw	r24, r28
    43e8:	df 91       	pop	r29
    43ea:	cf 91       	pop	r28
    43ec:	1f 91       	pop	r17
    43ee:	0f 91       	pop	r16
    43f0:	ff 90       	pop	r15
    43f2:	ef 90       	pop	r14
    43f4:	df 90       	pop	r13
    43f6:	cf 90       	pop	r12
    43f8:	08 95       	ret

000043fa <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    43fa:	ef 92       	push	r14
    43fc:	ff 92       	push	r15
    43fe:	0f 93       	push	r16
    4400:	1f 93       	push	r17
    4402:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4404:	dc 01       	movw	r26, r24
    4406:	ed 91       	ld	r30, X+
    4408:	fc 91       	ld	r31, X
    440a:	01 90       	ld	r0, Z+
    440c:	f0 81       	ld	r31, Z
    440e:	e0 2d       	mov	r30, r0
    4410:	6d e0       	ldi	r22, 0x0D	; 13
    4412:	19 95       	eicall
    4414:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    4416:	d8 01       	movw	r26, r16
    4418:	ed 91       	ld	r30, X+
    441a:	fc 91       	ld	r31, X
    441c:	01 90       	ld	r0, Z+
    441e:	f0 81       	ld	r31, Z
    4420:	e0 2d       	mov	r30, r0
    4422:	c8 01       	movw	r24, r16
    4424:	6a e0       	ldi	r22, 0x0A	; 10
    4426:	19 95       	eicall
    4428:	9c 01       	movw	r18, r24
    442a:	2e 0d       	add	r18, r14
    442c:	3f 1d       	adc	r19, r15
    442e:	c9 01       	movw	r24, r18
    4430:	1f 91       	pop	r17
    4432:	0f 91       	pop	r16
    4434:	ff 90       	pop	r15
    4436:	ef 90       	pop	r14
    4438:	08 95       	ret

0000443a <_ZN5Print5writeEPKc>:
    443a:	cf 93       	push	r28
    443c:	df 93       	push	r29
    443e:	ec 01       	movw	r28, r24
    4440:	61 15       	cp	r22, r1
    4442:	71 05       	cpc	r23, r1
    4444:	19 f4       	brne	.+6      	; 0x444c <_ZN5Print5writeEPKc+0x12>
    4446:	20 e0       	ldi	r18, 0x00	; 0
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	0f c0       	rjmp	.+30     	; 0x446a <_ZN5Print5writeEPKc+0x30>
    444c:	db 01       	movw	r26, r22
    444e:	0d 90       	ld	r0, X+
    4450:	00 20       	and	r0, r0
    4452:	e9 f7       	brne	.-6      	; 0x444e <_ZN5Print5writeEPKc+0x14>
    4454:	11 97       	sbiw	r26, 0x01	; 1
    4456:	a6 1b       	sub	r26, r22
    4458:	b7 0b       	sbc	r27, r23
    445a:	e8 81       	ld	r30, Y
    445c:	f9 81       	ldd	r31, Y+1	; 0x01
    445e:	02 80       	ldd	r0, Z+2	; 0x02
    4460:	f3 81       	ldd	r31, Z+3	; 0x03
    4462:	e0 2d       	mov	r30, r0
    4464:	ad 01       	movw	r20, r26
    4466:	19 95       	eicall
    4468:	9c 01       	movw	r18, r24
    446a:	c9 01       	movw	r24, r18
    446c:	df 91       	pop	r29
    446e:	cf 91       	pop	r28
    4470:	08 95       	ret

00004472 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    4472:	4f 92       	push	r4
    4474:	5f 92       	push	r5
    4476:	7f 92       	push	r7
    4478:	8f 92       	push	r8
    447a:	9f 92       	push	r9
    447c:	af 92       	push	r10
    447e:	bf 92       	push	r11
    4480:	cf 92       	push	r12
    4482:	df 92       	push	r13
    4484:	ef 92       	push	r14
    4486:	ff 92       	push	r15
    4488:	0f 93       	push	r16
    448a:	1f 93       	push	r17
    448c:	df 93       	push	r29
    448e:	cf 93       	push	r28
    4490:	cd b7       	in	r28, 0x3d	; 61
    4492:	de b7       	in	r29, 0x3e	; 62
    4494:	a1 97       	sbiw	r28, 0x21	; 33
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	f8 94       	cli
    449a:	de bf       	out	0x3e, r29	; 62
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	cd bf       	out	0x3d, r28	; 61
    44a0:	2c 01       	movw	r4, r24
    44a2:	74 2e       	mov	r7, r20
    44a4:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    44a6:	22 30       	cpi	r18, 0x02	; 2
    44a8:	08 f4       	brcc	.+2      	; 0x44ac <_ZN5Print11printNumberEmh+0x3a>
    44aa:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    44ac:	19 a2       	std	Y+33, r1	; 0x21
    44ae:	31 e2       	ldi	r19, 0x21	; 33
    44b0:	c3 2e       	mov	r12, r19
    44b2:	d1 2c       	mov	r13, r1
    44b4:	cc 0e       	add	r12, r28
    44b6:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    44b8:	82 2e       	mov	r8, r18
    44ba:	99 24       	eor	r9, r9
    44bc:	aa 24       	eor	r10, r10
    44be:	bb 24       	eor	r11, r11
    44c0:	67 2d       	mov	r22, r7
    44c2:	75 2f       	mov	r23, r21
    44c4:	a5 01       	movw	r20, r10
    44c6:	94 01       	movw	r18, r8
    44c8:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodsi4>
    44cc:	79 01       	movw	r14, r18
    44ce:	8a 01       	movw	r16, r20
    char c = m - base * n;
    44d0:	c8 01       	movw	r24, r16
    44d2:	b7 01       	movw	r22, r14
    44d4:	a5 01       	movw	r20, r10
    44d6:	94 01       	movw	r18, r8
    44d8:	0e 94 c3 24 	call	0x4986	; 0x4986 <__mulsi3>
    44dc:	47 2d       	mov	r20, r7
    44de:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    44e0:	08 94       	sec
    44e2:	c1 08       	sbc	r12, r1
    44e4:	d1 08       	sbc	r13, r1
    44e6:	4a 30       	cpi	r20, 0x0A	; 10
    44e8:	14 f4       	brge	.+4      	; 0x44ee <_ZN5Print11printNumberEmh+0x7c>
    44ea:	40 5d       	subi	r20, 0xD0	; 208
    44ec:	01 c0       	rjmp	.+2      	; 0x44f0 <_ZN5Print11printNumberEmh+0x7e>
    44ee:	49 5c       	subi	r20, 0xC9	; 201
    44f0:	f6 01       	movw	r30, r12
    44f2:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    44f4:	e1 14       	cp	r14, r1
    44f6:	f1 04       	cpc	r15, r1
    44f8:	01 05       	cpc	r16, r1
    44fa:	11 05       	cpc	r17, r1
    44fc:	21 f0       	breq	.+8      	; 0x4506 <_ZN5Print11printNumberEmh+0x94>
    44fe:	7e 2c       	mov	r7, r14
    4500:	5f 2d       	mov	r21, r15
    4502:	c8 01       	movw	r24, r16
    4504:	dd cf       	rjmp	.-70     	; 0x44c0 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    4506:	c2 01       	movw	r24, r4
    4508:	b6 01       	movw	r22, r12
    450a:	0e 94 1d 22 	call	0x443a	; 0x443a <_ZN5Print5writeEPKc>
}
    450e:	a1 96       	adiw	r28, 0x21	; 33
    4510:	0f b6       	in	r0, 0x3f	; 63
    4512:	f8 94       	cli
    4514:	de bf       	out	0x3e, r29	; 62
    4516:	0f be       	out	0x3f, r0	; 63
    4518:	cd bf       	out	0x3d, r28	; 61
    451a:	cf 91       	pop	r28
    451c:	df 91       	pop	r29
    451e:	1f 91       	pop	r17
    4520:	0f 91       	pop	r16
    4522:	ff 90       	pop	r15
    4524:	ef 90       	pop	r14
    4526:	df 90       	pop	r13
    4528:	cf 90       	pop	r12
    452a:	bf 90       	pop	r11
    452c:	af 90       	pop	r10
    452e:	9f 90       	pop	r9
    4530:	8f 90       	pop	r8
    4532:	7f 90       	pop	r7
    4534:	5f 90       	pop	r5
    4536:	4f 90       	pop	r4
    4538:	08 95       	ret

0000453a <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    453a:	cf 92       	push	r12
    453c:	df 92       	push	r13
    453e:	ef 92       	push	r14
    4540:	ff 92       	push	r15
    4542:	0f 93       	push	r16
    4544:	1f 93       	push	r17
    4546:	cf 93       	push	r28
    4548:	df 93       	push	r29
    454a:	ec 01       	movw	r28, r24
    454c:	6a 01       	movw	r12, r20
    454e:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    4550:	21 15       	cp	r18, r1
    4552:	31 05       	cpc	r19, r1
    4554:	41 f4       	brne	.+16     	; 0x4566 <_ZN5Print5printEli+0x2c>
    return write(n);
    4556:	e8 81       	ld	r30, Y
    4558:	f9 81       	ldd	r31, Y+1	; 0x01
    455a:	01 90       	ld	r0, Z+
    455c:	f0 81       	ld	r31, Z
    455e:	e0 2d       	mov	r30, r0
    4560:	64 2f       	mov	r22, r20
    4562:	19 95       	eicall
    4564:	1f c0       	rjmp	.+62     	; 0x45a4 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    4566:	2a 30       	cpi	r18, 0x0A	; 10
    4568:	31 05       	cpc	r19, r1
    456a:	d1 f4       	brne	.+52     	; 0x45a0 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    456c:	77 ff       	sbrs	r23, 7
    456e:	17 c0       	rjmp	.+46     	; 0x459e <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4570:	e8 81       	ld	r30, Y
    4572:	f9 81       	ldd	r31, Y+1	; 0x01
    4574:	01 90       	ld	r0, Z+
    4576:	f0 81       	ld	r31, Z
    4578:	e0 2d       	mov	r30, r0
    457a:	6d e2       	ldi	r22, 0x2D	; 45
    457c:	19 95       	eicall
    457e:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    4580:	44 27       	eor	r20, r20
    4582:	55 27       	eor	r21, r21
    4584:	ba 01       	movw	r22, r20
    4586:	4c 19       	sub	r20, r12
    4588:	5d 09       	sbc	r21, r13
    458a:	6e 09       	sbc	r22, r14
    458c:	7f 09       	sbc	r23, r15
    458e:	ce 01       	movw	r24, r28
    4590:	2a e0       	ldi	r18, 0x0A	; 10
    4592:	0e 94 39 22 	call	0x4472	; 0x4472 <_ZN5Print11printNumberEmh>
    4596:	98 01       	movw	r18, r16
    4598:	28 0f       	add	r18, r24
    459a:	39 1f       	adc	r19, r25
    459c:	04 c0       	rjmp	.+8      	; 0x45a6 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    459e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    45a0:	0e 94 39 22 	call	0x4472	; 0x4472 <_ZN5Print11printNumberEmh>
    45a4:	9c 01       	movw	r18, r24
  }
}
    45a6:	c9 01       	movw	r24, r18
    45a8:	df 91       	pop	r29
    45aa:	cf 91       	pop	r28
    45ac:	1f 91       	pop	r17
    45ae:	0f 91       	pop	r16
    45b0:	ff 90       	pop	r15
    45b2:	ef 90       	pop	r14
    45b4:	df 90       	pop	r13
    45b6:	cf 90       	pop	r12
    45b8:	08 95       	ret

000045ba <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    45ba:	ef 92       	push	r14
    45bc:	ff 92       	push	r15
    45be:	0f 93       	push	r16
    45c0:	1f 93       	push	r17
    45c2:	7b 01       	movw	r14, r22
    45c4:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    45c6:	00 27       	eor	r16, r16
    45c8:	f7 fc       	sbrc	r15, 7
    45ca:	00 95       	com	r16
    45cc:	10 2f       	mov	r17, r16
    45ce:	b8 01       	movw	r22, r16
    45d0:	a7 01       	movw	r20, r14
    45d2:	0e 94 9d 22 	call	0x453a	; 0x453a <_ZN5Print5printEli>
}
    45d6:	1f 91       	pop	r17
    45d8:	0f 91       	pop	r16
    45da:	ff 90       	pop	r15
    45dc:	ef 90       	pop	r14
    45de:	08 95       	ret

000045e0 <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    45e0:	cf 92       	push	r12
    45e2:	df 92       	push	r13
    45e4:	ef 92       	push	r14
    45e6:	ff 92       	push	r15
    45e8:	0f 93       	push	r16
    45ea:	1f 93       	push	r17
    45ec:	6c 01       	movw	r12, r24
    45ee:	7b 01       	movw	r14, r22
    45f0:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    45f2:	00 27       	eor	r16, r16
    45f4:	f7 fc       	sbrc	r15, 7
    45f6:	00 95       	com	r16
    45f8:	10 2f       	mov	r17, r16
    45fa:	b8 01       	movw	r22, r16
    45fc:	a7 01       	movw	r20, r14
    45fe:	0e 94 9d 22 	call	0x453a	; 0x453a <_ZN5Print5printEli>
    4602:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    4604:	c6 01       	movw	r24, r12
    4606:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5Print7printlnEv>
    460a:	08 0f       	add	r16, r24
    460c:	19 1f       	adc	r17, r25
  return n;
}
    460e:	c8 01       	movw	r24, r16
    4610:	1f 91       	pop	r17
    4612:	0f 91       	pop	r16
    4614:	ff 90       	pop	r15
    4616:	ef 90       	pop	r14
    4618:	df 90       	pop	r13
    461a:	cf 90       	pop	r12
    461c:	08 95       	ret

0000461e <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    461e:	08 95       	ret

00004620 <__subsf3>:
    4620:	50 58       	subi	r21, 0x80	; 128

00004622 <__addsf3>:
    4622:	bb 27       	eor	r27, r27
    4624:	aa 27       	eor	r26, r26
    4626:	0e d0       	rcall	.+28     	; 0x4644 <__addsf3x>
    4628:	0d c1       	rjmp	.+538    	; 0x4844 <__fp_round>
    462a:	fe d0       	rcall	.+508    	; 0x4828 <__fp_pscA>
    462c:	30 f0       	brcs	.+12     	; 0x463a <__addsf3+0x18>
    462e:	03 d1       	rcall	.+518    	; 0x4836 <__fp_pscB>
    4630:	20 f0       	brcs	.+8      	; 0x463a <__addsf3+0x18>
    4632:	31 f4       	brne	.+12     	; 0x4640 <__addsf3+0x1e>
    4634:	9f 3f       	cpi	r25, 0xFF	; 255
    4636:	11 f4       	brne	.+4      	; 0x463c <__addsf3+0x1a>
    4638:	1e f4       	brtc	.+6      	; 0x4640 <__addsf3+0x1e>
    463a:	f3 c0       	rjmp	.+486    	; 0x4822 <__fp_nan>
    463c:	0e f4       	brtc	.+2      	; 0x4640 <__addsf3+0x1e>
    463e:	e0 95       	com	r30
    4640:	e7 fb       	bst	r30, 7
    4642:	e9 c0       	rjmp	.+466    	; 0x4816 <__fp_inf>

00004644 <__addsf3x>:
    4644:	e9 2f       	mov	r30, r25
    4646:	0f d1       	rcall	.+542    	; 0x4866 <__fp_split3>
    4648:	80 f3       	brcs	.-32     	; 0x462a <__addsf3+0x8>
    464a:	ba 17       	cp	r27, r26
    464c:	62 07       	cpc	r22, r18
    464e:	73 07       	cpc	r23, r19
    4650:	84 07       	cpc	r24, r20
    4652:	95 07       	cpc	r25, r21
    4654:	18 f0       	brcs	.+6      	; 0x465c <__addsf3x+0x18>
    4656:	71 f4       	brne	.+28     	; 0x4674 <__addsf3x+0x30>
    4658:	9e f5       	brtc	.+102    	; 0x46c0 <__addsf3x+0x7c>
    465a:	27 c1       	rjmp	.+590    	; 0x48aa <__fp_zero>
    465c:	0e f4       	brtc	.+2      	; 0x4660 <__addsf3x+0x1c>
    465e:	e0 95       	com	r30
    4660:	0b 2e       	mov	r0, r27
    4662:	ba 2f       	mov	r27, r26
    4664:	a0 2d       	mov	r26, r0
    4666:	0b 01       	movw	r0, r22
    4668:	b9 01       	movw	r22, r18
    466a:	90 01       	movw	r18, r0
    466c:	0c 01       	movw	r0, r24
    466e:	ca 01       	movw	r24, r20
    4670:	a0 01       	movw	r20, r0
    4672:	11 24       	eor	r1, r1
    4674:	ff 27       	eor	r31, r31
    4676:	59 1b       	sub	r21, r25
    4678:	99 f0       	breq	.+38     	; 0x46a0 <__addsf3x+0x5c>
    467a:	59 3f       	cpi	r21, 0xF9	; 249
    467c:	50 f4       	brcc	.+20     	; 0x4692 <__addsf3x+0x4e>
    467e:	50 3e       	cpi	r21, 0xE0	; 224
    4680:	68 f1       	brcs	.+90     	; 0x46dc <__addsf3x+0x98>
    4682:	1a 16       	cp	r1, r26
    4684:	f0 40       	sbci	r31, 0x00	; 0
    4686:	a2 2f       	mov	r26, r18
    4688:	23 2f       	mov	r18, r19
    468a:	34 2f       	mov	r19, r20
    468c:	44 27       	eor	r20, r20
    468e:	58 5f       	subi	r21, 0xF8	; 248
    4690:	f3 cf       	rjmp	.-26     	; 0x4678 <__addsf3x+0x34>
    4692:	46 95       	lsr	r20
    4694:	37 95       	ror	r19
    4696:	27 95       	ror	r18
    4698:	a7 95       	ror	r26
    469a:	f0 40       	sbci	r31, 0x00	; 0
    469c:	53 95       	inc	r21
    469e:	c9 f7       	brne	.-14     	; 0x4692 <__addsf3x+0x4e>
    46a0:	7e f4       	brtc	.+30     	; 0x46c0 <__addsf3x+0x7c>
    46a2:	1f 16       	cp	r1, r31
    46a4:	ba 0b       	sbc	r27, r26
    46a6:	62 0b       	sbc	r22, r18
    46a8:	73 0b       	sbc	r23, r19
    46aa:	84 0b       	sbc	r24, r20
    46ac:	ba f0       	brmi	.+46     	; 0x46dc <__addsf3x+0x98>
    46ae:	91 50       	subi	r25, 0x01	; 1
    46b0:	a1 f0       	breq	.+40     	; 0x46da <__addsf3x+0x96>
    46b2:	ff 0f       	add	r31, r31
    46b4:	bb 1f       	adc	r27, r27
    46b6:	66 1f       	adc	r22, r22
    46b8:	77 1f       	adc	r23, r23
    46ba:	88 1f       	adc	r24, r24
    46bc:	c2 f7       	brpl	.-16     	; 0x46ae <__addsf3x+0x6a>
    46be:	0e c0       	rjmp	.+28     	; 0x46dc <__addsf3x+0x98>
    46c0:	ba 0f       	add	r27, r26
    46c2:	62 1f       	adc	r22, r18
    46c4:	73 1f       	adc	r23, r19
    46c6:	84 1f       	adc	r24, r20
    46c8:	48 f4       	brcc	.+18     	; 0x46dc <__addsf3x+0x98>
    46ca:	87 95       	ror	r24
    46cc:	77 95       	ror	r23
    46ce:	67 95       	ror	r22
    46d0:	b7 95       	ror	r27
    46d2:	f7 95       	ror	r31
    46d4:	9e 3f       	cpi	r25, 0xFE	; 254
    46d6:	08 f0       	brcs	.+2      	; 0x46da <__addsf3x+0x96>
    46d8:	b3 cf       	rjmp	.-154    	; 0x4640 <__addsf3+0x1e>
    46da:	93 95       	inc	r25
    46dc:	88 0f       	add	r24, r24
    46de:	08 f0       	brcs	.+2      	; 0x46e2 <__addsf3x+0x9e>
    46e0:	99 27       	eor	r25, r25
    46e2:	ee 0f       	add	r30, r30
    46e4:	97 95       	ror	r25
    46e6:	87 95       	ror	r24
    46e8:	08 95       	ret

000046ea <__cmpsf2>:
    46ea:	71 d0       	rcall	.+226    	; 0x47ce <__fp_cmp>
    46ec:	08 f4       	brcc	.+2      	; 0x46f0 <__cmpsf2+0x6>
    46ee:	81 e0       	ldi	r24, 0x01	; 1
    46f0:	08 95       	ret

000046f2 <__fixsfsi>:
    46f2:	04 d0       	rcall	.+8      	; 0x46fc <__fixunssfsi>
    46f4:	68 94       	set
    46f6:	b1 11       	cpse	r27, r1
    46f8:	d9 c0       	rjmp	.+434    	; 0x48ac <__fp_szero>
    46fa:	08 95       	ret

000046fc <__fixunssfsi>:
    46fc:	bc d0       	rcall	.+376    	; 0x4876 <__fp_splitA>
    46fe:	88 f0       	brcs	.+34     	; 0x4722 <__fixunssfsi+0x26>
    4700:	9f 57       	subi	r25, 0x7F	; 127
    4702:	90 f0       	brcs	.+36     	; 0x4728 <__fixunssfsi+0x2c>
    4704:	b9 2f       	mov	r27, r25
    4706:	99 27       	eor	r25, r25
    4708:	b7 51       	subi	r27, 0x17	; 23
    470a:	a0 f0       	brcs	.+40     	; 0x4734 <__fixunssfsi+0x38>
    470c:	d1 f0       	breq	.+52     	; 0x4742 <__fixunssfsi+0x46>
    470e:	66 0f       	add	r22, r22
    4710:	77 1f       	adc	r23, r23
    4712:	88 1f       	adc	r24, r24
    4714:	99 1f       	adc	r25, r25
    4716:	1a f0       	brmi	.+6      	; 0x471e <__fixunssfsi+0x22>
    4718:	ba 95       	dec	r27
    471a:	c9 f7       	brne	.-14     	; 0x470e <__fixunssfsi+0x12>
    471c:	12 c0       	rjmp	.+36     	; 0x4742 <__fixunssfsi+0x46>
    471e:	b1 30       	cpi	r27, 0x01	; 1
    4720:	81 f0       	breq	.+32     	; 0x4742 <__fixunssfsi+0x46>
    4722:	c3 d0       	rcall	.+390    	; 0x48aa <__fp_zero>
    4724:	b1 e0       	ldi	r27, 0x01	; 1
    4726:	08 95       	ret
    4728:	c0 c0       	rjmp	.+384    	; 0x48aa <__fp_zero>
    472a:	67 2f       	mov	r22, r23
    472c:	78 2f       	mov	r23, r24
    472e:	88 27       	eor	r24, r24
    4730:	b8 5f       	subi	r27, 0xF8	; 248
    4732:	39 f0       	breq	.+14     	; 0x4742 <__fixunssfsi+0x46>
    4734:	b9 3f       	cpi	r27, 0xF9	; 249
    4736:	cc f3       	brlt	.-14     	; 0x472a <__fixunssfsi+0x2e>
    4738:	86 95       	lsr	r24
    473a:	77 95       	ror	r23
    473c:	67 95       	ror	r22
    473e:	b3 95       	inc	r27
    4740:	d9 f7       	brne	.-10     	; 0x4738 <__fixunssfsi+0x3c>
    4742:	3e f4       	brtc	.+14     	; 0x4752 <__fixunssfsi+0x56>
    4744:	90 95       	com	r25
    4746:	80 95       	com	r24
    4748:	70 95       	com	r23
    474a:	61 95       	neg	r22
    474c:	7f 4f       	sbci	r23, 0xFF	; 255
    474e:	8f 4f       	sbci	r24, 0xFF	; 255
    4750:	9f 4f       	sbci	r25, 0xFF	; 255
    4752:	08 95       	ret

00004754 <__floatunsisf>:
    4754:	e8 94       	clt
    4756:	09 c0       	rjmp	.+18     	; 0x476a <__floatsisf+0x12>

00004758 <__floatsisf>:
    4758:	97 fb       	bst	r25, 7
    475a:	3e f4       	brtc	.+14     	; 0x476a <__floatsisf+0x12>
    475c:	90 95       	com	r25
    475e:	80 95       	com	r24
    4760:	70 95       	com	r23
    4762:	61 95       	neg	r22
    4764:	7f 4f       	sbci	r23, 0xFF	; 255
    4766:	8f 4f       	sbci	r24, 0xFF	; 255
    4768:	9f 4f       	sbci	r25, 0xFF	; 255
    476a:	99 23       	and	r25, r25
    476c:	a9 f0       	breq	.+42     	; 0x4798 <__floatsisf+0x40>
    476e:	f9 2f       	mov	r31, r25
    4770:	96 e9       	ldi	r25, 0x96	; 150
    4772:	bb 27       	eor	r27, r27
    4774:	93 95       	inc	r25
    4776:	f6 95       	lsr	r31
    4778:	87 95       	ror	r24
    477a:	77 95       	ror	r23
    477c:	67 95       	ror	r22
    477e:	b7 95       	ror	r27
    4780:	f1 11       	cpse	r31, r1
    4782:	f8 cf       	rjmp	.-16     	; 0x4774 <__floatsisf+0x1c>
    4784:	fa f4       	brpl	.+62     	; 0x47c4 <__floatsisf+0x6c>
    4786:	bb 0f       	add	r27, r27
    4788:	11 f4       	brne	.+4      	; 0x478e <__floatsisf+0x36>
    478a:	60 ff       	sbrs	r22, 0
    478c:	1b c0       	rjmp	.+54     	; 0x47c4 <__floatsisf+0x6c>
    478e:	6f 5f       	subi	r22, 0xFF	; 255
    4790:	7f 4f       	sbci	r23, 0xFF	; 255
    4792:	8f 4f       	sbci	r24, 0xFF	; 255
    4794:	9f 4f       	sbci	r25, 0xFF	; 255
    4796:	16 c0       	rjmp	.+44     	; 0x47c4 <__floatsisf+0x6c>
    4798:	88 23       	and	r24, r24
    479a:	11 f0       	breq	.+4      	; 0x47a0 <__floatsisf+0x48>
    479c:	96 e9       	ldi	r25, 0x96	; 150
    479e:	11 c0       	rjmp	.+34     	; 0x47c2 <__floatsisf+0x6a>
    47a0:	77 23       	and	r23, r23
    47a2:	21 f0       	breq	.+8      	; 0x47ac <__floatsisf+0x54>
    47a4:	9e e8       	ldi	r25, 0x8E	; 142
    47a6:	87 2f       	mov	r24, r23
    47a8:	76 2f       	mov	r23, r22
    47aa:	05 c0       	rjmp	.+10     	; 0x47b6 <__floatsisf+0x5e>
    47ac:	66 23       	and	r22, r22
    47ae:	71 f0       	breq	.+28     	; 0x47cc <__floatsisf+0x74>
    47b0:	96 e8       	ldi	r25, 0x86	; 134
    47b2:	86 2f       	mov	r24, r22
    47b4:	70 e0       	ldi	r23, 0x00	; 0
    47b6:	60 e0       	ldi	r22, 0x00	; 0
    47b8:	2a f0       	brmi	.+10     	; 0x47c4 <__floatsisf+0x6c>
    47ba:	9a 95       	dec	r25
    47bc:	66 0f       	add	r22, r22
    47be:	77 1f       	adc	r23, r23
    47c0:	88 1f       	adc	r24, r24
    47c2:	da f7       	brpl	.-10     	; 0x47ba <__floatsisf+0x62>
    47c4:	88 0f       	add	r24, r24
    47c6:	96 95       	lsr	r25
    47c8:	87 95       	ror	r24
    47ca:	97 f9       	bld	r25, 7
    47cc:	08 95       	ret

000047ce <__fp_cmp>:
    47ce:	99 0f       	add	r25, r25
    47d0:	00 08       	sbc	r0, r0
    47d2:	55 0f       	add	r21, r21
    47d4:	aa 0b       	sbc	r26, r26
    47d6:	e0 e8       	ldi	r30, 0x80	; 128
    47d8:	fe ef       	ldi	r31, 0xFE	; 254
    47da:	16 16       	cp	r1, r22
    47dc:	17 06       	cpc	r1, r23
    47de:	e8 07       	cpc	r30, r24
    47e0:	f9 07       	cpc	r31, r25
    47e2:	c0 f0       	brcs	.+48     	; 0x4814 <__fp_cmp+0x46>
    47e4:	12 16       	cp	r1, r18
    47e6:	13 06       	cpc	r1, r19
    47e8:	e4 07       	cpc	r30, r20
    47ea:	f5 07       	cpc	r31, r21
    47ec:	98 f0       	brcs	.+38     	; 0x4814 <__fp_cmp+0x46>
    47ee:	62 1b       	sub	r22, r18
    47f0:	73 0b       	sbc	r23, r19
    47f2:	84 0b       	sbc	r24, r20
    47f4:	95 0b       	sbc	r25, r21
    47f6:	39 f4       	brne	.+14     	; 0x4806 <__fp_cmp+0x38>
    47f8:	0a 26       	eor	r0, r26
    47fa:	61 f0       	breq	.+24     	; 0x4814 <__fp_cmp+0x46>
    47fc:	23 2b       	or	r18, r19
    47fe:	24 2b       	or	r18, r20
    4800:	25 2b       	or	r18, r21
    4802:	21 f4       	brne	.+8      	; 0x480c <__fp_cmp+0x3e>
    4804:	08 95       	ret
    4806:	0a 26       	eor	r0, r26
    4808:	09 f4       	brne	.+2      	; 0x480c <__fp_cmp+0x3e>
    480a:	a1 40       	sbci	r26, 0x01	; 1
    480c:	a6 95       	lsr	r26
    480e:	8f ef       	ldi	r24, 0xFF	; 255
    4810:	81 1d       	adc	r24, r1
    4812:	81 1d       	adc	r24, r1
    4814:	08 95       	ret

00004816 <__fp_inf>:
    4816:	97 f9       	bld	r25, 7
    4818:	9f 67       	ori	r25, 0x7F	; 127
    481a:	80 e8       	ldi	r24, 0x80	; 128
    481c:	70 e0       	ldi	r23, 0x00	; 0
    481e:	60 e0       	ldi	r22, 0x00	; 0
    4820:	08 95       	ret

00004822 <__fp_nan>:
    4822:	9f ef       	ldi	r25, 0xFF	; 255
    4824:	80 ec       	ldi	r24, 0xC0	; 192
    4826:	08 95       	ret

00004828 <__fp_pscA>:
    4828:	00 24       	eor	r0, r0
    482a:	0a 94       	dec	r0
    482c:	16 16       	cp	r1, r22
    482e:	17 06       	cpc	r1, r23
    4830:	18 06       	cpc	r1, r24
    4832:	09 06       	cpc	r0, r25
    4834:	08 95       	ret

00004836 <__fp_pscB>:
    4836:	00 24       	eor	r0, r0
    4838:	0a 94       	dec	r0
    483a:	12 16       	cp	r1, r18
    483c:	13 06       	cpc	r1, r19
    483e:	14 06       	cpc	r1, r20
    4840:	05 06       	cpc	r0, r21
    4842:	08 95       	ret

00004844 <__fp_round>:
    4844:	09 2e       	mov	r0, r25
    4846:	03 94       	inc	r0
    4848:	00 0c       	add	r0, r0
    484a:	11 f4       	brne	.+4      	; 0x4850 <__fp_round+0xc>
    484c:	88 23       	and	r24, r24
    484e:	52 f0       	brmi	.+20     	; 0x4864 <__fp_round+0x20>
    4850:	bb 0f       	add	r27, r27
    4852:	40 f4       	brcc	.+16     	; 0x4864 <__fp_round+0x20>
    4854:	bf 2b       	or	r27, r31
    4856:	11 f4       	brne	.+4      	; 0x485c <__fp_round+0x18>
    4858:	60 ff       	sbrs	r22, 0
    485a:	04 c0       	rjmp	.+8      	; 0x4864 <__fp_round+0x20>
    485c:	6f 5f       	subi	r22, 0xFF	; 255
    485e:	7f 4f       	sbci	r23, 0xFF	; 255
    4860:	8f 4f       	sbci	r24, 0xFF	; 255
    4862:	9f 4f       	sbci	r25, 0xFF	; 255
    4864:	08 95       	ret

00004866 <__fp_split3>:
    4866:	57 fd       	sbrc	r21, 7
    4868:	90 58       	subi	r25, 0x80	; 128
    486a:	44 0f       	add	r20, r20
    486c:	55 1f       	adc	r21, r21
    486e:	59 f0       	breq	.+22     	; 0x4886 <__fp_splitA+0x10>
    4870:	5f 3f       	cpi	r21, 0xFF	; 255
    4872:	71 f0       	breq	.+28     	; 0x4890 <__fp_splitA+0x1a>
    4874:	47 95       	ror	r20

00004876 <__fp_splitA>:
    4876:	88 0f       	add	r24, r24
    4878:	97 fb       	bst	r25, 7
    487a:	99 1f       	adc	r25, r25
    487c:	61 f0       	breq	.+24     	; 0x4896 <__fp_splitA+0x20>
    487e:	9f 3f       	cpi	r25, 0xFF	; 255
    4880:	79 f0       	breq	.+30     	; 0x48a0 <__fp_splitA+0x2a>
    4882:	87 95       	ror	r24
    4884:	08 95       	ret
    4886:	12 16       	cp	r1, r18
    4888:	13 06       	cpc	r1, r19
    488a:	14 06       	cpc	r1, r20
    488c:	55 1f       	adc	r21, r21
    488e:	f2 cf       	rjmp	.-28     	; 0x4874 <__fp_split3+0xe>
    4890:	46 95       	lsr	r20
    4892:	f1 df       	rcall	.-30     	; 0x4876 <__fp_splitA>
    4894:	08 c0       	rjmp	.+16     	; 0x48a6 <__fp_splitA+0x30>
    4896:	16 16       	cp	r1, r22
    4898:	17 06       	cpc	r1, r23
    489a:	18 06       	cpc	r1, r24
    489c:	99 1f       	adc	r25, r25
    489e:	f1 cf       	rjmp	.-30     	; 0x4882 <__fp_splitA+0xc>
    48a0:	86 95       	lsr	r24
    48a2:	71 05       	cpc	r23, r1
    48a4:	61 05       	cpc	r22, r1
    48a6:	08 94       	sec
    48a8:	08 95       	ret

000048aa <__fp_zero>:
    48aa:	e8 94       	clt

000048ac <__fp_szero>:
    48ac:	bb 27       	eor	r27, r27
    48ae:	66 27       	eor	r22, r22
    48b0:	77 27       	eor	r23, r23
    48b2:	cb 01       	movw	r24, r22
    48b4:	97 f9       	bld	r25, 7
    48b6:	08 95       	ret

000048b8 <__gesf2>:
    48b8:	8a df       	rcall	.-236    	; 0x47ce <__fp_cmp>
    48ba:	08 f4       	brcc	.+2      	; 0x48be <__gesf2+0x6>
    48bc:	8f ef       	ldi	r24, 0xFF	; 255
    48be:	08 95       	ret

000048c0 <__mulsf3>:
    48c0:	0b d0       	rcall	.+22     	; 0x48d8 <__mulsf3x>
    48c2:	c0 cf       	rjmp	.-128    	; 0x4844 <__fp_round>
    48c4:	b1 df       	rcall	.-158    	; 0x4828 <__fp_pscA>
    48c6:	28 f0       	brcs	.+10     	; 0x48d2 <__mulsf3+0x12>
    48c8:	b6 df       	rcall	.-148    	; 0x4836 <__fp_pscB>
    48ca:	18 f0       	brcs	.+6      	; 0x48d2 <__mulsf3+0x12>
    48cc:	95 23       	and	r25, r21
    48ce:	09 f0       	breq	.+2      	; 0x48d2 <__mulsf3+0x12>
    48d0:	a2 cf       	rjmp	.-188    	; 0x4816 <__fp_inf>
    48d2:	a7 cf       	rjmp	.-178    	; 0x4822 <__fp_nan>
    48d4:	11 24       	eor	r1, r1
    48d6:	ea cf       	rjmp	.-44     	; 0x48ac <__fp_szero>

000048d8 <__mulsf3x>:
    48d8:	c6 df       	rcall	.-116    	; 0x4866 <__fp_split3>
    48da:	a0 f3       	brcs	.-24     	; 0x48c4 <__mulsf3+0x4>

000048dc <__mulsf3_pse>:
    48dc:	95 9f       	mul	r25, r21
    48de:	d1 f3       	breq	.-12     	; 0x48d4 <__mulsf3+0x14>
    48e0:	95 0f       	add	r25, r21
    48e2:	50 e0       	ldi	r21, 0x00	; 0
    48e4:	55 1f       	adc	r21, r21
    48e6:	62 9f       	mul	r22, r18
    48e8:	f0 01       	movw	r30, r0
    48ea:	72 9f       	mul	r23, r18
    48ec:	bb 27       	eor	r27, r27
    48ee:	f0 0d       	add	r31, r0
    48f0:	b1 1d       	adc	r27, r1
    48f2:	63 9f       	mul	r22, r19
    48f4:	aa 27       	eor	r26, r26
    48f6:	f0 0d       	add	r31, r0
    48f8:	b1 1d       	adc	r27, r1
    48fa:	aa 1f       	adc	r26, r26
    48fc:	64 9f       	mul	r22, r20
    48fe:	66 27       	eor	r22, r22
    4900:	b0 0d       	add	r27, r0
    4902:	a1 1d       	adc	r26, r1
    4904:	66 1f       	adc	r22, r22
    4906:	82 9f       	mul	r24, r18
    4908:	22 27       	eor	r18, r18
    490a:	b0 0d       	add	r27, r0
    490c:	a1 1d       	adc	r26, r1
    490e:	62 1f       	adc	r22, r18
    4910:	73 9f       	mul	r23, r19
    4912:	b0 0d       	add	r27, r0
    4914:	a1 1d       	adc	r26, r1
    4916:	62 1f       	adc	r22, r18
    4918:	83 9f       	mul	r24, r19
    491a:	a0 0d       	add	r26, r0
    491c:	61 1d       	adc	r22, r1
    491e:	22 1f       	adc	r18, r18
    4920:	74 9f       	mul	r23, r20
    4922:	33 27       	eor	r19, r19
    4924:	a0 0d       	add	r26, r0
    4926:	61 1d       	adc	r22, r1
    4928:	23 1f       	adc	r18, r19
    492a:	84 9f       	mul	r24, r20
    492c:	60 0d       	add	r22, r0
    492e:	21 1d       	adc	r18, r1
    4930:	82 2f       	mov	r24, r18
    4932:	76 2f       	mov	r23, r22
    4934:	6a 2f       	mov	r22, r26
    4936:	11 24       	eor	r1, r1
    4938:	9f 57       	subi	r25, 0x7F	; 127
    493a:	50 40       	sbci	r21, 0x00	; 0
    493c:	8a f0       	brmi	.+34     	; 0x4960 <__mulsf3_pse+0x84>
    493e:	e1 f0       	breq	.+56     	; 0x4978 <__mulsf3_pse+0x9c>
    4940:	88 23       	and	r24, r24
    4942:	4a f0       	brmi	.+18     	; 0x4956 <__mulsf3_pse+0x7a>
    4944:	ee 0f       	add	r30, r30
    4946:	ff 1f       	adc	r31, r31
    4948:	bb 1f       	adc	r27, r27
    494a:	66 1f       	adc	r22, r22
    494c:	77 1f       	adc	r23, r23
    494e:	88 1f       	adc	r24, r24
    4950:	91 50       	subi	r25, 0x01	; 1
    4952:	50 40       	sbci	r21, 0x00	; 0
    4954:	a9 f7       	brne	.-22     	; 0x4940 <__mulsf3_pse+0x64>
    4956:	9e 3f       	cpi	r25, 0xFE	; 254
    4958:	51 05       	cpc	r21, r1
    495a:	70 f0       	brcs	.+28     	; 0x4978 <__mulsf3_pse+0x9c>
    495c:	5c cf       	rjmp	.-328    	; 0x4816 <__fp_inf>
    495e:	a6 cf       	rjmp	.-180    	; 0x48ac <__fp_szero>
    4960:	5f 3f       	cpi	r21, 0xFF	; 255
    4962:	ec f3       	brlt	.-6      	; 0x495e <__mulsf3_pse+0x82>
    4964:	98 3e       	cpi	r25, 0xE8	; 232
    4966:	dc f3       	brlt	.-10     	; 0x495e <__mulsf3_pse+0x82>
    4968:	86 95       	lsr	r24
    496a:	77 95       	ror	r23
    496c:	67 95       	ror	r22
    496e:	b7 95       	ror	r27
    4970:	f7 95       	ror	r31
    4972:	e7 95       	ror	r30
    4974:	9f 5f       	subi	r25, 0xFF	; 255
    4976:	c1 f7       	brne	.-16     	; 0x4968 <__mulsf3_pse+0x8c>
    4978:	fe 2b       	or	r31, r30
    497a:	88 0f       	add	r24, r24
    497c:	91 1d       	adc	r25, r1
    497e:	96 95       	lsr	r25
    4980:	87 95       	ror	r24
    4982:	97 f9       	bld	r25, 7
    4984:	08 95       	ret

00004986 <__mulsi3>:
    4986:	62 9f       	mul	r22, r18
    4988:	d0 01       	movw	r26, r0
    498a:	73 9f       	mul	r23, r19
    498c:	f0 01       	movw	r30, r0
    498e:	82 9f       	mul	r24, r18
    4990:	e0 0d       	add	r30, r0
    4992:	f1 1d       	adc	r31, r1
    4994:	64 9f       	mul	r22, r20
    4996:	e0 0d       	add	r30, r0
    4998:	f1 1d       	adc	r31, r1
    499a:	92 9f       	mul	r25, r18
    499c:	f0 0d       	add	r31, r0
    499e:	83 9f       	mul	r24, r19
    49a0:	f0 0d       	add	r31, r0
    49a2:	74 9f       	mul	r23, r20
    49a4:	f0 0d       	add	r31, r0
    49a6:	65 9f       	mul	r22, r21
    49a8:	f0 0d       	add	r31, r0
    49aa:	99 27       	eor	r25, r25
    49ac:	72 9f       	mul	r23, r18
    49ae:	b0 0d       	add	r27, r0
    49b0:	e1 1d       	adc	r30, r1
    49b2:	f9 1f       	adc	r31, r25
    49b4:	63 9f       	mul	r22, r19
    49b6:	b0 0d       	add	r27, r0
    49b8:	e1 1d       	adc	r30, r1
    49ba:	f9 1f       	adc	r31, r25
    49bc:	bd 01       	movw	r22, r26
    49be:	cf 01       	movw	r24, r30
    49c0:	11 24       	eor	r1, r1
    49c2:	08 95       	ret

000049c4 <__udivmodqi4>:
    49c4:	99 1b       	sub	r25, r25
    49c6:	79 e0       	ldi	r23, 0x09	; 9
    49c8:	04 c0       	rjmp	.+8      	; 0x49d2 <__udivmodqi4_ep>

000049ca <__udivmodqi4_loop>:
    49ca:	99 1f       	adc	r25, r25
    49cc:	96 17       	cp	r25, r22
    49ce:	08 f0       	brcs	.+2      	; 0x49d2 <__udivmodqi4_ep>
    49d0:	96 1b       	sub	r25, r22

000049d2 <__udivmodqi4_ep>:
    49d2:	88 1f       	adc	r24, r24
    49d4:	7a 95       	dec	r23
    49d6:	c9 f7       	brne	.-14     	; 0x49ca <__udivmodqi4_loop>
    49d8:	80 95       	com	r24
    49da:	08 95       	ret

000049dc <__udivmodsi4>:
    49dc:	a1 e2       	ldi	r26, 0x21	; 33
    49de:	1a 2e       	mov	r1, r26
    49e0:	aa 1b       	sub	r26, r26
    49e2:	bb 1b       	sub	r27, r27
    49e4:	fd 01       	movw	r30, r26
    49e6:	0d c0       	rjmp	.+26     	; 0x4a02 <__udivmodsi4_ep>

000049e8 <__udivmodsi4_loop>:
    49e8:	aa 1f       	adc	r26, r26
    49ea:	bb 1f       	adc	r27, r27
    49ec:	ee 1f       	adc	r30, r30
    49ee:	ff 1f       	adc	r31, r31
    49f0:	a2 17       	cp	r26, r18
    49f2:	b3 07       	cpc	r27, r19
    49f4:	e4 07       	cpc	r30, r20
    49f6:	f5 07       	cpc	r31, r21
    49f8:	20 f0       	brcs	.+8      	; 0x4a02 <__udivmodsi4_ep>
    49fa:	a2 1b       	sub	r26, r18
    49fc:	b3 0b       	sbc	r27, r19
    49fe:	e4 0b       	sbc	r30, r20
    4a00:	f5 0b       	sbc	r31, r21

00004a02 <__udivmodsi4_ep>:
    4a02:	66 1f       	adc	r22, r22
    4a04:	77 1f       	adc	r23, r23
    4a06:	88 1f       	adc	r24, r24
    4a08:	99 1f       	adc	r25, r25
    4a0a:	1a 94       	dec	r1
    4a0c:	69 f7       	brne	.-38     	; 0x49e8 <__udivmodsi4_loop>
    4a0e:	60 95       	com	r22
    4a10:	70 95       	com	r23
    4a12:	80 95       	com	r24
    4a14:	90 95       	com	r25
    4a16:	9b 01       	movw	r18, r22
    4a18:	ac 01       	movw	r20, r24
    4a1a:	bd 01       	movw	r22, r26
    4a1c:	cf 01       	movw	r24, r30
    4a1e:	08 95       	ret

00004a20 <__tablejump2__>:
    4a20:	ee 0f       	add	r30, r30
    4a22:	ff 1f       	adc	r31, r31

00004a24 <__tablejump__>:
    4a24:	05 90       	lpm	r0, Z+
    4a26:	f4 91       	lpm	r31, Z+
    4a28:	e0 2d       	mov	r30, r0
    4a2a:	19 94       	eijmp

00004a2c <__do_global_dtors>:
    4a2c:	13 e0       	ldi	r17, 0x03	; 3
    4a2e:	ce ea       	ldi	r28, 0xAE	; 174
    4a30:	d3 e0       	ldi	r29, 0x03	; 3
    4a32:	04 c0       	rjmp	.+8      	; 0x4a3c <.do_global_dtors_start>

00004a34 <.do_global_dtors_loop>:
    4a34:	fe 01       	movw	r30, r28
    4a36:	0e 94 12 25 	call	0x4a24	; 0x4a24 <__tablejump__>
    4a3a:	22 96       	adiw	r28, 0x02	; 2

00004a3c <.do_global_dtors_start>:
    4a3c:	c0 3b       	cpi	r28, 0xB0	; 176
    4a3e:	d1 07       	cpc	r29, r17
    4a40:	c9 f7       	brne	.-14     	; 0x4a34 <.do_global_dtors_loop>
    4a42:	f8 94       	cli

00004a44 <__stop_program>:
    4a44:	ff cf       	rjmp	.-2      	; 0x4a44 <__stop_program>
